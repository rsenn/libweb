// Generated from /home/roman/Dokumente/Sources/plot-cv/lib/grammars/JSXParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var JSXParserListener = require('./JSXParserListener').JSXParserListener;
var JSXParserVisitor = require('./JSXParserVisitor').JSXParserVisitor;

var JSXParserBase = require('./JSXParserBase').JSXParserBase;

var grammarFileName = 'JSXParser.g4';

var serializedATN = [
  '\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964',
  '\u0003\u0087\u0489\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004',
  '\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007',
  '\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f',
  '\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010',
  '\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014',
  '\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017',
  '\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b',
  '\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e',
  '\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#\t#\u0004',
  "$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
  '+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004',
  '2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004',
  '9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004',
  '@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004',
  'G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004',
  'N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004',
  'U\tU\u0004V\tV\u0004W\tW\u0003\u0002\u0005\u0002\u00b0\n\u0002\u0003',
  '\u0002\u0005\u0002\u00b3\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003',
  '\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004',
  '\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004',
  '\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004',
  '\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00cd\n\u0004\u0003',
  '\u0005\u0003\u0005\u0005\u0005\u00d1\n\u0005\u0003\u0005\u0003\u0005',
  '\u0003\u0006\u0006\u0006\u00d6\n\u0006\r\u0006\u000e\u0006\u00d7\u0003',
  '\u0007\u0003\u0007\u0003\u0007\u0003\b\u0005\b\u00de\n\b\u0003\b\u0003',
  '\b\u0005\b\u00e2\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b',
  '\u00e9\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00ef\n\t\f\t\u000e',
  '\t\u00f2\u000b\t\u0003\t\u0003\t\u0005\t\u00f6\n\t\u0005\t\u00f8\n\t',
  '\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0005',
  '\u000b\u0101\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0105\n\u000b',
  '\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005\r\u010d\n\r\u0003',
  '\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0112\n\u000e\u0003\u000e',
  '\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e',
  '\u0005\u000e\u011b\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003',
  '\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0123\n\u000f\u0003\u000f',
  '\u0003\u000f\u0005\u000f\u0127\n\u000f\u0003\u0010\u0003\u0010\u0003',
  '\u0010\u0005\u0010\u012c\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011',
  '\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0135\n',
  '\u0012\f\u0012\u000e\u0012\u0138\u000b\u0012\u0003\u0013\u0003\u0013',
  '\u0003\u0013\u0005\u0013\u013d\n\u0013\u0003\u0014\u0003\u0014\u0003',
  '\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003',
  '\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u014c',
  '\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017',
  '\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017',
  '\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017',
  '\u0003\u0017\u0005\u0017\u0160\n\u0017\u0003\u0017\u0003\u0017\u0005',
  '\u0017\u0164\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0168\n\u0017',
  '\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017',
  '\u0005\u0017\u0170\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003',
  '\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0179\n\u0017',
  '\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u017e\n\u0017\u0003',
  '\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005',
  '\u0017\u0186\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018',
  '\u018b\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0190',
  '\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a',
  '\u0005\u001a\u0197\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003',
  '\u001b\u0003\u001b\u0005\u001b\u019e\n\u001b\u0003\u001b\u0003\u001b',
  '\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b',
  '\u01a7\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01ac',
  '\n\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d',
  '\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e',
  '\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0005\u001f',
  '\u01be\n\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01c2\n\u001f\u0005',
  '\u001f\u01c4\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0006 \u01c9\n ',
  '\r \u000e \u01ca\u0003!\u0003!\u0003!\u0003!\u0005!\u01d1\n!\u0003"',
  '\u0003"\u0003"\u0005"\u01d6\n"\u0003#\u0003#\u0003#\u0003#\u0003',
  '$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0005%\u01e5',
  '\n%\u0003%\u0005%\u01e8\n%\u0003&\u0003&\u0003&\u0005&\u01ed\n&\u0003',
  "&\u0005&\u01f0\n&\u0003&\u0003&\u0003'\u0003'\u0003'\u0003(\u0003",
  '(\u0003(\u0003)\u0005)\u01fb\n)\u0003)\u0003)\u0005)\u01ff\n)\u0003',
  ')\u0003)\u0003)\u0005)\u0204\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003',
  '*\u0003*\u0003*\u0003*\u0003+\u0003+\u0005+\u0211\n+\u0003+\u0003+\u0007',
  '+\u0215\n+\f+\u000e+\u0218\u000b+\u0003+\u0003+\u0003,\u0003,\u0003',
  ',\u0003,\u0007,\u0220\n,\f,\u000e,\u0223\u000b,\u0003,\u0003,\u0003',
  ',\u0003,\u0003,\u0003,\u0005,\u022b\n,\u0003,\u0003,\u0005,\u022f\n',
  ',\u0003,\u0003,\u0003,\u0003,\u0005,\u0235\n,\u0003-\u0005-\u0238\n',
  '-\u0003-\u0005-\u023b\n-\u0003-\u0003-\u0003-\u0005-\u0240\n-\u0003',
  '-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0248\n-\u0003-\u0005-\u024b',
  '\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0255',
  '\n-\u0003-\u0005-\u0258\n-\u0003-\u0003-\u0003-\u0005-\u025d\n-\u0003',
  '-\u0003-\u0003-\u0003-\u0003-\u0005-\u0264\n-\u0003.\u0003.\u0003.\u0007',
  '.\u0269\n.\f.\u000e.\u026c\u000b.\u0003.\u0003.\u0005.\u0270\n.\u0003',
  '.\u0005.\u0273\n.\u0003/\u0003/\u0003/\u0005/\u0278\n/\u00030\u0003',
  '0\u00030\u00031\u00051\u027e\n1\u00032\u00062\u0281\n2\r2\u000e2\u0282',
  '\u00033\u00033\u00033\u00033\u00034\u00074\u028a\n4\f4\u000e4\u028d',
  '\u000b4\u00034\u00054\u0290\n4\u00034\u00064\u0293\n4\r4\u000e4\u0294',
  '\u00034\u00074\u0298\n4\f4\u000e4\u029b\u000b4\u00034\u00074\u029e\n',
  '4\f4\u000e4\u02a1\u000b4\u00035\u00055\u02a4\n5\u00035\u00035\u0003',
  '6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003',
  '6\u00056\u02b3\n6\u00036\u00056\u02b6\n6\u00036\u00036\u00036\u0005',
  '6\u02bb\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003',
  '6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003',
  '6\u00036\u00036\u00056\u02d2\n6\u00036\u00056\u02d5\n6\u00037\u0003',
  '7\u00037\u00037\u00037\u00037\u00037\u00057\u02de\n7\u00038\u00038\u0003',
  '8\u00038\u00078\u02e4\n8\f8\u000e8\u02e7\u000b8\u00038\u00058\u02ea',
  '\n8\u00058\u02ec\n8\u00038\u00038\u00039\u00059\u02f1\n9\u00039\u0003',
  '9\u00059\u02f5\n9\u0003:\u0003:\u0003:\u0007:\u02fa\n:\f:\u000e:\u02fd',
  '\u000b:\u0003;\u0003;\u0003;\u0003;\u0005;\u0303\n;\u0003;\u0003;\u0003',
  ';\u0003;\u0005;\u0309\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0005;\u0333\n;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u0373\n;\u0003',
  ';\u0003;\u0005;\u0377\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0003;\u0003;\u0003;\u0003;\u0007;\u0384\n;\f;\u000e;\u0387\u000b',
  ';\u0003<\u0006<\u038a\n<\r<\u000e<\u038b\u0003=\u0003=\u0003=\u0007',
  '=\u0391\n=\f=\u000e=\u0394\u000b=\u0003=\u0003=\u0003=\u0003=\u0003',
  '=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u03a0\n=\f=\u000e=\u03a3',
  '\u000b=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u03ac',
  '\n=\f=\u000e=\u03af\u000b=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003',
  '=\u0007=\u03b7\n=\f=\u000e=\u03ba\u000b=\u0003=\u0003=\u0005=\u03be',
  '\n=\u0003>\u0005>\u03c1\n>\u0003>\u0003>\u0005>\u03c5\n>\u0003>\u0005',
  '>\u03c8\n>\u0007>\u03ca\n>\f>\u000e>\u03cd\u000b>\u0003?\u0003?\u0003',
  '?\u0003@\u0003@\u0003@\u0003A\u0003A\u0003A\u0005A\u03d8\nA\u0003B\u0003',
  'B\u0003B\u0003B\u0003B\u0005B\u03df\nB\u0003C\u0003C\u0003D\u0006D\u03e4',
  '\nD\rD\u000eD\u03e5\u0003E\u0003E\u0003E\u0005E\u03eb\nE\u0003F\u0003',
  'F\u0003F\u0005F\u03f0\nF\u0003G\u0003G\u0003G\u0003G\u0007G\u03f6\n',
  'G\fG\u000eG\u03f9\u000bG\u0005G\u03fb\nG\u0003G\u0005G\u03fe\nG\u0003',
  'G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0005I\u0408\nI\u0003',
  'I\u0003I\u0005I\u040c\nI\u0003I\u0003I\u0005I\u0410\nI\u0003I\u0003',
  'I\u0003I\u0003I\u0003I\u0003I\u0005I\u0418\nI\u0003I\u0003I\u0003I\u0003',
  'I\u0005I\u041e\nI\u0003J\u0003J\u0003J\u0005J\u0423\nJ\u0003J\u0005',
  'J\u0426\nJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u042d\nK\u0003',
  'L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u0438',
  '\nM\u0003N\u0003N\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003',
  'Q\u0003Q\u0003Q\u0003R\u0003R\u0005R\u0448\nR\u0003S\u0003S\u0003T\u0003',
  'T\u0003T\u0005T\u044f\nT\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003',
  'U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003',
  'U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003',
  'U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003',
  'U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005',
  'U\u047f\nU\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0005W\u0487\n',
  'W\u0003W\u0002\u0003tX\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014',
  '\u0016\u0018\u001a\u001c\u001e "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd',
  'fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090',
  '\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8',
  '\u00aa\u00ac\u0002\u000e\u0003\u0002\u001a\u001c\u0003\u0002\u0016\u0017',
  '\u0003\u0002 "\u0003\u0002#&\u0003\u0002\'*\u0004\u0002ww\u0084\u0084',
  '\u0004\u0002\u000b\u000b##\u0003\u00020;\u0003\u0002?C\u0003\u0002D',
  'G\u0005\u0002kkooww\u0003\u0002no\u0002\u0536\u0002\u00af\u0003\u0002',
  '\u0002\u0002\u0004\u00b6\u0003\u0002\u0002\u0002\u0006\u00cc\u0003\u0002',
  '\u0002\u0002\b\u00ce\u0003\u0002\u0002\u0002\n\u00d5\u0003\u0002\u0002',
  '\u0002\f\u00d9\u0003\u0002\u0002\u0002\u000e\u00e8\u0003\u0002\u0002',
  '\u0002\u0010\u00ea\u0003\u0002\u0002\u0002\u0012\u00fb\u0003\u0002\u0002',
  '\u0002\u0014\u0100\u0003\u0002\u0002\u0002\u0016\u0106\u0003\u0002\u0002',
  '\u0002\u0018\u0109\u0003\u0002\u0002\u0002\u001a\u011a\u0003\u0002\u0002',
  '\u0002\u001c\u0126\u0003\u0002\u0002\u0002\u001e\u012b\u0003\u0002\u0002',
  '\u0002 \u012d\u0003\u0002\u0002\u0002"\u0130\u0003\u0002\u0002\u0002',
  '$\u0139\u0003\u0002\u0002\u0002&\u013e\u0003\u0002\u0002\u0002(\u0140',
  '\u0003\u0002\u0002\u0002*\u0144\u0003\u0002\u0002\u0002,\u0185\u0003',
  '\u0002\u0002\u0002.\u018a\u0003\u0002\u0002\u00020\u018c\u0003\u0002',
  '\u0002\u00022\u0193\u0003\u0002\u0002\u00024\u01a6\u0003\u0002\u0002',
  '\u00026\u01a8\u0003\u0002\u0002\u00028\u01af\u0003\u0002\u0002\u0002',
  ':\u01b5\u0003\u0002\u0002\u0002<\u01bb\u0003\u0002\u0002\u0002>\u01c8',
  '\u0003\u0002\u0002\u0002@\u01cc\u0003\u0002\u0002\u0002B\u01d2\u0003',
  '\u0002\u0002\u0002D\u01d7\u0003\u0002\u0002\u0002F\u01db\u0003\u0002',
  '\u0002\u0002H\u01e0\u0003\u0002\u0002\u0002J\u01e9\u0003\u0002\u0002',
  '\u0002L\u01f3\u0003\u0002\u0002\u0002N\u01f6\u0003\u0002\u0002\u0002',
  'P\u01fa\u0003\u0002\u0002\u0002R\u020a\u0003\u0002\u0002\u0002T\u0210',
  '\u0003\u0002\u0002\u0002V\u0234\u0003\u0002\u0002\u0002X\u0263\u0003',
  '\u0002\u0002\u0002Z\u0272\u0003\u0002\u0002\u0002\\\u0274\u0003\u0002',
  '\u0002\u0002^\u0279\u0003\u0002\u0002\u0002`\u027d\u0003\u0002\u0002',
  '\u0002b\u0280\u0003\u0002\u0002\u0002d\u0284\u0003\u0002\u0002\u0002',
  'f\u028b\u0003\u0002\u0002\u0002h\u02a3\u0003\u0002\u0002\u0002j\u02d4',
  '\u0003\u0002\u0002\u0002l\u02dd\u0003\u0002\u0002\u0002n\u02df\u0003',
  '\u0002\u0002\u0002p\u02f0\u0003\u0002\u0002\u0002r\u02f6\u0003\u0002',
  '\u0002\u0002t\u0332\u0003\u0002\u0002\u0002v\u0389\u0003\u0002\u0002',
  '\u0002x\u03bd\u0003\u0002\u0002\u0002z\u03c0\u0003\u0002\u0002\u0002',
  '|\u03ce\u0003\u0002\u0002\u0002~\u03d1\u0003\u0002\u0002\u0002\u0080',
  '\u03d7\u0003\u0002\u0002\u0002\u0082\u03de\u0003\u0002\u0002\u0002\u0084',
  '\u03e0\u0003\u0002\u0002\u0002\u0086\u03e3\u0003\u0002\u0002\u0002\u0088',
  '\u03ea\u0003\u0002\u0002\u0002\u008a\u03ef\u0003\u0002\u0002\u0002\u008c',
  '\u03f1\u0003\u0002\u0002\u0002\u008e\u0401\u0003\u0002\u0002\u0002\u0090',
  '\u041d\u0003\u0002\u0002\u0002\u0092\u0425\u0003\u0002\u0002\u0002\u0094',
  '\u042c\u0003\u0002\u0002\u0002\u0096\u042e\u0003\u0002\u0002\u0002\u0098',
  '\u0437\u0003\u0002\u0002\u0002\u009a\u0439\u0003\u0002\u0002\u0002\u009c',
  '\u043b\u0003\u0002\u0002\u0002\u009e\u043d\u0003\u0002\u0002\u0002\u00a0',
  '\u0441\u0003\u0002\u0002\u0002\u00a2\u0447\u0003\u0002\u0002\u0002\u00a4',
  '\u0449\u0003\u0002\u0002\u0002\u00a6\u044e\u0003\u0002\u0002\u0002\u00a8',
  '\u047e\u0003\u0002\u0002\u0002\u00aa\u0480\u0003\u0002\u0002\u0002\u00ac',
  '\u0486\u0003\u0002\u0002\u0002\u00ae\u00b0\u0007\u0003\u0002\u0002\u00af',
  '\u00ae\u0003\u0002\u0002\u0002\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0',
  '\u00b2\u0003\u0002\u0002\u0002\u00b1\u00b3\u0005b2\u0002\u00b2\u00b1',
  '\u0003\u0002\u0002\u0002\u00b2\u00b3\u0003\u0002\u0002\u0002\u00b3\u00b4',
  '\u0003\u0002\u0002\u0002\u00b4\u00b5\u0007\u0002\u0002\u0003\u00b5\u0003',
  '\u0003\u0002\u0002\u0002\u00b6\u00b7\u0005\u0006\u0004\u0002\u00b7\u0005',
  '\u0003\u0002\u0002\u0002\u00b8\u00cd\u0005\b\u0005\u0002\u00b9\u00cd',
  '\u0005 \u0011\u0002\u00ba\u00cd\u0005\f\u0007\u0002\u00bb\u00cd\u0005',
  '\u001a\u000e\u0002\u00bc\u00cd\u0005&\u0014\u0002\u00bd\u00cd\u0005',
  'R*\u0002\u00be\u00cd\u0005(\u0015\u0002\u00bf\u00cd\u0005*\u0016\u0002',
  '\u00c0\u00cd\u0005,\u0017\u0002\u00c1\u00cd\u00050\u0019\u0002\u00c2',
  '\u00cd\u00052\u001a\u0002\u00c3\u00cd\u00054\u001b\u0002\u00c4\u00cd',
  '\u00056\u001c\u0002\u00c5\u00cd\u00058\u001d\u0002\u00c6\u00cd\u0005',
  'D#\u0002\u00c7\u00cd\u0005:\u001e\u0002\u00c8\u00cd\u0005F$\u0002\u00c9',
  '\u00cd\u0005H%\u0002\u00ca\u00cd\u0005N(\u0002\u00cb\u00cd\u0005P)\u0002',
  '\u00cc\u00b8\u0003\u0002\u0002\u0002\u00cc\u00b9\u0003\u0002\u0002\u0002',
  '\u00cc\u00ba\u0003\u0002\u0002\u0002\u00cc\u00bb\u0003\u0002\u0002\u0002',
  '\u00cc\u00bc\u0003\u0002\u0002\u0002\u00cc\u00bd\u0003\u0002\u0002\u0002',
  '\u00cc\u00be\u0003\u0002\u0002\u0002\u00cc\u00bf\u0003\u0002\u0002\u0002',
  '\u00cc\u00c0\u0003\u0002\u0002\u0002\u00cc\u00c1\u0003\u0002\u0002\u0002',
  '\u00cc\u00c2\u0003\u0002\u0002\u0002\u00cc\u00c3\u0003\u0002\u0002\u0002',
  '\u00cc\u00c4\u0003\u0002\u0002\u0002\u00cc\u00c5\u0003\u0002\u0002\u0002',
  '\u00cc\u00c6\u0003\u0002\u0002\u0002\u00cc\u00c7\u0003\u0002\u0002\u0002',
  '\u00cc\u00c8\u0003\u0002\u0002\u0002\u00cc\u00c9\u0003\u0002\u0002\u0002',
  '\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc\u00cb\u0003\u0002\u0002\u0002',
  '\u00cd\u0007\u0003\u0002\u0002\u0002\u00ce\u00d0\u0007\u000b\u0002\u0002',
  '\u00cf\u00d1\u0005\n\u0006\u0002\u00d0\u00cf\u0003\u0002\u0002\u0002',
  '\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d2\u0003\u0002\u0002\u0002',
  '\u00d2\u00d3\u0007\f\u0002\u0002\u00d3\t\u0003\u0002\u0002\u0002\u00d4',
  '\u00d6\u0005\u0006\u0004\u0002\u00d5\u00d4\u0003\u0002\u0002\u0002\u00d6',
  '\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d5\u0003\u0002\u0002\u0002\u00d7',
  '\u00d8\u0003\u0002\u0002\u0002\u00d8\u000b\u0003\u0002\u0002\u0002\u00d9',
  '\u00da\u0007j\u0002\u0002\u00da\u00db\u0005\u000e\b\u0002\u00db\r\u0003',
  '\u0002\u0002\u0002\u00dc\u00de\u0005\u0012\n\u0002\u00dd\u00dc\u0003',
  '\u0002\u0002\u0002\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00e1\u0003',
  '\u0002\u0002\u0002\u00df\u00e2\u0005\u0014\u000b\u0002\u00e0\u00e2\u0005',
  '\u0010\t\u0002\u00e1\u00df\u0003\u0002\u0002\u0002\u00e1\u00e0\u0003',
  '\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e4\u0005',
  '\u0016\f\u0002\u00e4\u00e5\u0005\u00acW\u0002\u00e5\u00e9\u0003\u0002',
  '\u0002\u0002\u00e6\u00e7\u0007x\u0002\u0002\u00e7\u00e9\u0005\u00ac',
  'W\u0002\u00e8\u00dd\u0003\u0002\u0002\u0002\u00e8\u00e6\u0003\u0002',
  '\u0002\u0002\u00e9\u000f\u0003\u0002\u0002\u0002\u00ea\u00f0\u0007\u000b',
  '\u0002\u0002\u00eb\u00ec\u0005\u0018\r\u0002\u00ec\u00ed\u0007\u000e',
  '\u0002\u0002\u00ed\u00ef\u0003\u0002\u0002\u0002\u00ee\u00eb\u0003\u0002',
  '\u0002\u0002\u00ef\u00f2\u0003\u0002\u0002\u0002\u00f0\u00ee\u0003\u0002',
  '\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1\u00f7\u0003\u0002',
  '\u0002\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f3\u00f5\u0005\u0018',
  '\r\u0002\u00f4\u00f6\u0007\u000e\u0002\u0002\u00f5\u00f4\u0003\u0002',
  '\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f8\u0003\u0002',
  '\u0002\u0002\u00f7\u00f3\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002',
  '\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9\u00fa\u0007\f',
  '\u0002\u0002\u00fa\u0011\u0003\u0002\u0002\u0002\u00fb\u00fc\u0005\u0018',
  '\r\u0002\u00fc\u00fd\u0007\u000e\u0002\u0002\u00fd\u0013\u0003\u0002',
  '\u0002\u0002\u00fe\u0101\u0007\u001a\u0002\u0002\u00ff\u0101\u0005\u00a2',
  'R\u0002\u0100\u00fe\u0003\u0002\u0002\u0002\u0100\u00ff\u0003\u0002',
  '\u0002\u0002\u0101\u0104\u0003\u0002\u0002\u0002\u0102\u0103\u0007b',
  '\u0002\u0002\u0103\u0105\u0005\u00a2R\u0002\u0104\u0102\u0003\u0002',
  '\u0002\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0105\u0015\u0003\u0002',
  '\u0002\u0002\u0106\u0107\u0007c\u0002\u0002\u0107\u0108\u0007x\u0002',
  '\u0002\u0108\u0017\u0003\u0002\u0002\u0002\u0109\u010c\u0005\u00a2R',
  '\u0002\u010a\u010b\u0007b\u0002\u0002\u010b\u010d\u0005\u00a2R\u0002',
  '\u010c\u010a\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002',
  '\u010d\u0019\u0003\u0002\u0002\u0002\u010e\u0111\u0007i\u0002\u0002',
  '\u010f\u0112\u0005\u001c\u000f\u0002\u0110\u0112\u0005\u001e\u0010\u0002',
  '\u0111\u010f\u0003\u0002\u0002\u0002\u0111\u0110\u0003\u0002\u0002\u0002',
  '\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u0114\u0005\u00acW\u0002',
  '\u0114\u011b\u0003\u0002\u0002\u0002\u0115\u0116\u0007i\u0002\u0002',
  '\u0116\u0117\u0007\\\u0002\u0002\u0117\u0118\u0005t;\u0002\u0118\u0119',
  '\u0005\u00acW\u0002\u0119\u011b\u0003\u0002\u0002\u0002\u011a\u010e',
  '\u0003\u0002\u0002\u0002\u011a\u0115\u0003\u0002\u0002\u0002\u011b\u001b',
  '\u0003\u0002\u0002\u0002\u011c\u011d\u0005\u0014\u000b\u0002\u011d\u011e',
  '\u0005\u0016\f\u0002\u011e\u011f\u0005\u00acW\u0002\u011f\u0127\u0003',
  '\u0002\u0002\u0002\u0120\u0122\u0005\u0010\t\u0002\u0121\u0123\u0005',
  '\u0016\f\u0002\u0122\u0121\u0003\u0002\u0002\u0002\u0122\u0123\u0003',
  '\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0125\u0005',
  '\u00acW\u0002\u0125\u0127\u0003\u0002\u0002\u0002\u0126\u011c\u0003',
  '\u0002\u0002\u0002\u0126\u0120\u0003\u0002\u0002\u0002\u0127\u001d\u0003',
  '\u0002\u0002\u0002\u0128\u012c\u0005 \u0011\u0002\u0129\u012c\u0005',
  'R*\u0002\u012a\u012c\u0005P)\u0002\u012b\u0128\u0003\u0002\u0002\u0002',
  '\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012a\u0003\u0002\u0002\u0002',
  '\u012c\u001f\u0003\u0002\u0002\u0002\u012d\u012e\u0005"\u0012\u0002',
  '\u012e\u012f\u0005\u00acW\u0002\u012f!\u0003\u0002\u0002\u0002\u0130',
  '\u0131\u0005.\u0018\u0002\u0131\u0136\u0005$\u0013\u0002\u0132\u0133',
  '\u0007\u000e\u0002\u0002\u0133\u0135\u0005$\u0013\u0002\u0134\u0132',
  '\u0003\u0002\u0002\u0002\u0135\u0138\u0003\u0002\u0002\u0002\u0136\u0134',
  '\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137#',
  '\u0003\u0002\u0002\u0002\u0138\u0136\u0003\u0002\u0002\u0002\u0139\u013c',
  '\u0005\u008aF\u0002\u013a\u013b\u0007\u000f\u0002\u0002\u013b\u013d',
  '\u0005t;\u0002\u013c\u013a\u0003\u0002\u0002\u0002\u013c\u013d\u0003',
  '\u0002\u0002\u0002\u013d%\u0003\u0002\u0002\u0002\u013e\u013f\u0007',
  "\r\u0002\u0002\u013f'\u0003\u0002\u0002\u0002\u0140\u0141\u0006\u0015",
  '\u0002\u0002\u0141\u0142\u0005r:\u0002\u0142\u0143\u0005\u00acW\u0002',
  '\u0143)\u0003\u0002\u0002\u0002\u0144\u0145\u0007]\u0002\u0002\u0145',
  '\u0146\u0007\t\u0002\u0002\u0146\u0147\u0005r:\u0002\u0147\u0148\u0007',
  '\n\u0002\u0002\u0148\u014b\u0005\u0006\u0004\u0002\u0149\u014a\u0007',
  'M\u0002\u0002\u014a\u014c\u0005\u0006\u0004\u0002\u014b\u0149\u0003',
  '\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c+\u0003',
  '\u0002\u0002\u0002\u014d\u014e\u0007I\u0002\u0002\u014e\u014f\u0005',
  '\u0006\u0004\u0002\u014f\u0150\u0007W\u0002\u0002\u0150\u0151\u0007',
  '\t\u0002\u0002\u0151\u0152\u0005r:\u0002\u0152\u0153\u0007\n\u0002\u0002',
  '\u0153\u0154\u0005\u00acW\u0002\u0154\u0186\u0003\u0002\u0002\u0002',
  '\u0155\u0156\u0007W\u0002\u0002\u0156\u0157\u0007\t\u0002\u0002\u0157',
  '\u0158\u0005r:\u0002\u0158\u0159\u0007\n\u0002\u0002\u0159\u015a\u0005',
  '\u0006\u0004\u0002\u015a\u0186\u0003\u0002\u0002\u0002\u015b\u015c\u0007',
  'U\u0002\u0002\u015c\u015f\u0007\t\u0002\u0002\u015d\u0160\u0005r:\u0002',
  '\u015e\u0160\u0005"\u0012\u0002\u015f\u015d\u0003\u0002\u0002\u0002',
  '\u015f\u015e\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002',
  '\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0163\u0007\r\u0002\u0002',
  '\u0162\u0164\u0005r:\u0002\u0163\u0162\u0003\u0002\u0002\u0002\u0163',
  '\u0164\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002\u0002\u0002\u0165',
  '\u0167\u0007\r\u0002\u0002\u0166\u0168\u0005r:\u0002\u0167\u0166\u0003',
  '\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168\u0169\u0003',
  '\u0002\u0002\u0002\u0169\u016a\u0007\n\u0002\u0002\u016a\u0186\u0005',
  '\u0006\u0004\u0002\u016b\u016c\u0007U\u0002\u0002\u016c\u016f\u0007',
  '\t\u0002\u0002\u016d\u0170\u0005t;\u0002\u016e\u0170\u0005"\u0012\u0002',
  '\u016f\u016d\u0003\u0002\u0002\u0002\u016f\u016e\u0003\u0002\u0002\u0002',
  '\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0172\u0007`\u0002\u0002',
  '\u0172\u0173\u0005r:\u0002\u0173\u0174\u0007\n\u0002\u0002\u0174\u0175',
  '\u0005\u0006\u0004\u0002\u0175\u0186\u0003\u0002\u0002\u0002\u0176\u0178',
  '\u0007U\u0002\u0002\u0177\u0179\u0007l\u0002\u0002\u0178\u0177\u0003',
  '\u0002\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017a\u0003',
  '\u0002\u0002\u0002\u017a\u017d\u0007\t\u0002\u0002\u017b\u017e\u0005',
  't;\u0002\u017c\u017e\u0005"\u0012\u0002\u017d\u017b\u0003\u0002\u0002',
  '\u0002\u017d\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002',
  '\u0002\u017f\u0180\u0005\u00a4S\u0002\u0180\u0181\u0006\u0017\u0003',
  '\u0002\u0181\u0182\u0005r:\u0002\u0182\u0183\u0007\n\u0002\u0002\u0183',
  '\u0184\u0005\u0006\u0004\u0002\u0184\u0186\u0003\u0002\u0002\u0002\u0185',
  '\u014d\u0003\u0002\u0002\u0002\u0185\u0155\u0003\u0002\u0002\u0002\u0185',
  '\u015b\u0003\u0002\u0002\u0002\u0185\u016b\u0003\u0002\u0002\u0002\u0185',
  '\u0176\u0003\u0002\u0002\u0002\u0186-\u0003\u0002\u0002\u0002\u0187',
  '\u018b\u0007O\u0002\u0002\u0188\u018b\u0005\u00aaV\u0002\u0189\u018b',
  '\u0007h\u0002\u0002\u018a\u0187\u0003\u0002\u0002\u0002\u018a\u0188',
  '\u0003\u0002\u0002\u0002\u018a\u0189\u0003\u0002\u0002\u0002\u018b/',
  '\u0003\u0002\u0002\u0002\u018c\u018f\u0007T\u0002\u0002\u018d\u018e',
  '\u0006\u0019\u0004\u0002\u018e\u0190\u0005\u00a4S\u0002\u018f\u018d',
  '\u0003\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002\u0190\u0191',
  '\u0003\u0002\u0002\u0002\u0191\u0192\u0005\u00acW\u0002\u01921\u0003',
  '\u0002\u0002\u0002\u0193\u0196\u0007H\u0002\u0002\u0194\u0195\u0006',
  '\u001a\u0005\u0002\u0195\u0197\u0005\u00a4S\u0002\u0196\u0194\u0003',
  '\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198\u0003',
  '\u0002\u0002\u0002\u0198\u0199\u0005\u00acW\u0002\u01993\u0003\u0002',
  '\u0002\u0002\u019a\u019d\u0007R\u0002\u0002\u019b\u019c\u0006\u001b',
  '\u0006\u0002\u019c\u019e\u0005r:\u0002\u019d\u019b\u0003\u0002\u0002',
  '\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002',
  '\u0002\u019f\u01a7\u0005\u00acW\u0002\u01a0\u01a1\u0007R\u0002\u0002',
  '\u01a1\u01a2\u0007\t\u0002\u0002\u01a2\u01a3\u0005v<\u0002\u01a3\u01a4',
  '\u0007\n\u0002\u0002\u01a4\u01a5\u0005\u00acW\u0002\u01a5\u01a7\u0003',
  '\u0002\u0002\u0002\u01a6\u019a\u0003\u0002\u0002\u0002\u01a6\u01a0\u0003',
  '\u0002\u0002\u0002\u01a75\u0003\u0002\u0002\u0002\u01a8\u01ab\u0007',
  'v\u0002\u0002\u01a9\u01aa\u0006\u001c\u0007\u0002\u01aa\u01ac\u0005',
  'r:\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002',
  '\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01ae\u0005\u00ac',
  'W\u0002\u01ae7\u0003\u0002\u0002\u0002\u01af\u01b0\u0007[\u0002\u0002',
  '\u01b0\u01b1\u0007\t\u0002\u0002\u01b1\u01b2\u0005r:\u0002\u01b2\u01b3',
  '\u0007\n\u0002\u0002\u01b3\u01b4\u0005\u0006\u0004\u0002\u01b49\u0003',
  '\u0002\u0002\u0002\u01b5\u01b6\u0007V\u0002\u0002\u01b6\u01b7\u0007',
  '\t\u0002\u0002\u01b7\u01b8\u0005r:\u0002\u01b8\u01b9\u0007\n\u0002\u0002',
  '\u01b9\u01ba\u0005<\u001f\u0002\u01ba;\u0003\u0002\u0002\u0002\u01bb',
  '\u01bd\u0007\u000b\u0002\u0002\u01bc\u01be\u0005> \u0002\u01bd\u01bc',
  '\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002\u01be\u01c3',
  '\u0003\u0002\u0002\u0002\u01bf\u01c1\u0005B"\u0002\u01c0\u01c2\u0005',
  '> \u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002',
  '\u0002\u0002\u01c2\u01c4\u0003\u0002\u0002\u0002\u01c3\u01bf\u0003\u0002',
  '\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002',
  '\u0002\u0002\u01c5\u01c6\u0007\f\u0002\u0002\u01c6=\u0003\u0002\u0002',
  '\u0002\u01c7\u01c9\u0005@!\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002',
  '\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002',
  '\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb?\u0003\u0002\u0002\u0002',
  '\u01cc\u01cd\u0007L\u0002\u0002\u01cd\u01ce\u0005r:\u0002\u01ce\u01d0',
  '\u0007\u0011\u0002\u0002\u01cf\u01d1\u0005\n\u0006\u0002\u01d0\u01cf',
  '\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1A',
  '\u0003\u0002\u0002\u0002\u01d2\u01d3\u0007\\\u0002\u0002\u01d3\u01d5',
  '\u0007\u0011\u0002\u0002\u01d4\u01d6\u0005\n\u0006\u0002\u01d5\u01d4',
  '\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6C',
  '\u0003\u0002\u0002\u0002\u01d7\u01d8\u0005\u00a4S\u0002\u01d8\u01d9',
  '\u0007\u0011\u0002\u0002\u01d9\u01da\u0005\u0006\u0004\u0002\u01daE',
  '\u0003\u0002\u0002\u0002\u01db\u01dc\u0007^\u0002\u0002\u01dc\u01dd',
  '\u0006$\b\u0002\u01dd\u01de\u0005r:\u0002\u01de\u01df\u0005\u00acW\u0002',
  '\u01dfG\u0003\u0002\u0002\u0002\u01e0\u01e1\u0007a\u0002\u0002\u01e1',
  '\u01e7\u0005\b\u0005\u0002\u01e2\u01e4\u0005J&\u0002\u01e3\u01e5\u0005',
  "L'\u0002\u01e4\u01e3\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002",
  '\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6\u01e8\u0005L',
  "'\u0002\u01e7\u01e2\u0003\u0002\u0002\u0002\u01e7\u01e6\u0003\u0002",
  '\u0002\u0002\u01e8I\u0003\u0002\u0002\u0002\u01e9\u01ef\u0007P\u0002',
  '\u0002\u01ea\u01ec\u0007\t\u0002\u0002\u01eb\u01ed\u0005\u008aF\u0002',
  '\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002',
  '\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01f0\u0007\n\u0002\u0002',
  '\u01ef\u01ea\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002',
  '\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f2\u0005\b\u0005\u0002',
  '\u01f2K\u0003\u0002\u0002\u0002\u01f3\u01f4\u0007Q\u0002\u0002\u01f4',
  '\u01f5\u0005\b\u0005\u0002\u01f5M\u0003\u0002\u0002\u0002\u01f6\u01f7',
  '\u0007X\u0002\u0002\u01f7\u01f8\u0005\u00acW\u0002\u01f8O\u0003\u0002',
  '\u0002\u0002\u01f9\u01fb\u0007k\u0002\u0002\u01fa\u01f9\u0003\u0002',
  '\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002',
  '\u0002\u0002\u01fc\u01fe\u0007Y\u0002\u0002\u01fd\u01ff\u0007\u001a',
  '\u0002\u0002\u01fe\u01fd\u0003\u0002\u0002\u0002\u01fe\u01ff\u0003\u0002',
  '\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0201\u0005\u00a4',
  'S\u0002\u0201\u0203\u0007\t\u0002\u0002\u0202\u0204\u0005Z.\u0002\u0203',
  '\u0202\u0003\u0002\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002\u0204',
  '\u0205\u0003\u0002\u0002\u0002\u0205\u0206\u0007\n\u0002\u0002\u0206',
  '\u0207\u0007\u000b\u0002\u0002\u0207\u0208\u0005`1\u0002\u0208\u0209',
  '\u0007\f\u0002\u0002\u0209Q\u0003\u0002\u0002\u0002\u020a\u020b\u0007',
  'd\u0002\u0002\u020b\u020c\u0005\u00a4S\u0002\u020c\u020d\u0005T+\u0002',
  '\u020dS\u0003\u0002\u0002\u0002\u020e\u020f\u0007f\u0002\u0002\u020f',
  '\u0211\u0005t;\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0210\u0211',
  '\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0216',
  '\u0007\u000b\u0002\u0002\u0213\u0215\u0005V,\u0002\u0214\u0213\u0003',
  '\u0002\u0002\u0002\u0215\u0218\u0003\u0002\u0002\u0002\u0216\u0214\u0003',
  '\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u0219\u0003',
  '\u0002\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0219\u021a\u0007',
  '\f\u0002\u0002\u021aU\u0003\u0002\u0002\u0002\u021b\u0220\u0007u\u0002',
  '\u0002\u021c\u021d\u0006,\t\u0002\u021d\u0220\u0005\u00a4S\u0002\u021e',
  '\u0220\u0007k\u0002\u0002\u021f\u021b\u0003\u0002\u0002\u0002\u021f',
  '\u021c\u0003\u0002\u0002\u0002\u021f\u021e\u0003\u0002\u0002\u0002\u0220',
  '\u0223\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0221',
  '\u0222\u0003\u0002\u0002\u0002\u0222\u022a\u0003\u0002\u0002\u0002\u0223',
  '\u0221\u0003\u0002\u0002\u0002\u0224\u022b\u0005X-\u0002\u0225\u0226',
  '\u0005\u008aF\u0002\u0226\u0227\u0007\u000f\u0002\u0002\u0227\u0228',
  '\u0005\u008cG\u0002\u0228\u0229\u0007\r\u0002\u0002\u0229\u022b\u0003',
  '\u0002\u0002\u0002\u022a\u0224\u0003\u0002\u0002\u0002\u022a\u0225\u0003',
  '\u0002\u0002\u0002\u022b\u0235\u0003\u0002\u0002\u0002\u022c\u0235\u0005',
  '&\u0014\u0002\u022d\u022f\u0007\u001f\u0002\u0002\u022e\u022d\u0003',
  '\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0230\u0003',
  '\u0002\u0002\u0002\u0230\u0231\u0005l7\u0002\u0231\u0232\u0007\u000f',
  '\u0002\u0002\u0232\u0233\u0005t;\u0002\u0233\u0235\u0003\u0002\u0002',
  '\u0002\u0234\u0221\u0003\u0002\u0002\u0002\u0234\u022c\u0003\u0002\u0002',
  '\u0002\u0234\u022e\u0003\u0002\u0002\u0002\u0235W\u0003\u0002\u0002',
  '\u0002\u0236\u0238\u0007\u001a\u0002\u0002\u0237\u0236\u0003\u0002\u0002',
  '\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u023a\u0003\u0002\u0002',
  '\u0002\u0239\u023b\u0007\u001f\u0002\u0002\u023a\u0239\u0003\u0002\u0002',
  '\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002',
  '\u0002\u023c\u023d\u0005l7\u0002\u023d\u023f\u0007\t\u0002\u0002\u023e',
  '\u0240\u0005Z.\u0002\u023f\u023e\u0003\u0002\u0002\u0002\u023f\u0240',
  '\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0242',
  '\u0007\n\u0002\u0002\u0242\u0243\u0007\u000b\u0002\u0002\u0243\u0244',
  '\u0005`1\u0002\u0244\u0245\u0007\f\u0002\u0002\u0245\u0264\u0003\u0002',
  '\u0002\u0002\u0246\u0248\u0007\u001a\u0002\u0002\u0247\u0246\u0003\u0002',
  '\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u024a\u0003\u0002',
  '\u0002\u0002\u0249\u024b\u0007\u001f\u0002\u0002\u024a\u0249\u0003\u0002',
  '\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002',
  '\u0002\u0002\u024c\u024d\u0005\u009eP\u0002\u024d\u024e\u0007\t\u0002',
  '\u0002\u024e\u024f\u0007\n\u0002\u0002\u024f\u0250\u0007\u000b\u0002',
  '\u0002\u0250\u0251\u0005`1\u0002\u0251\u0252\u0007\f\u0002\u0002\u0252',
  '\u0264\u0003\u0002\u0002\u0002\u0253\u0255\u0007\u001a\u0002\u0002\u0254',
  '\u0253\u0003\u0002\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002\u0255',
  '\u0257\u0003\u0002\u0002\u0002\u0256\u0258\u0007\u001f\u0002\u0002\u0257',
  '\u0256\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258',
  '\u0259\u0003\u0002\u0002\u0002\u0259\u025a\u0005\u00a0Q\u0002\u025a',
  '\u025c\u0007\t\u0002\u0002\u025b\u025d\u0005Z.\u0002\u025c\u025b\u0003',
  '\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u025e\u0003',
  '\u0002\u0002\u0002\u025e\u025f\u0007\n\u0002\u0002\u025f\u0260\u0007',
  '\u000b\u0002\u0002\u0260\u0261\u0005`1\u0002\u0261\u0262\u0007\f\u0002',
  '\u0002\u0262\u0264\u0003\u0002\u0002\u0002\u0263\u0237\u0003\u0002\u0002',
  '\u0002\u0263\u0247\u0003\u0002\u0002\u0002\u0263\u0254\u0003\u0002\u0002',
  '\u0002\u0264Y\u0003\u0002\u0002\u0002\u0265\u026a\u0005\\/\u0002\u0266',
  '\u0267\u0007\u000e\u0002\u0002\u0267\u0269\u0005\\/\u0002\u0268\u0266',
  '\u0003\u0002\u0002\u0002\u0269\u026c\u0003\u0002\u0002\u0002\u026a\u0268',
  '\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b\u026f',
  '\u0003\u0002\u0002\u0002\u026c\u026a\u0003\u0002\u0002\u0002\u026d\u026e',
  '\u0007\u000e\u0002\u0002\u026e\u0270\u0005^0\u0002\u026f\u026d\u0003',
  '\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0273\u0003',
  '\u0002\u0002\u0002\u0271\u0273\u0005^0\u0002\u0272\u0265\u0003\u0002',
  '\u0002\u0002\u0272\u0271\u0003\u0002\u0002\u0002\u0273[\u0003\u0002',
  '\u0002\u0002\u0274\u0277\u0005\u008aF\u0002\u0275\u0276\u0007\u000f',
  '\u0002\u0002\u0276\u0278\u0005t;\u0002\u0277\u0275\u0003\u0002\u0002',
  '\u0002\u0277\u0278\u0003\u0002\u0002\u0002\u0278]\u0003\u0002\u0002',
  '\u0002\u0279\u027a\u0007\u0012\u0002\u0002\u027a\u027b\u0005t;\u0002',
  '\u027b_\u0003\u0002\u0002\u0002\u027c\u027e\u0005b2\u0002\u027d\u027c',
  '\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027ea',
  '\u0003\u0002\u0002\u0002\u027f\u0281\u0005\u0004\u0003\u0002\u0280\u027f',
  '\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002\u0282\u0280',
  '\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283c',
  '\u0003\u0002\u0002\u0002\u0284\u0285\u0007\u0007\u0002\u0002\u0285\u0286',
  '\u0005f4\u0002\u0286\u0287\u0007\b\u0002\u0002\u0287e\u0003\u0002\u0002',
  '\u0002\u0288\u028a\u0007\u000e\u0002\u0002\u0289\u0288\u0003\u0002\u0002',
  '\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002',
  '\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u028f\u0003\u0002\u0002',
  '\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0290\u0005h5\u0002',
  '\u028f\u028e\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002',
  '\u0290\u0299\u0003\u0002\u0002\u0002\u0291\u0293\u0007\u000e\u0002\u0002',
  '\u0292\u0291\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002',
  '\u0294\u0292\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002',
  '\u0295\u0296\u0003\u0002\u0002\u0002\u0296\u0298\u0005h5\u0002\u0297',
  '\u0292\u0003\u0002\u0002\u0002\u0298\u029b\u0003\u0002\u0002\u0002\u0299',
  '\u0297\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029a',
  '\u029f\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029c',
  '\u029e\u0007\u000e\u0002\u0002\u029d\u029c\u0003\u0002\u0002\u0002\u029e',
  '\u02a1\u0003\u0002\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u029f',
  '\u02a0\u0003\u0002\u0002\u0002\u02a0g\u0003\u0002\u0002\u0002\u02a1',
  '\u029f\u0003\u0002\u0002\u0002\u02a2\u02a4\u0007\u0012\u0002\u0002\u02a3',
  '\u02a2\u0003\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4',
  '\u02a5\u0003\u0002\u0002\u0002\u02a5\u02a6\u0005t;\u0002\u02a6i\u0003',
  '\u0002\u0002\u0002\u02a7\u02a8\u0005l7\u0002\u02a8\u02a9\u0007\u0011',
  '\u0002\u0002\u02a9\u02aa\u0005t;\u0002\u02aa\u02d5\u0003\u0002\u0002',
  '\u0002\u02ab\u02ac\u0007\u0007\u0002\u0002\u02ac\u02ad\u0005t;\u0002',
  '\u02ad\u02ae\u0007\b\u0002\u0002\u02ae\u02af\u0007\u0011\u0002\u0002',
  '\u02af\u02b0\u0005t;\u0002\u02b0\u02d5\u0003\u0002\u0002\u0002\u02b1',
  '\u02b3\u0007k\u0002\u0002\u02b2\u02b1\u0003\u0002\u0002\u0002\u02b2',
  '\u02b3\u0003\u0002\u0002\u0002\u02b3\u02b5\u0003\u0002\u0002\u0002\u02b4',
  '\u02b6\u0007\u001a\u0002\u0002\u02b5\u02b4\u0003\u0002\u0002\u0002\u02b5',
  '\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7',
  '\u02b8\u0005l7\u0002\u02b8\u02ba\u0007\t\u0002\u0002\u02b9\u02bb\u0005',
  'Z.\u0002\u02ba\u02b9\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002',
  '\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02bd\u0007\n',
  '\u0002\u0002\u02bd\u02be\u0007\u000b\u0002\u0002\u02be\u02bf\u0005`',
  '1\u0002\u02bf\u02c0\u0007\f\u0002\u0002\u02c0\u02d5\u0003\u0002\u0002',
  '\u0002\u02c1\u02c2\u0005\u009eP\u0002\u02c2\u02c3\u0007\t\u0002\u0002',
  '\u02c3\u02c4\u0007\n\u0002\u0002\u02c4\u02c5\u0007\u000b\u0002\u0002',
  '\u02c5\u02c6\u0005`1\u0002\u02c6\u02c7\u0007\f\u0002\u0002\u02c7\u02d5',
  '\u0003\u0002\u0002\u0002\u02c8\u02c9\u0005\u00a0Q\u0002\u02c9\u02ca',
  '\u0007\t\u0002\u0002\u02ca\u02cb\u0005\\/\u0002\u02cb\u02cc\u0007\n',
  '\u0002\u0002\u02cc\u02cd\u0007\u000b\u0002\u0002\u02cd\u02ce\u0005`',
  '1\u0002\u02ce\u02cf\u0007\f\u0002\u0002\u02cf\u02d5\u0003\u0002\u0002',
  '\u0002\u02d0\u02d2\u0007\u0012\u0002\u0002\u02d1\u02d0\u0003\u0002\u0002',
  '\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002',
  '\u0002\u02d3\u02d5\u0005t;\u0002\u02d4\u02a7\u0003\u0002\u0002\u0002',
  '\u02d4\u02ab\u0003\u0002\u0002\u0002\u02d4\u02b2\u0003\u0002\u0002\u0002',
  '\u02d4\u02c1\u0003\u0002\u0002\u0002\u02d4\u02c8\u0003\u0002\u0002\u0002',
  '\u02d4\u02d1\u0003\u0002\u0002\u0002\u02d5k\u0003\u0002\u0002\u0002',
  '\u02d6\u02de\u0005\u00a2R\u0002\u02d7\u02de\u0007x\u0002\u0002\u02d8',
  '\u02de\u0005\u009aN\u0002\u02d9\u02da\u0007\u0007\u0002\u0002\u02da',
  '\u02db\u0005t;\u0002\u02db\u02dc\u0007\b\u0002\u0002\u02dc\u02de\u0003',
  '\u0002\u0002\u0002\u02dd\u02d6\u0003\u0002\u0002\u0002\u02dd\u02d7\u0003',
  '\u0002\u0002\u0002\u02dd\u02d8\u0003\u0002\u0002\u0002\u02dd\u02d9\u0003',
  '\u0002\u0002\u0002\u02dem\u0003\u0002\u0002\u0002\u02df\u02eb\u0007',
  '\t\u0002\u0002\u02e0\u02e5\u0005p9\u0002\u02e1\u02e2\u0007\u000e\u0002',
  '\u0002\u02e2\u02e4\u0005p9\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002',
  '\u02e4\u02e7\u0003\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002',
  '\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e9\u0003\u0002\u0002\u0002',
  '\u02e7\u02e5\u0003\u0002\u0002\u0002\u02e8\u02ea\u0007\u000e\u0002\u0002',
  '\u02e9\u02e8\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002\u0002',
  '\u02ea\u02ec\u0003\u0002\u0002\u0002\u02eb\u02e0\u0003\u0002\u0002\u0002',
  '\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002',
  '\u02ed\u02ee\u0007\n\u0002\u0002\u02eeo\u0003\u0002\u0002\u0002\u02ef',
  '\u02f1\u0007\u0012\u0002\u0002\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f0',
  '\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f4\u0003\u0002\u0002\u0002\u02f2',
  '\u02f5\u0005t;\u0002\u02f3\u02f5\u0005\u00a4S\u0002\u02f4\u02f2\u0003',
  '\u0002\u0002\u0002\u02f4\u02f3\u0003\u0002\u0002\u0002\u02f5q\u0003',
  '\u0002\u0002\u0002\u02f6\u02fb\u0005t;\u0002\u02f7\u02f8\u0007\u000e',
  '\u0002\u0002\u02f8\u02fa\u0005t;\u0002\u02f9\u02f7\u0003\u0002\u0002',
  '\u0002\u02fa\u02fd\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003\u0002\u0002',
  '\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fcs\u0003\u0002\u0002',
  '\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fe\u02ff\b;\u0001\u0002',
  '\u02ff\u0333\u0005\u0090I\u0002\u0300\u0302\u0007d\u0002\u0002\u0301',
  '\u0303\u0005\u00a4S\u0002\u0302\u0301\u0003\u0002\u0002\u0002\u0302',
  '\u0303\u0003\u0002\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304',
  '\u0333\u0005T+\u0002\u0305\u0306\u0007N\u0002\u0002\u0306\u0308\u0005',
  't;\u0002\u0307\u0309\u0005n8\u0002\u0308\u0307\u0003\u0002\u0002\u0002',
  '\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u0333\u0003\u0002\u0002\u0002',
  '\u030a\u030b\u0007N\u0002\u0002\u030b\u030c\u0007\u0013\u0002\u0002',
  '\u030c\u0333\u0005\u00a4S\u0002\u030d\u030e\u0007_\u0002\u0002\u030e',
  "\u0333\u0005t;(\u030f\u0310\u0007S\u0002\u0002\u0310\u0333\u0005t;'",
  '\u0311\u0312\u0007K\u0002\u0002\u0312\u0333\u0005t;&\u0313\u0314\u0007',
  '\u0014\u0002\u0002\u0314\u0333\u0005t;%\u0315\u0316\u0007\u0015\u0002',
  '\u0002\u0316\u0333\u0005t;$\u0317\u0318\u0007\u0016\u0002\u0002\u0318',
  '\u0333\u0005t;#\u0319\u031a\u0007\u0017\u0002\u0002\u031a\u0333\u0005',
  't;"\u031b\u031c\u0007\u0018\u0002\u0002\u031c\u0333\u0005t;!\u031d',
  '\u031e\u0007\u0019\u0002\u0002\u031e\u0333\u0005t; \u031f\u0320\u0007',
  'l\u0002\u0002\u0320\u0333\u0005t;\u001f\u0321\u0322\u0007j\u0002\u0002',
  '\u0322\u0323\u0007\t\u0002\u0002\u0323\u0324\u0005t;\u0002\u0324\u0325',
  '\u0007\n\u0002\u0002\u0325\u0333\u0003\u0002\u0002\u0002\u0326\u0333',
  '\u00056\u001c\u0002\u0327\u0333\u0007Z\u0002\u0002\u0328\u0333\u0005',
  '\u00a4S\u0002\u0329\u0333\u0007g\u0002\u0002\u032a\u0333\u0005\u0098',
  'M\u0002\u032b\u0333\u0005d3\u0002\u032c\u0333\u0005\u008cG\u0002\u032d',
  '\u0333\u0005v<\u0002\u032e\u032f\u0007\t\u0002\u0002\u032f\u0330\u0005',
  'r:\u0002\u0330\u0331\u0007\n\u0002\u0002\u0331\u0333\u0003\u0002\u0002',
  '\u0002\u0332\u02fe\u0003\u0002\u0002\u0002\u0332\u0300\u0003\u0002\u0002',
  '\u0002\u0332\u0305\u0003\u0002\u0002\u0002\u0332\u030a\u0003\u0002\u0002',
  '\u0002\u0332\u030d\u0003\u0002\u0002\u0002\u0332\u030f\u0003\u0002\u0002',
  '\u0002\u0332\u0311\u0003\u0002\u0002\u0002\u0332\u0313\u0003\u0002\u0002',
  '\u0002\u0332\u0315\u0003\u0002\u0002\u0002\u0332\u0317\u0003\u0002\u0002',
  '\u0002\u0332\u0319\u0003\u0002\u0002\u0002\u0332\u031b\u0003\u0002\u0002',
  '\u0002\u0332\u031d\u0003\u0002\u0002\u0002\u0332\u031f\u0003\u0002\u0002',
  '\u0002\u0332\u0321\u0003\u0002\u0002\u0002\u0332\u0326\u0003\u0002\u0002',
  '\u0002\u0332\u0327\u0003\u0002\u0002\u0002\u0332\u0328\u0003\u0002\u0002',
  '\u0002\u0332\u0329\u0003\u0002\u0002\u0002\u0332\u032a\u0003\u0002\u0002',
  '\u0002\u0332\u032b\u0003\u0002\u0002\u0002\u0332\u032c\u0003\u0002\u0002',
  '\u0002\u0332\u032d\u0003\u0002\u0002\u0002\u0332\u032e\u0003\u0002\u0002',
  '\u0002\u0333\u0385\u0003\u0002\u0002\u0002\u0334\u0335\f\u001e\u0002',
  '\u0002\u0335\u0336\u0007\u001d\u0002\u0002\u0336\u0384\u0005t;\u001e',
  '\u0337\u0338\f\u001d\u0002\u0002\u0338\u0339\t\u0002\u0002\u0002\u0339',
  '\u0384\u0005t;\u001e\u033a\u033b\f\u001c\u0002\u0002\u033b\u033c\t\u0003',
  '\u0002\u0002\u033c\u0384\u0005t;\u001d\u033d\u033e\f\u001b\u0002\u0002',
  '\u033e\u033f\u0007\u001e\u0002\u0002\u033f\u0384\u0005t;\u001c\u0340',
  '\u0341\f\u001a\u0002\u0002\u0341\u0342\t\u0004\u0002\u0002\u0342\u0384',
  '\u0005t;\u001b\u0343\u0344\f\u0019\u0002\u0002\u0344\u0345\t\u0005\u0002',
  '\u0002\u0345\u0384\u0005t;\u001a\u0346\u0347\f\u0018\u0002\u0002\u0347',
  '\u0348\u0007J\u0002\u0002\u0348\u0384\u0005t;\u0019\u0349\u034a\f\u0017',
  '\u0002\u0002\u034a\u034b\u0007`\u0002\u0002\u034b\u0384\u0005t;\u0018',
  '\u034c\u034d\f\u0016\u0002\u0002\u034d\u034e\t\u0006\u0002\u0002\u034e',
  '\u0384\u0005t;\u0017\u034f\u0350\f\u0015\u0002\u0002\u0350\u0351\u0007',
  '+\u0002\u0002\u0351\u0384\u0005t;\u0016\u0352\u0353\f\u0014\u0002\u0002',
  '\u0353\u0354\u0007,\u0002\u0002\u0354\u0384\u0005t;\u0015\u0355\u0356',
  '\f\u0013\u0002\u0002\u0356\u0357\u0007-\u0002\u0002\u0357\u0384\u0005',
  't;\u0014\u0358\u0359\f\u0012\u0002\u0002\u0359\u035a\u0007.\u0002\u0002',
  '\u035a\u0384\u0005t;\u0013\u035b\u035c\f\u0011\u0002\u0002\u035c\u035d',
  '\u0007/\u0002\u0002\u035d\u0384\u0005t;\u0012\u035e\u035f\f\u0010\u0002',
  '\u0002\u035f\u0360\u0007\u0010\u0002\u0002\u0360\u0361\u0005t;\u0002',
  '\u0361\u0362\u0007\u0011\u0002\u0002\u0362\u0363\u0005t;\u0011\u0363',
  '\u0384\u0003\u0002\u0002\u0002\u0364\u0365\f\u000f\u0002\u0002\u0365',
  '\u0366\u0007\u000f\u0002\u0002\u0366\u0384\u0005t;\u000f\u0367\u0368',
  '\f\u000e\u0002\u0002\u0368\u0369\u0005\u0096L\u0002\u0369\u036a\u0005',
  't;\u000e\u036a\u0384\u0003\u0002\u0002\u0002\u036b\u036c\f/\u0002\u0002',
  '\u036c\u036d\u0007\u0007\u0002\u0002\u036d\u036e\u0005r:\u0002\u036e',
  '\u036f\u0007\b\u0002\u0002\u036f\u0384\u0003\u0002\u0002\u0002\u0370',
  '\u0372\f.\u0002\u0002\u0371\u0373\u0007\u0010\u0002\u0002\u0372\u0371',
  '\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373\u0374',
  '\u0003\u0002\u0002\u0002\u0374\u0376\u0007\u0013\u0002\u0002\u0375\u0377',
  '\u0007\u001f\u0002\u0002\u0376\u0375\u0003\u0002\u0002\u0002\u0376\u0377',
  '\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002\u0378\u0384',
  '\u0005\u00a2R\u0002\u0379\u037a\f-\u0002\u0002\u037a\u0384\u0005n8\u0002',
  '\u037b\u037c\f*\u0002\u0002\u037c\u037d\u0006;\u001f\u0002\u037d\u0384',
  '\u0007\u0014\u0002\u0002\u037e\u037f\f)\u0002\u0002\u037f\u0380\u0006',
  ';!\u0002\u0380\u0384\u0007\u0015\u0002\u0002\u0381\u0382\f\f\u0002\u0002',
  '\u0382\u0384\u0007y\u0002\u0002\u0383\u0334\u0003\u0002\u0002\u0002',
  '\u0383\u0337\u0003\u0002\u0002\u0002\u0383\u033a\u0003\u0002\u0002\u0002',
  '\u0383\u033d\u0003\u0002\u0002\u0002\u0383\u0340\u0003\u0002\u0002\u0002',
  '\u0383\u0343\u0003\u0002\u0002\u0002\u0383\u0346\u0003\u0002\u0002\u0002',
  '\u0383\u0349\u0003\u0002\u0002\u0002\u0383\u034c\u0003\u0002\u0002\u0002',
  '\u0383\u034f\u0003\u0002\u0002\u0002\u0383\u0352\u0003\u0002\u0002\u0002',
  '\u0383\u0355\u0003\u0002\u0002\u0002\u0383\u0358\u0003\u0002\u0002\u0002',
  '\u0383\u035b\u0003\u0002\u0002\u0002\u0383\u035e\u0003\u0002\u0002\u0002',
  '\u0383\u0364\u0003\u0002\u0002\u0002\u0383\u0367\u0003\u0002\u0002\u0002',
  '\u0383\u036b\u0003\u0002\u0002\u0002\u0383\u0370\u0003\u0002\u0002\u0002',
  '\u0383\u0379\u0003\u0002\u0002\u0002\u0383\u037b\u0003\u0002\u0002\u0002',
  '\u0383\u037e\u0003\u0002\u0002\u0002\u0383\u0381\u0003\u0002\u0002\u0002',
  '\u0384\u0387\u0003\u0002\u0002\u0002\u0385\u0383\u0003\u0002\u0002\u0002',
  '\u0385\u0386\u0003\u0002\u0002\u0002\u0386u\u0003\u0002\u0002\u0002',
  '\u0387\u0385\u0003\u0002\u0002\u0002\u0388\u038a\u0005x=\u0002\u0389',
  '\u0388\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002\u0002\u0002\u038b',
  '\u0389\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c',
  'w\u0003\u0002\u0002\u0002\u038d\u038e\u0007#\u0002\u0002\u038e\u0392',
  '\u0005|?\u0002\u038f\u0391\u0005\u0082B\u0002\u0390\u038f\u0003\u0002',
  '\u0002\u0002\u0391\u0394\u0003\u0002\u0002\u0002\u0392\u0390\u0003\u0002',
  '\u0002\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0395\u0003\u0002',
  '\u0002\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0395\u0396\u0007$',
  '\u0002\u0002\u0396\u0397\u0005z>\u0002\u0397\u0398\u0007#\u0002\u0002',
  '\u0398\u0399\u0007\u001b\u0002\u0002\u0399\u039a\u0005~@\u0002\u039a',
  '\u039b\u0007$\u0002\u0002\u039b\u03be\u0003\u0002\u0002\u0002\u039c',
  '\u039d\u0007#\u0002\u0002\u039d\u03a1\u0005\u0080A\u0002\u039e\u03a0',
  '\u0005\u0082B\u0002\u039f\u039e\u0003\u0002\u0002\u0002\u03a0\u03a3',
  '\u0003\u0002\u0002\u0002\u03a1\u039f\u0003\u0002\u0002\u0002\u03a1\u03a2',
  '\u0003\u0002\u0002\u0002\u03a2\u03a4\u0003\u0002\u0002\u0002\u03a3\u03a1',
  '\u0003\u0002\u0002\u0002\u03a4\u03a5\u0005z>\u0002\u03a5\u03a6\u0007',
  '\u001b\u0002\u0002\u03a6\u03a7\u0007$\u0002\u0002\u03a7\u03be\u0003',
  '\u0002\u0002\u0002\u03a8\u03a9\u0007#\u0002\u0002\u03a9\u03ad\u0005',
  '\u0080A\u0002\u03aa\u03ac\u0005\u0082B\u0002\u03ab\u03aa\u0003\u0002',
  '\u0002\u0002\u03ac\u03af\u0003\u0002\u0002\u0002\u03ad\u03ab\u0003\u0002',
  '\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b0\u0003\u0002',
  '\u0002\u0002\u03af\u03ad\u0003\u0002\u0002\u0002\u03b0\u03b1\u0007\u001b',
  '\u0002\u0002\u03b1\u03b2\u0007$\u0002\u0002\u03b2\u03be\u0003\u0002',
  '\u0002\u0002\u03b3\u03b4\u0007#\u0002\u0002\u03b4\u03b8\u0005\u0080',
  'A\u0002\u03b5\u03b7\u0005\u0082B\u0002\u03b6\u03b5\u0003\u0002\u0002',
  '\u0002\u03b7\u03ba\u0003\u0002\u0002\u0002\u03b8\u03b6\u0003\u0002\u0002',
  '\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03bb\u0003\u0002\u0002',
  '\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03bb\u03bc\u0007$\u0002',
  '\u0002\u03bc\u03be\u0003\u0002\u0002\u0002\u03bd\u038d\u0003\u0002\u0002',
  '\u0002\u03bd\u039c\u0003\u0002\u0002\u0002\u03bd\u03a8\u0003\u0002\u0002',
  '\u0002\u03bd\u03b3\u0003\u0002\u0002\u0002\u03bey\u0003\u0002\u0002',
  '\u0002\u03bf\u03c1\u0005\u0086D\u0002\u03c0\u03bf\u0003\u0002\u0002',
  '\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1\u03cb\u0003\u0002\u0002',
  '\u0002\u03c2\u03c5\u0005x=\u0002\u03c3\u03c5\u0005\u008eH\u0002\u03c4',
  '\u03c2\u0003\u0002\u0002\u0002\u03c4\u03c3\u0003\u0002\u0002\u0002\u03c5',
  '\u03c7\u0003\u0002\u0002\u0002\u03c6\u03c8\u0005\u0086D\u0002\u03c7',
  '\u03c6\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8',
  '\u03ca\u0003\u0002\u0002\u0002\u03c9\u03c4\u0003\u0002\u0002\u0002\u03ca',
  '\u03cd\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002\u03cb',
  '\u03cc\u0003\u0002\u0002\u0002\u03cc{\u0003\u0002\u0002\u0002\u03cd',
  '\u03cb\u0003\u0002\u0002\u0002\u03ce\u03cf\u0005\u0080A\u0002\u03cf',
  '\u03d0\b?\u0001\u0002\u03d0}\u0003\u0002\u0002\u0002\u03d1\u03d2\u0005',
  '\u0080A\u0002\u03d2\u03d3\u0006@#\u0003\u03d3\u007f\u0003\u0002\u0002',
  '\u0002\u03d4\u03d8\u0007\u0084\u0002\u0002\u03d5\u03d8\u0005\u00a8U',
  '\u0002\u03d6\u03d8\u0007w\u0002\u0002\u03d7\u03d4\u0003\u0002\u0002',
  '\u0002\u03d7\u03d5\u0003\u0002\u0002\u0002\u03d7\u03d6\u0003\u0002\u0002',
  '\u0002\u03d8\u0081\u0003\u0002\u0002\u0002\u03d9\u03da\u0005\u0084C',
  '\u0002\u03da\u03db\u0007\u000f\u0002\u0002\u03db\u03dc\u0005\u0088E',
  '\u0002\u03dc\u03df\u0003\u0002\u0002\u0002\u03dd\u03df\u0005\u0084C',
  '\u0002\u03de\u03d9\u0003\u0002\u0002\u0002\u03de\u03dd\u0003\u0002\u0002',
  '\u0002\u03df\u0083\u0003\u0002\u0002\u0002\u03e0\u03e1\t\u0007\u0002',
  '\u0002\u03e1\u0085\u0003\u0002\u0002\u0002\u03e2\u03e4\n\b\u0002\u0002',
  '\u03e3\u03e2\u0003\u0002\u0002\u0002\u03e4\u03e5\u0003\u0002\u0002\u0002',
  '\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002',
  '\u03e6\u0087\u0003\u0002\u0002\u0002\u03e7\u03eb\u0007\u0085\u0002\u0002',
  '\u03e8\u03eb\u0007x\u0002\u0002\u03e9\u03eb\u0005\u008eH\u0002\u03ea',
  '\u03e7\u0003\u0002\u0002\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002\u03ea',
  '\u03e9\u0003\u0002\u0002\u0002\u03eb\u0089\u0003\u0002\u0002\u0002\u03ec',
  '\u03f0\u0005\u00a4S\u0002\u03ed\u03f0\u0005d3\u0002\u03ee\u03f0\u0005',
  '\u008cG\u0002\u03ef\u03ec\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003',
  '\u0002\u0002\u0002\u03ef\u03ee\u0003\u0002\u0002\u0002\u03f0\u008b\u0003',
  '\u0002\u0002\u0002\u03f1\u03fa\u0007\u000b\u0002\u0002\u03f2\u03f7\u0005',
  'j6\u0002\u03f3\u03f4\u0007\u000e\u0002\u0002\u03f4\u03f6\u0005j6\u0002',
  '\u03f5\u03f3\u0003\u0002\u0002\u0002\u03f6\u03f9\u0003\u0002\u0002\u0002',
  '\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002',
  '\u03f8\u03fb\u0003\u0002\u0002\u0002\u03f9\u03f7\u0003\u0002\u0002\u0002',
  '\u03fa\u03f2\u0003\u0002\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002',
  '\u03fb\u03fd\u0003\u0002\u0002\u0002\u03fc\u03fe\u0007\u000e\u0002\u0002',
  '\u03fd\u03fc\u0003\u0002\u0002\u0002\u03fd\u03fe\u0003\u0002\u0002\u0002',
  '\u03fe\u03ff\u0003\u0002\u0002\u0002\u03ff\u0400\u0007\f\u0002\u0002',
  '\u0400\u008d\u0003\u0002\u0002\u0002\u0401\u0402\u0007\u000b\u0002\u0002',
  '\u0402\u0403\u0005r:\u0002\u0403\u0404\u0007\f\u0002\u0002\u0404\u008f',
  '\u0003\u0002\u0002\u0002\u0405\u041e\u0005P)\u0002\u0406\u0408\u0007',
  'k\u0002\u0002\u0407\u0406\u0003\u0002\u0002\u0002\u0407\u0408\u0003',
  '\u0002\u0002\u0002\u0408\u0409\u0003\u0002\u0002\u0002\u0409\u040b\u0007',
  'Y\u0002\u0002\u040a\u040c\u0007\u001a\u0002\u0002\u040b\u040a\u0003',
  '\u0002\u0002\u0002\u040b\u040c\u0003\u0002\u0002\u0002\u040c\u040d\u0003',
  '\u0002\u0002\u0002\u040d\u040f\u0007\t\u0002\u0002\u040e\u0410\u0005',
  'Z.\u0002\u040f\u040e\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002',
  '\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u0412\u0007\n',
  '\u0002\u0002\u0412\u0413\u0007\u000b\u0002\u0002\u0413\u0414\u0005`',
  '1\u0002\u0414\u0415\u0007\f\u0002\u0002\u0415\u041e\u0003\u0002\u0002',
  '\u0002\u0416\u0418\u0007k\u0002\u0002\u0417\u0416\u0003\u0002\u0002',
  '\u0002\u0417\u0418\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002\u0002',
  '\u0002\u0419\u041a\u0005\u0092J\u0002\u041a\u041b\u0007<\u0002\u0002',
  '\u041b\u041c\u0005\u0094K\u0002\u041c\u041e\u0003\u0002\u0002\u0002',
  '\u041d\u0405\u0003\u0002\u0002\u0002\u041d\u0407\u0003\u0002\u0002\u0002',
  '\u041d\u0417\u0003\u0002\u0002\u0002\u041e\u0091\u0003\u0002\u0002\u0002',
  '\u041f\u0426\u0005\u00a4S\u0002\u0420\u0422\u0007\t\u0002\u0002\u0421',
  '\u0423\u0005Z.\u0002\u0422\u0421\u0003\u0002\u0002\u0002\u0422\u0423',
  '\u0003\u0002\u0002\u0002\u0423\u0424\u0003\u0002\u0002\u0002\u0424\u0426',
  '\u0007\n\u0002\u0002\u0425\u041f\u0003\u0002\u0002\u0002\u0425\u0420',
  '\u0003\u0002\u0002\u0002\u0426\u0093\u0003\u0002\u0002\u0002\u0427\u042d',
  '\u0005t;\u0002\u0428\u0429\u0007\u000b\u0002\u0002\u0429\u042a\u0005',
  '`1\u0002\u042a\u042b\u0007\f\u0002\u0002\u042b\u042d\u0003\u0002\u0002',
  '\u0002\u042c\u0427\u0003\u0002\u0002\u0002\u042c\u0428\u0003\u0002\u0002',
  '\u0002\u042d\u0095\u0003\u0002\u0002\u0002\u042e\u042f\t\t\u0002\u0002',
  '\u042f\u0097\u0003\u0002\u0002\u0002\u0430\u0438\u0007=\u0002\u0002',
  '\u0431\u0438\u0007>\u0002\u0002\u0432\u0438\u0007x\u0002\u0002\u0433',
  '\u0438\u0007y\u0002\u0002\u0434\u0438\u0007\u0006\u0002\u0002\u0435',
  '\u0438\u0005\u009aN\u0002\u0436\u0438\u0005\u009cO\u0002\u0437\u0430',
  '\u0003\u0002\u0002\u0002\u0437\u0431\u0003\u0002\u0002\u0002\u0437\u0432',
  '\u0003\u0002\u0002\u0002\u0437\u0433\u0003\u0002\u0002\u0002\u0437\u0434',
  '\u0003\u0002\u0002\u0002\u0437\u0435\u0003\u0002\u0002\u0002\u0437\u0436',
  '\u0003\u0002\u0002\u0002\u0438\u0099\u0003\u0002\u0002\u0002\u0439\u043a',
  '\t\n\u0002\u0002\u043a\u009b\u0003\u0002\u0002\u0002\u043b\u043c\t\u000b',
  '\u0002\u0002\u043c\u009d\u0003\u0002\u0002\u0002\u043d\u043e\u0005\u00a4',
  'S\u0002\u043e\u043f\u0006P$\u0002\u043f\u0440\u0005l7\u0002\u0440\u009f',
  '\u0003\u0002\u0002\u0002\u0441\u0442\u0005\u00a4S\u0002\u0442\u0443',
  '\u0006Q%\u0002\u0443\u0444\u0005l7\u0002\u0444\u00a1\u0003\u0002\u0002',
  '\u0002\u0445\u0448\u0005\u00a4S\u0002\u0446\u0448\u0005\u00a6T\u0002',
  '\u0447\u0445\u0003\u0002\u0002\u0002\u0447\u0446\u0003\u0002\u0002\u0002',
  '\u0448\u00a3\u0003\u0002\u0002\u0002\u0449\u044a\t\f\u0002\u0002\u044a',
  '\u00a5\u0003\u0002\u0002\u0002\u044b\u044f\u0005\u00a8U\u0002\u044c',
  '\u044f\u0007=\u0002\u0002\u044d\u044f\u0007>\u0002\u0002\u044e\u044b',
  '\u0003\u0002\u0002\u0002\u044e\u044c\u0003\u0002\u0002\u0002\u044e\u044d',
  '\u0003\u0002\u0002\u0002\u044f\u00a7\u0003\u0002\u0002\u0002\u0450\u047f',
  '\u0007H\u0002\u0002\u0451\u047f\u0007I\u0002\u0002\u0452\u047f\u0007',
  'J\u0002\u0002\u0453\u047f\u0007K\u0002\u0002\u0454\u047f\u0007L\u0002',
  '\u0002\u0455\u047f\u0007M\u0002\u0002\u0456\u047f\u0007N\u0002\u0002',
  '\u0457\u047f\u0007O\u0002\u0002\u0458\u047f\u0007P\u0002\u0002\u0459',
  '\u047f\u0007Q\u0002\u0002\u045a\u047f\u0007R\u0002\u0002\u045b\u047f',
  '\u0007S\u0002\u0002\u045c\u047f\u0007T\u0002\u0002\u045d\u047f\u0007',
  'U\u0002\u0002\u045e\u047f\u0007V\u0002\u0002\u045f\u047f\u0007W\u0002',
  '\u0002\u0460\u047f\u0007X\u0002\u0002\u0461\u047f\u0007Y\u0002\u0002',
  '\u0462\u047f\u0007Z\u0002\u0002\u0463\u047f\u0007[\u0002\u0002\u0464',
  '\u047f\u0007\\\u0002\u0002\u0465\u047f\u0007]\u0002\u0002\u0466\u047f',
  '\u0007^\u0002\u0002\u0467\u047f\u0007_\u0002\u0002\u0468\u047f\u0007',
  '`\u0002\u0002\u0469\u047f\u0007a\u0002\u0002\u046a\u047f\u0007d\u0002',
  '\u0002\u046b\u047f\u0007e\u0002\u0002\u046c\u047f\u0007f\u0002\u0002',
  '\u046d\u047f\u0007g\u0002\u0002\u046e\u047f\u0007h\u0002\u0002\u046f',
  '\u047f\u0007i\u0002\u0002\u0470\u047f\u0007j\u0002\u0002\u0471\u047f',
  '\u0007m\u0002\u0002\u0472\u047f\u0005\u00aaV\u0002\u0473\u047f\u0007',
  'p\u0002\u0002\u0474\u047f\u0007q\u0002\u0002\u0475\u047f\u0007r\u0002',
  '\u0002\u0476\u047f\u0007s\u0002\u0002\u0477\u047f\u0007t\u0002\u0002',
  '\u0478\u047f\u0007u\u0002\u0002\u0479\u047f\u0007v\u0002\u0002\u047a',
  '\u047f\u0007k\u0002\u0002\u047b\u047f\u0007l\u0002\u0002\u047c\u047f',
  '\u0007c\u0002\u0002\u047d\u047f\u0007b\u0002\u0002\u047e\u0450\u0003',
  '\u0002\u0002\u0002\u047e\u0451\u0003\u0002\u0002\u0002\u047e\u0452\u0003',
  '\u0002\u0002\u0002\u047e\u0453\u0003\u0002\u0002\u0002\u047e\u0454\u0003',
  '\u0002\u0002\u0002\u047e\u0455\u0003\u0002\u0002\u0002\u047e\u0456\u0003',
  '\u0002\u0002\u0002\u047e\u0457\u0003\u0002\u0002\u0002\u047e\u0458\u0003',
  '\u0002\u0002\u0002\u047e\u0459\u0003\u0002\u0002\u0002\u047e\u045a\u0003',
  '\u0002\u0002\u0002\u047e\u045b\u0003\u0002\u0002\u0002\u047e\u045c\u0003',
  '\u0002\u0002\u0002\u047e\u045d\u0003\u0002\u0002\u0002\u047e\u045e\u0003',
  '\u0002\u0002\u0002\u047e\u045f\u0003\u0002\u0002\u0002\u047e\u0460\u0003',
  '\u0002\u0002\u0002\u047e\u0461\u0003\u0002\u0002\u0002\u047e\u0462\u0003',
  '\u0002\u0002\u0002\u047e\u0463\u0003\u0002\u0002\u0002\u047e\u0464\u0003',
  '\u0002\u0002\u0002\u047e\u0465\u0003\u0002\u0002\u0002\u047e\u0466\u0003',
  '\u0002\u0002\u0002\u047e\u0467\u0003\u0002\u0002\u0002\u047e\u0468\u0003',
  '\u0002\u0002\u0002\u047e\u0469\u0003\u0002\u0002\u0002\u047e\u046a\u0003',
  '\u0002\u0002\u0002\u047e\u046b\u0003\u0002\u0002\u0002\u047e\u046c\u0003',
  '\u0002\u0002\u0002\u047e\u046d\u0003\u0002\u0002\u0002\u047e\u046e\u0003',
  '\u0002\u0002\u0002\u047e\u046f\u0003\u0002\u0002\u0002\u047e\u0470\u0003',
  '\u0002\u0002\u0002\u047e\u0471\u0003\u0002\u0002\u0002\u047e\u0472\u0003',
  '\u0002\u0002\u0002\u047e\u0473\u0003\u0002\u0002\u0002\u047e\u0474\u0003',
  '\u0002\u0002\u0002\u047e\u0475\u0003\u0002\u0002\u0002\u047e\u0476\u0003',
  '\u0002\u0002\u0002\u047e\u0477\u0003\u0002\u0002\u0002\u047e\u0478\u0003',
  '\u0002\u0002\u0002\u047e\u0479\u0003\u0002\u0002\u0002\u047e\u047a\u0003',
  '\u0002\u0002\u0002\u047e\u047b\u0003\u0002\u0002\u0002\u047e\u047c\u0003',
  '\u0002\u0002\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047f\u00a9\u0003',
  '\u0002\u0002\u0002\u0480\u0481\t\r\u0002\u0002\u0481\u00ab\u0003\u0002',
  '\u0002\u0002\u0482\u0487\u0007\r\u0002\u0002\u0483\u0487\u0007\u0002',
  "\u0002\u0003\u0484\u0487\u0006W&\u0002\u0485\u0487\u0006W'\u0002\u0486",
  '\u0482\u0003\u0002\u0002\u0002\u0486\u0483\u0003\u0002\u0002\u0002\u0486',
  '\u0484\u0003\u0002\u0002\u0002\u0486\u0485\u0003\u0002\u0002\u0002\u0487',
  '\u00ad\u0003\u0002\u0002\u0002\u0080\u00af\u00b2\u00cc\u00d0\u00d7\u00dd',
  '\u00e1\u00e8\u00f0\u00f5\u00f7\u0100\u0104\u010c\u0111\u011a\u0122\u0126',
  '\u012b\u0136\u013c\u014b\u015f\u0163\u0167\u016f\u0178\u017d\u0185\u018a',
  '\u018f\u0196\u019d\u01a6\u01ab\u01bd\u01c1\u01c3\u01ca\u01d0\u01d5\u01e4',
  '\u01e7\u01ec\u01ef\u01fa\u01fe\u0203\u0210\u0216\u021f\u0221\u022a\u022e',
  '\u0234\u0237\u023a\u023f\u0247\u024a\u0254\u0257\u025c\u0263\u026a\u026f',
  '\u0272\u0277\u027d\u0282\u028b\u028f\u0294\u0299\u029f\u02a3\u02b2\u02b5',
  '\u02ba\u02d1\u02d4\u02dd\u02e5\u02e9\u02eb\u02f0\u02f4\u02fb\u0302\u0308',
  '\u0332\u0372\u0376\u0383\u0385\u038b\u0392\u03a1\u03ad\u03b8\u03bd\u03c0',
  '\u03c4\u03c7\u03cb\u03d7\u03de\u03e5\u03ea\u03ef\u03f7\u03fa\u03fd\u0407',
  '\u040b\u040f\u0417\u041d\u0422\u0425\u042c\u0437\u0447\u044e\u047e\u0486'
].join('');

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function(ds, index) {
  return new antlr4.dfa.DFA(ds, index);
});

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [
  null,
  null,
  null,
  null,
  null,
  "'['",
  "']'",
  "'('",
  "')'",
  "'{'",
  "'}'",
  "';'",
  "','",
  "'='",
  "'?'",
  "':'",
  "'...'",
  "'.'",
  "'++'",
  "'--'",
  "'+'",
  "'-'",
  "'~'",
  "'!'",
  "'*'",
  "'/'",
  "'%'",
  "'**'",
  "'??'",
  "'#'",
  "'>>'",
  "'<<'",
  "'>>>'",
  "'<'",
  "'>'",
  "'<='",
  "'>='",
  "'=='",
  "'!='",
  "'==='",
  "'!=='",
  "'&'",
  "'^'",
  "'|'",
  "'&&'",
  "'||'",
  "'*='",
  "'/='",
  "'%='",
  "'+='",
  "'-='",
  "'<<='",
  "'>>='",
  "'>>>='",
  "'&='",
  "'^='",
  "'|='",
  "'**='",
  "'=>'",
  "'null'",
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  "'break'",
  "'do'",
  "'instanceof'",
  "'typeof'",
  "'case'",
  "'else'",
  "'new'",
  "'var'",
  "'catch'",
  "'finally'",
  "'return'",
  "'void'",
  "'continue'",
  "'for'",
  "'switch'",
  "'while'",
  "'debugger'",
  "'function'",
  "'this'",
  "'with'",
  "'default'",
  "'if'",
  "'throw'",
  "'delete'",
  "'in'",
  "'try'",
  "'as'",
  "'from'",
  "'class'",
  "'enum'",
  "'extends'",
  "'super'",
  "'const'",
  "'export'",
  "'import'",
  "'async'",
  "'await'",
  "'implements'",
  null,
  null,
  "'private'",
  "'public'",
  "'interface'",
  "'package'",
  "'protected'",
  "'static'",
  "'yield'",
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  "'/>'"
];

var symbolicNames = [
  null,
  'HashBangLine',
  'MultiLineComment',
  'SingleLineComment',
  'RegularExpressionLiteral',
  'OpenBracket',
  'CloseBracket',
  'OpenParen',
  'CloseParen',
  'OpenBrace',
  'CloseBrace',
  'SemiColon',
  'Comma',
  'Assign',
  'QuestionMark',
  'Colon',
  'Ellipsis',
  'Dot',
  'PlusPlus',
  'MinusMinus',
  'Plus',
  'Minus',
  'BitNot',
  'Not',
  'Multiply',
  'Divide',
  'Modulus',
  'Power',
  'NullCoalesce',
  'Hashtag',
  'RightShiftArithmetic',
  'LeftShiftArithmetic',
  'RightShiftLogical',
  'LessThan',
  'MoreThan',
  'LessThanEquals',
  'GreaterThanEquals',
  'Equals_',
  'NotEquals',
  'IdentityEquals',
  'IdentityNotEquals',
  'BitAnd',
  'BitXOr',
  'BitOr',
  'And',
  'Or',
  'MultiplyAssign',
  'DivideAssign',
  'ModulusAssign',
  'PlusAssign',
  'MinusAssign',
  'LeftShiftArithmeticAssign',
  'RightShiftArithmeticAssign',
  'RightShiftLogicalAssign',
  'BitAndAssign',
  'BitXorAssign',
  'BitOrAssign',
  'PowerAssign',
  'ARROW',
  'NullLiteral',
  'BooleanLiteral',
  'DecimalLiteral',
  'HexIntegerLiteral',
  'OctalIntegerLiteral',
  'OctalIntegerLiteral2',
  'BinaryIntegerLiteral',
  'BigHexIntegerLiteral',
  'BigOctalIntegerLiteral',
  'BigBinaryIntegerLiteral',
  'BigDecimalIntegerLiteral',
  'Break',
  'Do',
  'Instanceof',
  'Typeof',
  'Case',
  'Else',
  'New',
  'Var',
  'Catch',
  'Finally',
  'Return',
  'Void',
  'Continue',
  'For',
  'Switch',
  'While',
  'Debugger',
  'Function',
  'This',
  'With',
  'Default',
  'If',
  'Throw',
  'Delete',
  'In',
  'Try',
  'As',
  'From',
  'Class',
  'Enum',
  'Extends',
  'Super',
  'Const',
  'Export',
  'Import',
  'Async',
  'Await',
  'Implements',
  'StrictLet',
  'NonStrictLet',
  'Private',
  'Public',
  'Interface',
  'Package',
  'Protected',
  'Static',
  'Yield',
  'Identifier',
  'StringLiteral',
  'TemplateStringLiteral',
  'WhiteSpaces',
  'LineTerminator',
  'HtmlComment',
  'CDataComment',
  'UnexpectedCharacter',
  'CDATA',
  'TagOpen',
  'TagClose',
  'TagSlashClose',
  'TagSlash',
  'TagName',
  'AttributeValue',
  'Attribute',
  'TagEquals'
];

var ruleNames = [
  'program',
  'sourceElement',
  'statement',
  'block',
  'statementList',
  'importStatement',
  'importFromBlock',
  'moduleItems',
  'importDefault',
  'importNamespace',
  'importFrom',
  'aliasName',
  'exportStatement',
  'exportFromBlock',
  'declaration',
  'variableStatement',
  'variableDeclarationList',
  'variableDeclaration',
  'emptyStatement',
  'expressionStatement',
  'ifStatement',
  'iterationStatement',
  'varModifier',
  'continueStatement',
  'breakStatement',
  'returnStatement',
  'yieldStatement',
  'withStatement',
  'switchStatement',
  'caseBlock',
  'caseClauses',
  'caseClause',
  'defaultClause',
  'labelledStatement',
  'throwStatement',
  'tryStatement',
  'catchProduction',
  'finallyProduction',
  'debuggerStatement',
  'functionDeclaration',
  'classDeclaration',
  'classTail',
  'classElement',
  'methodDefinition',
  'formalParameterList',
  'formalParameterArg',
  'lastFormalParameterArg',
  'functionBody',
  'sourceElements',
  'arrayLiteral',
  'elementList',
  'arrayElement',
  'propertyAssignment',
  'propertyName',
  'arguments',
  'argument',
  'expressionSequence',
  'singleExpression',
  'htmlElements',
  'htmlElement',
  'htmlContent',
  'htmlTagStartName',
  'htmlTagClosingName',
  'htmlTagName',
  'htmlAttribute',
  'htmlAttributeName',
  'htmlChardata',
  'htmlAttributeValue',
  'assignable',
  'objectLiteral',
  'objectExpressionSequence',
  'anoymousFunction',
  'arrowFunctionParameters',
  'arrowFunctionBody',
  'assignmentOperator',
  'literal',
  'numericLiteral',
  'bigintLiteral',
  'getter',
  'setter',
  'identifierName',
  'identifier',
  'reservedWord',
  'keyword',
  'let',
  'eos'
];

function JSXParser(input) {
  JSXParserBase.call(this, input);
  this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
  this.ruleNames = ruleNames;
  this.literalNames = literalNames;
  this.symbolicNames = symbolicNames;
  return this;
}

JSXParser.prototype = Object.create(JSXParserBase.prototype);
JSXParser.prototype.constructor = JSXParser;

Object.defineProperty(JSXParser.prototype, 'atn', {
  get: function() {
    return atn;
  }
});

JSXParser.EOF = antlr4.Token.EOF;
JSXParser.HashBangLine = 1;
JSXParser.MultiLineComment = 2;
JSXParser.SingleLineComment = 3;
JSXParser.RegularExpressionLiteral = 4;
JSXParser.OpenBracket = 5;
JSXParser.CloseBracket = 6;
JSXParser.OpenParen = 7;
JSXParser.CloseParen = 8;
JSXParser.OpenBrace = 9;
JSXParser.CloseBrace = 10;
JSXParser.SemiColon = 11;
JSXParser.Comma = 12;
JSXParser.Assign = 13;
JSXParser.QuestionMark = 14;
JSXParser.Colon = 15;
JSXParser.Ellipsis = 16;
JSXParser.Dot = 17;
JSXParser.PlusPlus = 18;
JSXParser.MinusMinus = 19;
JSXParser.Plus = 20;
JSXParser.Minus = 21;
JSXParser.BitNot = 22;
JSXParser.Not = 23;
JSXParser.Multiply = 24;
JSXParser.Divide = 25;
JSXParser.Modulus = 26;
JSXParser.Power = 27;
JSXParser.NullCoalesce = 28;
JSXParser.Hashtag = 29;
JSXParser.RightShiftArithmetic = 30;
JSXParser.LeftShiftArithmetic = 31;
JSXParser.RightShiftLogical = 32;
JSXParser.LessThan = 33;
JSXParser.MoreThan = 34;
JSXParser.LessThanEquals = 35;
JSXParser.GreaterThanEquals = 36;
JSXParser.Equals_ = 37;
JSXParser.NotEquals = 38;
JSXParser.IdentityEquals = 39;
JSXParser.IdentityNotEquals = 40;
JSXParser.BitAnd = 41;
JSXParser.BitXOr = 42;
JSXParser.BitOr = 43;
JSXParser.And = 44;
JSXParser.Or = 45;
JSXParser.MultiplyAssign = 46;
JSXParser.DivideAssign = 47;
JSXParser.ModulusAssign = 48;
JSXParser.PlusAssign = 49;
JSXParser.MinusAssign = 50;
JSXParser.LeftShiftArithmeticAssign = 51;
JSXParser.RightShiftArithmeticAssign = 52;
JSXParser.RightShiftLogicalAssign = 53;
JSXParser.BitAndAssign = 54;
JSXParser.BitXorAssign = 55;
JSXParser.BitOrAssign = 56;
JSXParser.PowerAssign = 57;
JSXParser.ARROW = 58;
JSXParser.NullLiteral = 59;
JSXParser.BooleanLiteral = 60;
JSXParser.DecimalLiteral = 61;
JSXParser.HexIntegerLiteral = 62;
JSXParser.OctalIntegerLiteral = 63;
JSXParser.OctalIntegerLiteral2 = 64;
JSXParser.BinaryIntegerLiteral = 65;
JSXParser.BigHexIntegerLiteral = 66;
JSXParser.BigOctalIntegerLiteral = 67;
JSXParser.BigBinaryIntegerLiteral = 68;
JSXParser.BigDecimalIntegerLiteral = 69;
JSXParser.Break = 70;
JSXParser.Do = 71;
JSXParser.Instanceof = 72;
JSXParser.Typeof = 73;
JSXParser.Case = 74;
JSXParser.Else = 75;
JSXParser.New = 76;
JSXParser.Var = 77;
JSXParser.Catch = 78;
JSXParser.Finally = 79;
JSXParser.Return = 80;
JSXParser.Void = 81;
JSXParser.Continue = 82;
JSXParser.For = 83;
JSXParser.Switch = 84;
JSXParser.While = 85;
JSXParser.Debugger = 86;
JSXParser.Function = 87;
JSXParser.This = 88;
JSXParser.With = 89;
JSXParser.Default = 90;
JSXParser.If = 91;
JSXParser.Throw = 92;
JSXParser.Delete = 93;
JSXParser.In = 94;
JSXParser.Try = 95;
JSXParser.As = 96;
JSXParser.From = 97;
JSXParser.Class = 98;
JSXParser.Enum = 99;
JSXParser.Extends = 100;
JSXParser.Super = 101;
JSXParser.Const = 102;
JSXParser.Export = 103;
JSXParser.Import = 104;
JSXParser.Async = 105;
JSXParser.Await = 106;
JSXParser.Implements = 107;
JSXParser.StrictLet = 108;
JSXParser.NonStrictLet = 109;
JSXParser.Private = 110;
JSXParser.Public = 111;
JSXParser.Interface = 112;
JSXParser.Package = 113;
JSXParser.Protected = 114;
JSXParser.Static = 115;
JSXParser.Yield = 116;
JSXParser.Identifier = 117;
JSXParser.StringLiteral = 118;
JSXParser.TemplateStringLiteral = 119;
JSXParser.WhiteSpaces = 120;
JSXParser.LineTerminator = 121;
JSXParser.HtmlComment = 122;
JSXParser.CDataComment = 123;
JSXParser.UnexpectedCharacter = 124;
JSXParser.CDATA = 125;
JSXParser.TagOpen = 126;
JSXParser.TagClose = 127;
JSXParser.TagSlashClose = 128;
JSXParser.TagSlash = 129;
JSXParser.TagName = 130;
JSXParser.AttributeValue = 131;
JSXParser.Attribute = 132;
JSXParser.TagEquals = 133;

JSXParser.RULE_program = 0;
JSXParser.RULE_sourceElement = 1;
JSXParser.RULE_statement = 2;
JSXParser.RULE_block = 3;
JSXParser.RULE_statementList = 4;
JSXParser.RULE_importStatement = 5;
JSXParser.RULE_importFromBlock = 6;
JSXParser.RULE_moduleItems = 7;
JSXParser.RULE_importDefault = 8;
JSXParser.RULE_importNamespace = 9;
JSXParser.RULE_importFrom = 10;
JSXParser.RULE_aliasName = 11;
JSXParser.RULE_exportStatement = 12;
JSXParser.RULE_exportFromBlock = 13;
JSXParser.RULE_declaration = 14;
JSXParser.RULE_variableStatement = 15;
JSXParser.RULE_variableDeclarationList = 16;
JSXParser.RULE_variableDeclaration = 17;
JSXParser.RULE_emptyStatement = 18;
JSXParser.RULE_expressionStatement = 19;
JSXParser.RULE_ifStatement = 20;
JSXParser.RULE_iterationStatement = 21;
JSXParser.RULE_varModifier = 22;
JSXParser.RULE_continueStatement = 23;
JSXParser.RULE_breakStatement = 24;
JSXParser.RULE_returnStatement = 25;
JSXParser.RULE_yieldStatement = 26;
JSXParser.RULE_withStatement = 27;
JSXParser.RULE_switchStatement = 28;
JSXParser.RULE_caseBlock = 29;
JSXParser.RULE_caseClauses = 30;
JSXParser.RULE_caseClause = 31;
JSXParser.RULE_defaultClause = 32;
JSXParser.RULE_labelledStatement = 33;
JSXParser.RULE_throwStatement = 34;
JSXParser.RULE_tryStatement = 35;
JSXParser.RULE_catchProduction = 36;
JSXParser.RULE_finallyProduction = 37;
JSXParser.RULE_debuggerStatement = 38;
JSXParser.RULE_functionDeclaration = 39;
JSXParser.RULE_classDeclaration = 40;
JSXParser.RULE_classTail = 41;
JSXParser.RULE_classElement = 42;
JSXParser.RULE_methodDefinition = 43;
JSXParser.RULE_formalParameterList = 44;
JSXParser.RULE_formalParameterArg = 45;
JSXParser.RULE_lastFormalParameterArg = 46;
JSXParser.RULE_functionBody = 47;
JSXParser.RULE_sourceElements = 48;
JSXParser.RULE_arrayLiteral = 49;
JSXParser.RULE_elementList = 50;
JSXParser.RULE_arrayElement = 51;
JSXParser.RULE_propertyAssignment = 52;
JSXParser.RULE_propertyName = 53;
JSXParser.RULE_arguments = 54;
JSXParser.RULE_argument = 55;
JSXParser.RULE_expressionSequence = 56;
JSXParser.RULE_singleExpression = 57;
JSXParser.RULE_htmlElements = 58;
JSXParser.RULE_htmlElement = 59;
JSXParser.RULE_htmlContent = 60;
JSXParser.RULE_htmlTagStartName = 61;
JSXParser.RULE_htmlTagClosingName = 62;
JSXParser.RULE_htmlTagName = 63;
JSXParser.RULE_htmlAttribute = 64;
JSXParser.RULE_htmlAttributeName = 65;
JSXParser.RULE_htmlChardata = 66;
JSXParser.RULE_htmlAttributeValue = 67;
JSXParser.RULE_assignable = 68;
JSXParser.RULE_objectLiteral = 69;
JSXParser.RULE_objectExpressionSequence = 70;
JSXParser.RULE_anoymousFunction = 71;
JSXParser.RULE_arrowFunctionParameters = 72;
JSXParser.RULE_arrowFunctionBody = 73;
JSXParser.RULE_assignmentOperator = 74;
JSXParser.RULE_literal = 75;
JSXParser.RULE_numericLiteral = 76;
JSXParser.RULE_bigintLiteral = 77;
JSXParser.RULE_getter = 78;
JSXParser.RULE_setter = 79;
JSXParser.RULE_identifierName = 80;
JSXParser.RULE_identifier = 81;
JSXParser.RULE_reservedWord = 82;
JSXParser.RULE_keyword = 83;
JSXParser.RULE_let = 84;
JSXParser.RULE_eos = 85;

function ProgramContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_program;
  return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
  return this.getToken(JSXParser.EOF, 0);
};

ProgramContext.prototype.HashBangLine = function() {
  return this.getToken(JSXParser.HashBangLine, 0);
};

ProgramContext.prototype.sourceElements = function() {
  return this.getTypedRuleContext(SourceElementsContext, 0);
};

ProgramContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterProgram(this);
  }
};

ProgramContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitProgram(this);
  }
};

ProgramContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitProgram(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ProgramContext = ProgramContext;

JSXParser.prototype.program = function() {
  var localctx = new ProgramContext(this, this._ctx, this.state);
  this.enterRule(localctx, 0, JSXParser.RULE_program);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 173;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
    if(la_ === 1) {
      this.state = 172;
      this.match(JSXParser.HashBangLine);
    }
    this.state = 176;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
    if(la_ === 1) {
      this.state = 175;
      this.sourceElements();
    }
    this.state = 178;
    this.match(JSXParser.EOF);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SourceElementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_sourceElement;
  return this;
}

SourceElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementContext.prototype.constructor = SourceElementContext;

SourceElementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

SourceElementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterSourceElement(this);
  }
};

SourceElementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitSourceElement(this);
  }
};

SourceElementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitSourceElement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.SourceElementContext = SourceElementContext;

JSXParser.prototype.sourceElement = function() {
  var localctx = new SourceElementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 2, JSXParser.RULE_sourceElement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 180;
    this.statement();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function StatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_statement;
  return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

StatementContext.prototype.variableStatement = function() {
  return this.getTypedRuleContext(VariableStatementContext, 0);
};

StatementContext.prototype.importStatement = function() {
  return this.getTypedRuleContext(ImportStatementContext, 0);
};

StatementContext.prototype.exportStatement = function() {
  return this.getTypedRuleContext(ExportStatementContext, 0);
};

StatementContext.prototype.emptyStatement = function() {
  return this.getTypedRuleContext(EmptyStatementContext, 0);
};

StatementContext.prototype.classDeclaration = function() {
  return this.getTypedRuleContext(ClassDeclarationContext, 0);
};

StatementContext.prototype.expressionStatement = function() {
  return this.getTypedRuleContext(ExpressionStatementContext, 0);
};

StatementContext.prototype.ifStatement = function() {
  return this.getTypedRuleContext(IfStatementContext, 0);
};

StatementContext.prototype.iterationStatement = function() {
  return this.getTypedRuleContext(IterationStatementContext, 0);
};

StatementContext.prototype.continueStatement = function() {
  return this.getTypedRuleContext(ContinueStatementContext, 0);
};

StatementContext.prototype.breakStatement = function() {
  return this.getTypedRuleContext(BreakStatementContext, 0);
};

StatementContext.prototype.returnStatement = function() {
  return this.getTypedRuleContext(ReturnStatementContext, 0);
};

StatementContext.prototype.yieldStatement = function() {
  return this.getTypedRuleContext(YieldStatementContext, 0);
};

StatementContext.prototype.withStatement = function() {
  return this.getTypedRuleContext(WithStatementContext, 0);
};

StatementContext.prototype.labelledStatement = function() {
  return this.getTypedRuleContext(LabelledStatementContext, 0);
};

StatementContext.prototype.switchStatement = function() {
  return this.getTypedRuleContext(SwitchStatementContext, 0);
};

StatementContext.prototype.throwStatement = function() {
  return this.getTypedRuleContext(ThrowStatementContext, 0);
};

StatementContext.prototype.tryStatement = function() {
  return this.getTypedRuleContext(TryStatementContext, 0);
};

StatementContext.prototype.debuggerStatement = function() {
  return this.getTypedRuleContext(DebuggerStatementContext, 0);
};

StatementContext.prototype.functionDeclaration = function() {
  return this.getTypedRuleContext(FunctionDeclarationContext, 0);
};

StatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterStatement(this);
  }
};

StatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitStatement(this);
  }
};

StatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.StatementContext = StatementContext;

JSXParser.prototype.statement = function() {
  var localctx = new StatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 4, JSXParser.RULE_statement);
  try {
    this.state = 202;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this.block();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 183;
        this.variableStatement();
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 184;
        this.importStatement();
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 185;
        this.exportStatement();
        break;

      case 5:
        this.enterOuterAlt(localctx, 5);
        this.state = 186;
        this.emptyStatement();
        break;

      case 6:
        this.enterOuterAlt(localctx, 6);
        this.state = 187;
        this.classDeclaration();
        break;

      case 7:
        this.enterOuterAlt(localctx, 7);
        this.state = 188;
        this.expressionStatement();
        break;

      case 8:
        this.enterOuterAlt(localctx, 8);
        this.state = 189;
        this.ifStatement();
        break;

      case 9:
        this.enterOuterAlt(localctx, 9);
        this.state = 190;
        this.iterationStatement();
        break;

      case 10:
        this.enterOuterAlt(localctx, 10);
        this.state = 191;
        this.continueStatement();
        break;

      case 11:
        this.enterOuterAlt(localctx, 11);
        this.state = 192;
        this.breakStatement();
        break;

      case 12:
        this.enterOuterAlt(localctx, 12);
        this.state = 193;
        this.returnStatement();
        break;

      case 13:
        this.enterOuterAlt(localctx, 13);
        this.state = 194;
        this.yieldStatement();
        break;

      case 14:
        this.enterOuterAlt(localctx, 14);
        this.state = 195;
        this.withStatement();
        break;

      case 15:
        this.enterOuterAlt(localctx, 15);
        this.state = 196;
        this.labelledStatement();
        break;

      case 16:
        this.enterOuterAlt(localctx, 16);
        this.state = 197;
        this.switchStatement();
        break;

      case 17:
        this.enterOuterAlt(localctx, 17);
        this.state = 198;
        this.throwStatement();
        break;

      case 18:
        this.enterOuterAlt(localctx, 18);
        this.state = 199;
        this.tryStatement();
        break;

      case 19:
        this.enterOuterAlt(localctx, 19);
        this.state = 200;
        this.debuggerStatement();
        break;

      case 20:
        this.enterOuterAlt(localctx, 20);
        this.state = 201;
        this.functionDeclaration();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function BlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_block;
  return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
  return this.getTypedRuleContext(StatementListContext, 0);
};

BlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBlock(this);
  }
};

BlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBlock(this);
  }
};

BlockContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.BlockContext = BlockContext;

JSXParser.prototype.block = function() {
  var localctx = new BlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 6, JSXParser.RULE_block);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 204;
    this.match(JSXParser.OpenBrace);
    this.state = 206;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
    if(la_ === 1) {
      this.state = 205;
      this.statementList();
    }
    this.state = 208;
    this.match(JSXParser.CloseBrace);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function StatementListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_statementList;
  return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(StatementContext);
  } else {
    return this.getTypedRuleContext(StatementContext, i);
  }
};

StatementListContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterStatementList(this);
  }
};

StatementListContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitStatementList(this);
  }
};

StatementListContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitStatementList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.StatementListContext = StatementListContext;

JSXParser.prototype.statementList = function() {
  var localctx = new StatementListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 8, JSXParser.RULE_statementList);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 211;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 210;
          this.statement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 213;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
    } while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ImportStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_importStatement;
  return this;
}

ImportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStatementContext.prototype.constructor = ImportStatementContext;

ImportStatementContext.prototype.Import = function() {
  return this.getToken(JSXParser.Import, 0);
};

ImportStatementContext.prototype.importFromBlock = function() {
  return this.getTypedRuleContext(ImportFromBlockContext, 0);
};

ImportStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterImportStatement(this);
  }
};

ImportStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitImportStatement(this);
  }
};

ImportStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitImportStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ImportStatementContext = ImportStatementContext;

JSXParser.prototype.importStatement = function() {
  var localctx = new ImportStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 10, JSXParser.RULE_importStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 215;
    this.match(JSXParser.Import);
    this.state = 216;
    this.importFromBlock();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ImportFromBlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_importFromBlock;
  return this;
}

ImportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromBlockContext.prototype.constructor = ImportFromBlockContext;

ImportFromBlockContext.prototype.importFrom = function() {
  return this.getTypedRuleContext(ImportFromContext, 0);
};

ImportFromBlockContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ImportFromBlockContext.prototype.importNamespace = function() {
  return this.getTypedRuleContext(ImportNamespaceContext, 0);
};

ImportFromBlockContext.prototype.moduleItems = function() {
  return this.getTypedRuleContext(ModuleItemsContext, 0);
};

ImportFromBlockContext.prototype.importDefault = function() {
  return this.getTypedRuleContext(ImportDefaultContext, 0);
};

ImportFromBlockContext.prototype.StringLiteral = function() {
  return this.getToken(JSXParser.StringLiteral, 0);
};

ImportFromBlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterImportFromBlock(this);
  }
};

ImportFromBlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitImportFromBlock(this);
  }
};

ImportFromBlockContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitImportFromBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ImportFromBlockContext = ImportFromBlockContext;

JSXParser.prototype.importFromBlock = function() {
  var localctx = new ImportFromBlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 12, JSXParser.RULE_importFromBlock);
  try {
    this.state = 230;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.OpenBrace:
      case JSXParser.Multiply:
      case JSXParser.NullLiteral:
      case JSXParser.BooleanLiteral:
      case JSXParser.Break:
      case JSXParser.Do:
      case JSXParser.Instanceof:
      case JSXParser.Typeof:
      case JSXParser.Case:
      case JSXParser.Else:
      case JSXParser.New:
      case JSXParser.Var:
      case JSXParser.Catch:
      case JSXParser.Finally:
      case JSXParser.Return:
      case JSXParser.Void:
      case JSXParser.Continue:
      case JSXParser.For:
      case JSXParser.Switch:
      case JSXParser.While:
      case JSXParser.Debugger:
      case JSXParser.Function:
      case JSXParser.This:
      case JSXParser.With:
      case JSXParser.Default:
      case JSXParser.If:
      case JSXParser.Throw:
      case JSXParser.Delete:
      case JSXParser.In:
      case JSXParser.Try:
      case JSXParser.As:
      case JSXParser.From:
      case JSXParser.Class:
      case JSXParser.Enum:
      case JSXParser.Extends:
      case JSXParser.Super:
      case JSXParser.Const:
      case JSXParser.Export:
      case JSXParser.Import:
      case JSXParser.Async:
      case JSXParser.Await:
      case JSXParser.Implements:
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
      case JSXParser.Private:
      case JSXParser.Public:
      case JSXParser.Interface:
      case JSXParser.Package:
      case JSXParser.Protected:
      case JSXParser.Static:
      case JSXParser.Yield:
      case JSXParser.Identifier:
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 5, this._ctx);
        if(la_ === 1) {
          this.state = 218;
          this.importDefault();
        }
        this.state = 223;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case JSXParser.Multiply:
          case JSXParser.NullLiteral:
          case JSXParser.BooleanLiteral:
          case JSXParser.Break:
          case JSXParser.Do:
          case JSXParser.Instanceof:
          case JSXParser.Typeof:
          case JSXParser.Case:
          case JSXParser.Else:
          case JSXParser.New:
          case JSXParser.Var:
          case JSXParser.Catch:
          case JSXParser.Finally:
          case JSXParser.Return:
          case JSXParser.Void:
          case JSXParser.Continue:
          case JSXParser.For:
          case JSXParser.Switch:
          case JSXParser.While:
          case JSXParser.Debugger:
          case JSXParser.Function:
          case JSXParser.This:
          case JSXParser.With:
          case JSXParser.Default:
          case JSXParser.If:
          case JSXParser.Throw:
          case JSXParser.Delete:
          case JSXParser.In:
          case JSXParser.Try:
          case JSXParser.As:
          case JSXParser.From:
          case JSXParser.Class:
          case JSXParser.Enum:
          case JSXParser.Extends:
          case JSXParser.Super:
          case JSXParser.Const:
          case JSXParser.Export:
          case JSXParser.Import:
          case JSXParser.Async:
          case JSXParser.Await:
          case JSXParser.Implements:
          case JSXParser.StrictLet:
          case JSXParser.NonStrictLet:
          case JSXParser.Private:
          case JSXParser.Public:
          case JSXParser.Interface:
          case JSXParser.Package:
          case JSXParser.Protected:
          case JSXParser.Static:
          case JSXParser.Yield:
          case JSXParser.Identifier:
            this.state = 221;
            this.importNamespace();
            break;
          case JSXParser.OpenBrace:
            this.state = 222;
            this.moduleItems();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 225;
        this.importFrom();
        this.state = 226;
        this.eos();
        break;
      case JSXParser.StringLiteral:
        this.enterOuterAlt(localctx, 2);
        this.state = 228;
        this.match(JSXParser.StringLiteral);
        this.state = 229;
        this.eos();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ModuleItemsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_moduleItems;
  return this;
}

ModuleItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemsContext.prototype.constructor = ModuleItemsContext;

ModuleItemsContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

ModuleItemsContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

ModuleItemsContext.prototype.aliasName = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(AliasNameContext);
  } else {
    return this.getTypedRuleContext(AliasNameContext, i);
  }
};

ModuleItemsContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Comma);
  } else {
    return this.getToken(JSXParser.Comma, i);
  }
};

ModuleItemsContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterModuleItems(this);
  }
};

ModuleItemsContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitModuleItems(this);
  }
};

ModuleItemsContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitModuleItems(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ModuleItemsContext = ModuleItemsContext;

JSXParser.prototype.moduleItems = function() {
  var localctx = new ModuleItemsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 14, JSXParser.RULE_moduleItems);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 232;
    this.match(JSXParser.OpenBrace);
    this.state = 238;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 233;
        this.aliasName();
        this.state = 234;
        this.match(JSXParser.Comma);
      }
      this.state = 240;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
    }

    this.state = 245;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(
      (((_la - 59) & ~0x1f) == 0 &&
        ((1 << (_la - 59)) &
          ((1 << (JSXParser.NullLiteral - 59)) |
            (1 << (JSXParser.BooleanLiteral - 59)) |
            (1 << (JSXParser.Break - 59)) |
            (1 << (JSXParser.Do - 59)) |
            (1 << (JSXParser.Instanceof - 59)) |
            (1 << (JSXParser.Typeof - 59)) |
            (1 << (JSXParser.Case - 59)) |
            (1 << (JSXParser.Else - 59)) |
            (1 << (JSXParser.New - 59)) |
            (1 << (JSXParser.Var - 59)) |
            (1 << (JSXParser.Catch - 59)) |
            (1 << (JSXParser.Finally - 59)) |
            (1 << (JSXParser.Return - 59)) |
            (1 << (JSXParser.Void - 59)) |
            (1 << (JSXParser.Continue - 59)) |
            (1 << (JSXParser.For - 59)) |
            (1 << (JSXParser.Switch - 59)) |
            (1 << (JSXParser.While - 59)) |
            (1 << (JSXParser.Debugger - 59)) |
            (1 << (JSXParser.Function - 59)) |
            (1 << (JSXParser.This - 59)) |
            (1 << (JSXParser.With - 59)) |
            (1 << (JSXParser.Default - 59)))) !==
          0) ||
      (((_la - 91) & ~0x1f) == 0 &&
        ((1 << (_la - 91)) &
          ((1 << (JSXParser.If - 91)) |
            (1 << (JSXParser.Throw - 91)) |
            (1 << (JSXParser.Delete - 91)) |
            (1 << (JSXParser.In - 91)) |
            (1 << (JSXParser.Try - 91)) |
            (1 << (JSXParser.As - 91)) |
            (1 << (JSXParser.From - 91)) |
            (1 << (JSXParser.Class - 91)) |
            (1 << (JSXParser.Enum - 91)) |
            (1 << (JSXParser.Extends - 91)) |
            (1 << (JSXParser.Super - 91)) |
            (1 << (JSXParser.Const - 91)) |
            (1 << (JSXParser.Export - 91)) |
            (1 << (JSXParser.Import - 91)) |
            (1 << (JSXParser.Async - 91)) |
            (1 << (JSXParser.Await - 91)) |
            (1 << (JSXParser.Implements - 91)) |
            (1 << (JSXParser.StrictLet - 91)) |
            (1 << (JSXParser.NonStrictLet - 91)) |
            (1 << (JSXParser.Private - 91)) |
            (1 << (JSXParser.Public - 91)) |
            (1 << (JSXParser.Interface - 91)) |
            (1 << (JSXParser.Package - 91)) |
            (1 << (JSXParser.Protected - 91)) |
            (1 << (JSXParser.Static - 91)) |
            (1 << (JSXParser.Yield - 91)) |
            (1 << (JSXParser.Identifier - 91)))) !==
          0)
    ) {
      this.state = 241;
      this.aliasName();
      this.state = 243;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === JSXParser.Comma) {
        this.state = 242;
        this.match(JSXParser.Comma);
      }
    }

    this.state = 247;
    this.match(JSXParser.CloseBrace);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ImportDefaultContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_importDefault;
  return this;
}

ImportDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDefaultContext.prototype.constructor = ImportDefaultContext;

ImportDefaultContext.prototype.aliasName = function() {
  return this.getTypedRuleContext(AliasNameContext, 0);
};

ImportDefaultContext.prototype.Comma = function() {
  return this.getToken(JSXParser.Comma, 0);
};

ImportDefaultContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterImportDefault(this);
  }
};

ImportDefaultContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitImportDefault(this);
  }
};

ImportDefaultContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitImportDefault(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ImportDefaultContext = ImportDefaultContext;

JSXParser.prototype.importDefault = function() {
  var localctx = new ImportDefaultContext(this, this._ctx, this.state);
  this.enterRule(localctx, 16, JSXParser.RULE_importDefault);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 249;
    this.aliasName();
    this.state = 250;
    this.match(JSXParser.Comma);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ImportNamespaceContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_importNamespace;
  return this;
}

ImportNamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportNamespaceContext.prototype.constructor = ImportNamespaceContext;

ImportNamespaceContext.prototype.Multiply = function() {
  return this.getToken(JSXParser.Multiply, 0);
};

ImportNamespaceContext.prototype.identifierName = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(IdentifierNameContext);
  } else {
    return this.getTypedRuleContext(IdentifierNameContext, i);
  }
};

ImportNamespaceContext.prototype.As = function() {
  return this.getToken(JSXParser.As, 0);
};

ImportNamespaceContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterImportNamespace(this);
  }
};

ImportNamespaceContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitImportNamespace(this);
  }
};

ImportNamespaceContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitImportNamespace(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ImportNamespaceContext = ImportNamespaceContext;

JSXParser.prototype.importNamespace = function() {
  var localctx = new ImportNamespaceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 18, JSXParser.RULE_importNamespace);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 254;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Multiply:
        this.state = 252;
        this.match(JSXParser.Multiply);
        break;
      case JSXParser.NullLiteral:
      case JSXParser.BooleanLiteral:
      case JSXParser.Break:
      case JSXParser.Do:
      case JSXParser.Instanceof:
      case JSXParser.Typeof:
      case JSXParser.Case:
      case JSXParser.Else:
      case JSXParser.New:
      case JSXParser.Var:
      case JSXParser.Catch:
      case JSXParser.Finally:
      case JSXParser.Return:
      case JSXParser.Void:
      case JSXParser.Continue:
      case JSXParser.For:
      case JSXParser.Switch:
      case JSXParser.While:
      case JSXParser.Debugger:
      case JSXParser.Function:
      case JSXParser.This:
      case JSXParser.With:
      case JSXParser.Default:
      case JSXParser.If:
      case JSXParser.Throw:
      case JSXParser.Delete:
      case JSXParser.In:
      case JSXParser.Try:
      case JSXParser.As:
      case JSXParser.From:
      case JSXParser.Class:
      case JSXParser.Enum:
      case JSXParser.Extends:
      case JSXParser.Super:
      case JSXParser.Const:
      case JSXParser.Export:
      case JSXParser.Import:
      case JSXParser.Async:
      case JSXParser.Await:
      case JSXParser.Implements:
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
      case JSXParser.Private:
      case JSXParser.Public:
      case JSXParser.Interface:
      case JSXParser.Package:
      case JSXParser.Protected:
      case JSXParser.Static:
      case JSXParser.Yield:
      case JSXParser.Identifier:
        this.state = 253;
        this.identifierName();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
    this.state = 258;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.As) {
      this.state = 256;
      this.match(JSXParser.As);
      this.state = 257;
      this.identifierName();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ImportFromContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_importFrom;
  return this;
}

ImportFromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromContext.prototype.constructor = ImportFromContext;

ImportFromContext.prototype.From = function() {
  return this.getToken(JSXParser.From, 0);
};

ImportFromContext.prototype.StringLiteral = function() {
  return this.getToken(JSXParser.StringLiteral, 0);
};

ImportFromContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterImportFrom(this);
  }
};

ImportFromContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitImportFrom(this);
  }
};

ImportFromContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitImportFrom(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ImportFromContext = ImportFromContext;

JSXParser.prototype.importFrom = function() {
  var localctx = new ImportFromContext(this, this._ctx, this.state);
  this.enterRule(localctx, 20, JSXParser.RULE_importFrom);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 260;
    this.match(JSXParser.From);
    this.state = 261;
    this.match(JSXParser.StringLiteral);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AliasNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_aliasName;
  return this;
}

AliasNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasNameContext.prototype.constructor = AliasNameContext;

AliasNameContext.prototype.identifierName = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(IdentifierNameContext);
  } else {
    return this.getTypedRuleContext(IdentifierNameContext, i);
  }
};

AliasNameContext.prototype.As = function() {
  return this.getToken(JSXParser.As, 0);
};

AliasNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAliasName(this);
  }
};

AliasNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAliasName(this);
  }
};

AliasNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAliasName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.AliasNameContext = AliasNameContext;

JSXParser.prototype.aliasName = function() {
  var localctx = new AliasNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 22, JSXParser.RULE_aliasName);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 263;
    this.identifierName();
    this.state = 266;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.As) {
      this.state = 264;
      this.match(JSXParser.As);
      this.state = 265;
      this.identifierName();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExportStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_exportStatement;
  return this;
}

ExportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportStatementContext.prototype.constructor = ExportStatementContext;

ExportStatementContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExportDefaultDeclarationContext(parser, ctx) {
  ExportStatementContext.call(this, parser);
  ExportStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ExportDefaultDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDefaultDeclarationContext.prototype.constructor = ExportDefaultDeclarationContext;

JSXParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

ExportDefaultDeclarationContext.prototype.Export = function() {
  return this.getToken(JSXParser.Export, 0);
};

ExportDefaultDeclarationContext.prototype.Default = function() {
  return this.getToken(JSXParser.Default, 0);
};

ExportDefaultDeclarationContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ExportDefaultDeclarationContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};
ExportDefaultDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterExportDefaultDeclaration(this);
  }
};

ExportDefaultDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitExportDefaultDeclaration(this);
  }
};

ExportDefaultDeclarationContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitExportDefaultDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ExportDeclarationContext(parser, ctx) {
  ExportStatementContext.call(this, parser);
  ExportStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ExportDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDeclarationContext.prototype.constructor = ExportDeclarationContext;

JSXParser.ExportDeclarationContext = ExportDeclarationContext;

ExportDeclarationContext.prototype.Export = function() {
  return this.getToken(JSXParser.Export, 0);
};

ExportDeclarationContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ExportDeclarationContext.prototype.exportFromBlock = function() {
  return this.getTypedRuleContext(ExportFromBlockContext, 0);
};

ExportDeclarationContext.prototype.declaration = function() {
  return this.getTypedRuleContext(DeclarationContext, 0);
};
ExportDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterExportDeclaration(this);
  }
};

ExportDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitExportDeclaration(this);
  }
};

ExportDeclarationContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitExportDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ExportStatementContext = ExportStatementContext;

JSXParser.prototype.exportStatement = function() {
  var localctx = new ExportStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 24, JSXParser.RULE_exportStatement);
  try {
    this.state = 280;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
    switch (la_) {
      case 1:
        localctx = new ExportDeclarationContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(JSXParser.Export);
        this.state = 271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx);
        switch (la_) {
          case 1:
            this.state = 269;
            this.exportFromBlock();
            break;

          case 2:
            this.state = 270;
            this.declaration();
            break;
        }
        this.state = 273;
        this.eos();
        break;

      case 2:
        localctx = new ExportDefaultDeclarationContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 275;
        this.match(JSXParser.Export);
        this.state = 276;
        this.match(JSXParser.Default);
        this.state = 277;
        this.singleExpression(0);
        this.state = 278;
        this.eos();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExportFromBlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_exportFromBlock;
  return this;
}

ExportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportFromBlockContext.prototype.constructor = ExportFromBlockContext;

ExportFromBlockContext.prototype.importNamespace = function() {
  return this.getTypedRuleContext(ImportNamespaceContext, 0);
};

ExportFromBlockContext.prototype.importFrom = function() {
  return this.getTypedRuleContext(ImportFromContext, 0);
};

ExportFromBlockContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ExportFromBlockContext.prototype.moduleItems = function() {
  return this.getTypedRuleContext(ModuleItemsContext, 0);
};

ExportFromBlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterExportFromBlock(this);
  }
};

ExportFromBlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitExportFromBlock(this);
  }
};

ExportFromBlockContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitExportFromBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ExportFromBlockContext = ExportFromBlockContext;

JSXParser.prototype.exportFromBlock = function() {
  var localctx = new ExportFromBlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 26, JSXParser.RULE_exportFromBlock);
  try {
    this.state = 292;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Multiply:
      case JSXParser.NullLiteral:
      case JSXParser.BooleanLiteral:
      case JSXParser.Break:
      case JSXParser.Do:
      case JSXParser.Instanceof:
      case JSXParser.Typeof:
      case JSXParser.Case:
      case JSXParser.Else:
      case JSXParser.New:
      case JSXParser.Var:
      case JSXParser.Catch:
      case JSXParser.Finally:
      case JSXParser.Return:
      case JSXParser.Void:
      case JSXParser.Continue:
      case JSXParser.For:
      case JSXParser.Switch:
      case JSXParser.While:
      case JSXParser.Debugger:
      case JSXParser.Function:
      case JSXParser.This:
      case JSXParser.With:
      case JSXParser.Default:
      case JSXParser.If:
      case JSXParser.Throw:
      case JSXParser.Delete:
      case JSXParser.In:
      case JSXParser.Try:
      case JSXParser.As:
      case JSXParser.From:
      case JSXParser.Class:
      case JSXParser.Enum:
      case JSXParser.Extends:
      case JSXParser.Super:
      case JSXParser.Const:
      case JSXParser.Export:
      case JSXParser.Import:
      case JSXParser.Async:
      case JSXParser.Await:
      case JSXParser.Implements:
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
      case JSXParser.Private:
      case JSXParser.Public:
      case JSXParser.Interface:
      case JSXParser.Package:
      case JSXParser.Protected:
      case JSXParser.Static:
      case JSXParser.Yield:
      case JSXParser.Identifier:
        this.enterOuterAlt(localctx, 1);
        this.state = 282;
        this.importNamespace();
        this.state = 283;
        this.importFrom();
        this.state = 284;
        this.eos();
        break;
      case JSXParser.OpenBrace:
        this.enterOuterAlt(localctx, 2);
        this.state = 286;
        this.moduleItems();
        this.state = 288;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
        if(la_ === 1) {
          this.state = 287;
          this.importFrom();
        }
        this.state = 290;
        this.eos();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_declaration;
  return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.variableStatement = function() {
  return this.getTypedRuleContext(VariableStatementContext, 0);
};

DeclarationContext.prototype.classDeclaration = function() {
  return this.getTypedRuleContext(ClassDeclarationContext, 0);
};

DeclarationContext.prototype.functionDeclaration = function() {
  return this.getTypedRuleContext(FunctionDeclarationContext, 0);
};

DeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterDeclaration(this);
  }
};

DeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitDeclaration(this);
  }
};

DeclarationContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.DeclarationContext = DeclarationContext;

JSXParser.prototype.declaration = function() {
  var localctx = new DeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 28, JSXParser.RULE_declaration);
  try {
    this.state = 297;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Var:
      case JSXParser.Const:
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.variableStatement();
        break;
      case JSXParser.Class:
        this.enterOuterAlt(localctx, 2);
        this.state = 295;
        this.classDeclaration();
        break;
      case JSXParser.Function:
      case JSXParser.Async:
        this.enterOuterAlt(localctx, 3);
        this.state = 296;
        this.functionDeclaration();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function VariableStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_variableStatement;
  return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.variableDeclarationList = function() {
  return this.getTypedRuleContext(VariableDeclarationListContext, 0);
};

VariableStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

VariableStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterVariableStatement(this);
  }
};

VariableStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitVariableStatement(this);
  }
};

VariableStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitVariableStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.VariableStatementContext = VariableStatementContext;

JSXParser.prototype.variableStatement = function() {
  var localctx = new VariableStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 30, JSXParser.RULE_variableStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 299;
    this.variableDeclarationList();
    this.state = 300;
    this.eos();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function VariableDeclarationListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_variableDeclarationList;
  return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.varModifier = function() {
  return this.getTypedRuleContext(VarModifierContext, 0);
};

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(VariableDeclarationContext);
  } else {
    return this.getTypedRuleContext(VariableDeclarationContext, i);
  }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Comma);
  } else {
    return this.getToken(JSXParser.Comma, i);
  }
};

VariableDeclarationListContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterVariableDeclarationList(this);
  }
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitVariableDeclarationList(this);
  }
};

VariableDeclarationListContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitVariableDeclarationList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.VariableDeclarationListContext = VariableDeclarationListContext;

JSXParser.prototype.variableDeclarationList = function() {
  var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 32, JSXParser.RULE_variableDeclarationList);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 302;
    this.varModifier();
    this.state = 303;
    this.variableDeclaration();
    this.state = 308;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 304;
        this.match(JSXParser.Comma);
        this.state = 305;
        this.variableDeclaration();
      }
      this.state = 310;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_variableDeclaration;
  return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.assignable = function() {
  return this.getTypedRuleContext(AssignableContext, 0);
};

VariableDeclarationContext.prototype.Assign = function() {
  return this.getToken(JSXParser.Assign, 0);
};

VariableDeclarationContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterVariableDeclaration(this);
  }
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitVariableDeclaration(this);
  }
};

VariableDeclarationContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitVariableDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.VariableDeclarationContext = VariableDeclarationContext;

JSXParser.prototype.variableDeclaration = function() {
  var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 34, JSXParser.RULE_variableDeclaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 311;
    this.assignable();
    this.state = 314;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
    if(la_ === 1) {
      this.state = 312;
      this.match(JSXParser.Assign);
      this.state = 313;
      this.singleExpression(0);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_emptyStatement;
  return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
  return this.getToken(JSXParser.SemiColon, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterEmptyStatement(this);
  }
};

EmptyStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitEmptyStatement(this);
  }
};

EmptyStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitEmptyStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.EmptyStatementContext = EmptyStatementContext;

JSXParser.prototype.emptyStatement = function() {
  var localctx = new EmptyStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 36, JSXParser.RULE_emptyStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 316;
    this.match(JSXParser.SemiColon);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_expressionStatement;
  return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ExpressionStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterExpressionStatement(this);
  }
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitExpressionStatement(this);
  }
};

ExpressionStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitExpressionStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ExpressionStatementContext = ExpressionStatementContext;

JSXParser.prototype.expressionStatement = function() {
  var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 38, JSXParser.RULE_expressionStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 318;
    if(!this.notOpenBraceAndNotFunction()) {
      throw new antlr4.error.FailedPredicateException(this, 'this.notOpenBraceAndNotFunction()');
    }
    this.state = 319;
    this.expressionSequence();
    this.state = 320;
    this.eos();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_ifStatement;
  return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
  return this.getToken(JSXParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

IfStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

IfStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(StatementContext);
  } else {
    return this.getTypedRuleContext(StatementContext, i);
  }
};

IfStatementContext.prototype.Else = function() {
  return this.getToken(JSXParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterIfStatement(this);
  }
};

IfStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitIfStatement(this);
  }
};

IfStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitIfStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.IfStatementContext = IfStatementContext;

JSXParser.prototype.ifStatement = function() {
  var localctx = new IfStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 40, JSXParser.RULE_ifStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 322;
    this.match(JSXParser.If);
    this.state = 323;
    this.match(JSXParser.OpenParen);
    this.state = 324;
    this.expressionSequence();
    this.state = 325;
    this.match(JSXParser.CloseParen);
    this.state = 326;
    this.statement();
    this.state = 329;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
    if(la_ === 1) {
      this.state = 327;
      this.match(JSXParser.Else);
      this.state = 328;
      this.statement();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_iterationStatement;
  return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DoStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

DoStatementContext.prototype = Object.create(IterationStatementContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

JSXParser.DoStatementContext = DoStatementContext;

DoStatementContext.prototype.Do = function() {
  return this.getToken(JSXParser.Do, 0);
};

DoStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

DoStatementContext.prototype.While = function() {
  return this.getToken(JSXParser.While, 0);
};

DoStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

DoStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

DoStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

DoStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};
DoStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterDoStatement(this);
  }
};

DoStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitDoStatement(this);
  }
};

DoStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitDoStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function WhileStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

WhileStatementContext.prototype = Object.create(IterationStatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

JSXParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.While = function() {
  return this.getToken(JSXParser.While, 0);
};

WhileStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

WhileStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

WhileStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

WhileStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterWhileStatement(this);
  }
};

WhileStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitWhileStatement(this);
  }
};

WhileStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitWhileStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ForStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

JSXParser.ForStatementContext = ForStatementContext;

ForStatementContext.prototype.For = function() {
  return this.getToken(JSXParser.For, 0);
};

ForStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ForStatementContext.prototype.SemiColon = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.SemiColon);
  } else {
    return this.getToken(JSXParser.SemiColon, i);
  }
};

ForStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

ForStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

ForStatementContext.prototype.expressionSequence = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ExpressionSequenceContext);
  } else {
    return this.getTypedRuleContext(ExpressionSequenceContext, i);
  }
};

ForStatementContext.prototype.variableDeclarationList = function() {
  return this.getTypedRuleContext(VariableDeclarationListContext, 0);
};
ForStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterForStatement(this);
  }
};

ForStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitForStatement(this);
  }
};

ForStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitForStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ForInStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForInStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForInStatementContext.prototype.constructor = ForInStatementContext;

JSXParser.ForInStatementContext = ForInStatementContext;

ForInStatementContext.prototype.For = function() {
  return this.getToken(JSXParser.For, 0);
};

ForInStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ForInStatementContext.prototype.In = function() {
  return this.getToken(JSXParser.In, 0);
};

ForInStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ForInStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

ForInStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

ForInStatementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ForInStatementContext.prototype.variableDeclarationList = function() {
  return this.getTypedRuleContext(VariableDeclarationListContext, 0);
};
ForInStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterForInStatement(this);
  }
};

ForInStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitForInStatement(this);
  }
};

ForInStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitForInStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ForOfStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForOfStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForOfStatementContext.prototype.constructor = ForOfStatementContext;

JSXParser.ForOfStatementContext = ForOfStatementContext;

ForOfStatementContext.prototype.For = function() {
  return this.getToken(JSXParser.For, 0);
};

ForOfStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ForOfStatementContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

ForOfStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ForOfStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

ForOfStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

ForOfStatementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ForOfStatementContext.prototype.variableDeclarationList = function() {
  return this.getTypedRuleContext(VariableDeclarationListContext, 0);
};

ForOfStatementContext.prototype.Await = function() {
  return this.getToken(JSXParser.Await, 0);
};
ForOfStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterForOfStatement(this);
  }
};

ForOfStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitForOfStatement(this);
  }
};

ForOfStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitForOfStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.IterationStatementContext = IterationStatementContext;

JSXParser.prototype.iterationStatement = function() {
  var localctx = new IterationStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 42, JSXParser.RULE_iterationStatement);
  var _la = 0; // Token type
  try {
    this.state = 387;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);
    switch (la_) {
      case 1:
        localctx = new DoStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 331;
        this.match(JSXParser.Do);
        this.state = 332;
        this.statement();
        this.state = 333;
        this.match(JSXParser.While);
        this.state = 334;
        this.match(JSXParser.OpenParen);
        this.state = 335;
        this.expressionSequence();
        this.state = 336;
        this.match(JSXParser.CloseParen);
        this.state = 337;
        this.eos();
        break;

      case 2:
        localctx = new WhileStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 339;
        this.match(JSXParser.While);
        this.state = 340;
        this.match(JSXParser.OpenParen);
        this.state = 341;
        this.expressionSequence();
        this.state = 342;
        this.match(JSXParser.CloseParen);
        this.state = 343;
        this.statement();
        break;

      case 3:
        localctx = new ForStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 3);
        this.state = 345;
        this.match(JSXParser.For);
        this.state = 346;
        this.match(JSXParser.OpenParen);
        this.state = 349;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
        if(la_ === 1) {
          this.state = 347;
          this.expressionSequence();
        } else if(la_ === 2) {
          this.state = 348;
          this.variableDeclarationList();
        }
        this.state = 351;
        this.match(JSXParser.SemiColon);
        this.state = 353;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(
          (((_la - 4) & ~0x1f) == 0 &&
            ((1 << (_la - 4)) &
              ((1 << (JSXParser.RegularExpressionLiteral - 4)) |
                (1 << (JSXParser.OpenBracket - 4)) |
                (1 << (JSXParser.OpenParen - 4)) |
                (1 << (JSXParser.OpenBrace - 4)) |
                (1 << (JSXParser.PlusPlus - 4)) |
                (1 << (JSXParser.MinusMinus - 4)) |
                (1 << (JSXParser.Plus - 4)) |
                (1 << (JSXParser.Minus - 4)) |
                (1 << (JSXParser.BitNot - 4)) |
                (1 << (JSXParser.Not - 4)) |
                (1 << (JSXParser.LessThan - 4)))) !==
              0) ||
          (((_la - 59) & ~0x1f) == 0 &&
            ((1 << (_la - 59)) &
              ((1 << (JSXParser.NullLiteral - 59)) |
                (1 << (JSXParser.BooleanLiteral - 59)) |
                (1 << (JSXParser.DecimalLiteral - 59)) |
                (1 << (JSXParser.HexIntegerLiteral - 59)) |
                (1 << (JSXParser.OctalIntegerLiteral - 59)) |
                (1 << (JSXParser.OctalIntegerLiteral2 - 59)) |
                (1 << (JSXParser.BinaryIntegerLiteral - 59)) |
                (1 << (JSXParser.BigHexIntegerLiteral - 59)) |
                (1 << (JSXParser.BigOctalIntegerLiteral - 59)) |
                (1 << (JSXParser.BigBinaryIntegerLiteral - 59)) |
                (1 << (JSXParser.BigDecimalIntegerLiteral - 59)) |
                (1 << (JSXParser.Typeof - 59)) |
                (1 << (JSXParser.New - 59)) |
                (1 << (JSXParser.Void - 59)) |
                (1 << (JSXParser.Function - 59)) |
                (1 << (JSXParser.This - 59)))) !==
              0) ||
          (((_la - 93) & ~0x1f) == 0 &&
            ((1 << (_la - 93)) &
              ((1 << (JSXParser.Delete - 93)) |
                (1 << (JSXParser.Class - 93)) |
                (1 << (JSXParser.Super - 93)) |
                (1 << (JSXParser.Import - 93)) |
                (1 << (JSXParser.Async - 93)) |
                (1 << (JSXParser.Await - 93)) |
                (1 << (JSXParser.NonStrictLet - 93)) |
                (1 << (JSXParser.Yield - 93)) |
                (1 << (JSXParser.Identifier - 93)) |
                (1 << (JSXParser.StringLiteral - 93)) |
                (1 << (JSXParser.TemplateStringLiteral - 93)))) !==
              0)
        ) {
          this.state = 352;
          this.expressionSequence();
        }

        this.state = 355;
        this.match(JSXParser.SemiColon);
        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(
          (((_la - 4) & ~0x1f) == 0 &&
            ((1 << (_la - 4)) &
              ((1 << (JSXParser.RegularExpressionLiteral - 4)) |
                (1 << (JSXParser.OpenBracket - 4)) |
                (1 << (JSXParser.OpenParen - 4)) |
                (1 << (JSXParser.OpenBrace - 4)) |
                (1 << (JSXParser.PlusPlus - 4)) |
                (1 << (JSXParser.MinusMinus - 4)) |
                (1 << (JSXParser.Plus - 4)) |
                (1 << (JSXParser.Minus - 4)) |
                (1 << (JSXParser.BitNot - 4)) |
                (1 << (JSXParser.Not - 4)) |
                (1 << (JSXParser.LessThan - 4)))) !==
              0) ||
          (((_la - 59) & ~0x1f) == 0 &&
            ((1 << (_la - 59)) &
              ((1 << (JSXParser.NullLiteral - 59)) |
                (1 << (JSXParser.BooleanLiteral - 59)) |
                (1 << (JSXParser.DecimalLiteral - 59)) |
                (1 << (JSXParser.HexIntegerLiteral - 59)) |
                (1 << (JSXParser.OctalIntegerLiteral - 59)) |
                (1 << (JSXParser.OctalIntegerLiteral2 - 59)) |
                (1 << (JSXParser.BinaryIntegerLiteral - 59)) |
                (1 << (JSXParser.BigHexIntegerLiteral - 59)) |
                (1 << (JSXParser.BigOctalIntegerLiteral - 59)) |
                (1 << (JSXParser.BigBinaryIntegerLiteral - 59)) |
                (1 << (JSXParser.BigDecimalIntegerLiteral - 59)) |
                (1 << (JSXParser.Typeof - 59)) |
                (1 << (JSXParser.New - 59)) |
                (1 << (JSXParser.Void - 59)) |
                (1 << (JSXParser.Function - 59)) |
                (1 << (JSXParser.This - 59)))) !==
              0) ||
          (((_la - 93) & ~0x1f) == 0 &&
            ((1 << (_la - 93)) &
              ((1 << (JSXParser.Delete - 93)) |
                (1 << (JSXParser.Class - 93)) |
                (1 << (JSXParser.Super - 93)) |
                (1 << (JSXParser.Import - 93)) |
                (1 << (JSXParser.Async - 93)) |
                (1 << (JSXParser.Await - 93)) |
                (1 << (JSXParser.NonStrictLet - 93)) |
                (1 << (JSXParser.Yield - 93)) |
                (1 << (JSXParser.Identifier - 93)) |
                (1 << (JSXParser.StringLiteral - 93)) |
                (1 << (JSXParser.TemplateStringLiteral - 93)))) !==
              0)
        ) {
          this.state = 356;
          this.expressionSequence();
        }

        this.state = 359;
        this.match(JSXParser.CloseParen);
        this.state = 360;
        this.statement();
        break;

      case 4:
        localctx = new ForInStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 4);
        this.state = 361;
        this.match(JSXParser.For);
        this.state = 362;
        this.match(JSXParser.OpenParen);
        this.state = 365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 25, this._ctx);
        switch (la_) {
          case 1:
            this.state = 363;
            this.singleExpression(0);
            break;

          case 2:
            this.state = 364;
            this.variableDeclarationList();
            break;
        }
        this.state = 367;
        this.match(JSXParser.In);
        this.state = 368;
        this.expressionSequence();
        this.state = 369;
        this.match(JSXParser.CloseParen);
        this.state = 370;
        this.statement();
        break;

      case 5:
        localctx = new ForOfStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 5);
        this.state = 372;
        this.match(JSXParser.For);
        this.state = 374;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Await) {
          this.state = 373;
          this.match(JSXParser.Await);
        }

        this.state = 376;
        this.match(JSXParser.OpenParen);
        this.state = 379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
        switch (la_) {
          case 1:
            this.state = 377;
            this.singleExpression(0);
            break;

          case 2:
            this.state = 378;
            this.variableDeclarationList();
            break;
        }
        this.state = 381;
        this.identifier();
        this.state = 382;
        if(!this.p('of')) {
          throw new antlr4.error.FailedPredicateException(this, 'this.p("of")');
        }
        this.state = 383;
        this.expressionSequence();
        this.state = 384;
        this.match(JSXParser.CloseParen);
        this.state = 385;
        this.statement();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function VarModifierContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_varModifier;
  return this;
}

VarModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarModifierContext.prototype.constructor = VarModifierContext;

VarModifierContext.prototype.Var = function() {
  return this.getToken(JSXParser.Var, 0);
};

VarModifierContext.prototype.let = function() {
  return this.getTypedRuleContext(LetContext, 0);
};

VarModifierContext.prototype.Const = function() {
  return this.getToken(JSXParser.Const, 0);
};

VarModifierContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterVarModifier(this);
  }
};

VarModifierContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitVarModifier(this);
  }
};

VarModifierContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitVarModifier(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.VarModifierContext = VarModifierContext;

JSXParser.prototype.varModifier = function() {
  var localctx = new VarModifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 44, JSXParser.RULE_varModifier);
  try {
    this.state = 392;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Var:
        this.enterOuterAlt(localctx, 1);
        this.state = 389;
        this.match(JSXParser.Var);
        break;
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
        this.enterOuterAlt(localctx, 2);
        this.state = 390;
        this.let();
        break;
      case JSXParser.Const:
        this.enterOuterAlt(localctx, 3);
        this.state = 391;
        this.match(JSXParser.Const);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_continueStatement;
  return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
  return this.getToken(JSXParser.Continue, 0);
};

ContinueStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ContinueStatementContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterContinueStatement(this);
  }
};

ContinueStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitContinueStatement(this);
  }
};

ContinueStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitContinueStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ContinueStatementContext = ContinueStatementContext;

JSXParser.prototype.continueStatement = function() {
  var localctx = new ContinueStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 46, JSXParser.RULE_continueStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 394;
    this.match(JSXParser.Continue);
    this.state = 397;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
    if(la_ === 1) {
      this.state = 395;
      if(!this.notLineTerminator()) {
        throw new antlr4.error.FailedPredicateException(this, 'this.notLineTerminator()');
      }
      this.state = 396;
      this.identifier();
    }
    this.state = 399;
    this.eos();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_breakStatement;
  return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
  return this.getToken(JSXParser.Break, 0);
};

BreakStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

BreakStatementContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBreakStatement(this);
  }
};

BreakStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBreakStatement(this);
  }
};

BreakStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBreakStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.BreakStatementContext = BreakStatementContext;

JSXParser.prototype.breakStatement = function() {
  var localctx = new BreakStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 48, JSXParser.RULE_breakStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 401;
    this.match(JSXParser.Break);
    this.state = 404;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);
    if(la_ === 1) {
      this.state = 402;
      if(!this.notLineTerminator()) {
        throw new antlr4.error.FailedPredicateException(this, 'this.notLineTerminator()');
      }
      this.state = 403;
      this.identifier();
    }
    this.state = 406;
    this.eos();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_returnStatement;
  return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
  return this.getToken(JSXParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ReturnStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ReturnStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ReturnStatementContext.prototype.htmlElements = function() {
  return this.getTypedRuleContext(HtmlElementsContext, 0);
};

ReturnStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterReturnStatement(this);
  }
};

ReturnStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitReturnStatement(this);
  }
};

ReturnStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitReturnStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ReturnStatementContext = ReturnStatementContext;

JSXParser.prototype.returnStatement = function() {
  var localctx = new ReturnStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 50, JSXParser.RULE_returnStatement);
  try {
    this.state = 420;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 408;
        this.match(JSXParser.Return);
        this.state = 411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
        if(la_ === 1) {
          this.state = 409;
          if(!this.notLineTerminator()) {
            throw new antlr4.error.FailedPredicateException(this, 'this.notLineTerminator()');
          }
          this.state = 410;
          this.expressionSequence();
        }
        this.state = 413;
        this.eos();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 414;
        this.match(JSXParser.Return);
        this.state = 415;
        this.match(JSXParser.OpenParen);
        this.state = 416;
        this.htmlElements();
        this.state = 417;
        this.match(JSXParser.CloseParen);
        this.state = 418;
        this.eos();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function YieldStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_yieldStatement;
  return this;
}

YieldStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YieldStatementContext.prototype.constructor = YieldStatementContext;

YieldStatementContext.prototype.Yield = function() {
  return this.getToken(JSXParser.Yield, 0);
};

YieldStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

YieldStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

YieldStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterYieldStatement(this);
  }
};

YieldStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitYieldStatement(this);
  }
};

YieldStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitYieldStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.YieldStatementContext = YieldStatementContext;

JSXParser.prototype.yieldStatement = function() {
  var localctx = new YieldStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 52, JSXParser.RULE_yieldStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 422;
    this.match(JSXParser.Yield);
    this.state = 425;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
    if(la_ === 1) {
      this.state = 423;
      if(!this.notLineTerminator()) {
        throw new antlr4.error.FailedPredicateException(this, 'this.notLineTerminator()');
      }
      this.state = 424;
      this.expressionSequence();
    }
    this.state = 427;
    this.eos();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function WithStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_withStatement;
  return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
  return this.getToken(JSXParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

WithStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

WithStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

WithStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterWithStatement(this);
  }
};

WithStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitWithStatement(this);
  }
};

WithStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitWithStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.WithStatementContext = WithStatementContext;

JSXParser.prototype.withStatement = function() {
  var localctx = new WithStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 54, JSXParser.RULE_withStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 429;
    this.match(JSXParser.With);
    this.state = 430;
    this.match(JSXParser.OpenParen);
    this.state = 431;
    this.expressionSequence();
    this.state = 432;
    this.match(JSXParser.CloseParen);
    this.state = 433;
    this.statement();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_switchStatement;
  return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
  return this.getToken(JSXParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

SwitchStatementContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
  return this.getTypedRuleContext(CaseBlockContext, 0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterSwitchStatement(this);
  }
};

SwitchStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitSwitchStatement(this);
  }
};

SwitchStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitSwitchStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.SwitchStatementContext = SwitchStatementContext;

JSXParser.prototype.switchStatement = function() {
  var localctx = new SwitchStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 56, JSXParser.RULE_switchStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 435;
    this.match(JSXParser.Switch);
    this.state = 436;
    this.match(JSXParser.OpenParen);
    this.state = 437;
    this.expressionSequence();
    this.state = 438;
    this.match(JSXParser.CloseParen);
    this.state = 439;
    this.caseBlock();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function CaseBlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_caseBlock;
  return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(CaseClausesContext);
  } else {
    return this.getTypedRuleContext(CaseClausesContext, i);
  }
};

CaseBlockContext.prototype.defaultClause = function() {
  return this.getTypedRuleContext(DefaultClauseContext, 0);
};

CaseBlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterCaseBlock(this);
  }
};

CaseBlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitCaseBlock(this);
  }
};

CaseBlockContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitCaseBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.CaseBlockContext = CaseBlockContext;

JSXParser.prototype.caseBlock = function() {
  var localctx = new CaseBlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 58, JSXParser.RULE_caseBlock);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 441;
    this.match(JSXParser.OpenBrace);
    this.state = 443;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Case) {
      this.state = 442;
      this.caseClauses();
    }

    this.state = 449;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Default) {
      this.state = 445;
      this.defaultClause();
      this.state = 447;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === JSXParser.Case) {
        this.state = 446;
        this.caseClauses();
      }
    }

    this.state = 451;
    this.match(JSXParser.CloseBrace);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function CaseClausesContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_caseClauses;
  return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(CaseClauseContext);
  } else {
    return this.getTypedRuleContext(CaseClauseContext, i);
  }
};

CaseClausesContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterCaseClauses(this);
  }
};

CaseClausesContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitCaseClauses(this);
  }
};

CaseClausesContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitCaseClauses(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.CaseClausesContext = CaseClausesContext;

JSXParser.prototype.caseClauses = function() {
  var localctx = new CaseClausesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 60, JSXParser.RULE_caseClauses);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 454;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 453;
      this.caseClause();
      this.state = 456;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while(_la === JSXParser.Case);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function CaseClauseContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_caseClause;
  return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
  return this.getToken(JSXParser.Case, 0);
};

CaseClauseContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

CaseClauseContext.prototype.Colon = function() {
  return this.getToken(JSXParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
  return this.getTypedRuleContext(StatementListContext, 0);
};

CaseClauseContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterCaseClause(this);
  }
};

CaseClauseContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitCaseClause(this);
  }
};

CaseClauseContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitCaseClause(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.CaseClauseContext = CaseClauseContext;

JSXParser.prototype.caseClause = function() {
  var localctx = new CaseClauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 62, JSXParser.RULE_caseClause);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 458;
    this.match(JSXParser.Case);
    this.state = 459;
    this.expressionSequence();
    this.state = 460;
    this.match(JSXParser.Colon);
    this.state = 462;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
    if(la_ === 1) {
      this.state = 461;
      this.statementList();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DefaultClauseContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_defaultClause;
  return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
  return this.getToken(JSXParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
  return this.getToken(JSXParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
  return this.getTypedRuleContext(StatementListContext, 0);
};

DefaultClauseContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterDefaultClause(this);
  }
};

DefaultClauseContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitDefaultClause(this);
  }
};

DefaultClauseContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitDefaultClause(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.DefaultClauseContext = DefaultClauseContext;

JSXParser.prototype.defaultClause = function() {
  var localctx = new DefaultClauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 64, JSXParser.RULE_defaultClause);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 464;
    this.match(JSXParser.Default);
    this.state = 465;
    this.match(JSXParser.Colon);
    this.state = 467;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
    if(la_ === 1) {
      this.state = 466;
      this.statementList();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function LabelledStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_labelledStatement;
  return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

LabelledStatementContext.prototype.Colon = function() {
  return this.getToken(JSXParser.Colon, 0);
};

LabelledStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

LabelledStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterLabelledStatement(this);
  }
};

LabelledStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitLabelledStatement(this);
  }
};

LabelledStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitLabelledStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.LabelledStatementContext = LabelledStatementContext;

JSXParser.prototype.labelledStatement = function() {
  var localctx = new LabelledStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 66, JSXParser.RULE_labelledStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 469;
    this.identifier();
    this.state = 470;
    this.match(JSXParser.Colon);
    this.state = 471;
    this.statement();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_throwStatement;
  return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
  return this.getToken(JSXParser.Throw, 0);
};

ThrowStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ThrowStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterThrowStatement(this);
  }
};

ThrowStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitThrowStatement(this);
  }
};

ThrowStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitThrowStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ThrowStatementContext = ThrowStatementContext;

JSXParser.prototype.throwStatement = function() {
  var localctx = new ThrowStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 68, JSXParser.RULE_throwStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 473;
    this.match(JSXParser.Throw);
    this.state = 474;
    if(!this.notLineTerminator()) {
      throw new antlr4.error.FailedPredicateException(this, 'this.notLineTerminator()');
    }
    this.state = 475;
    this.expressionSequence();
    this.state = 476;
    this.eos();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_tryStatement;
  return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
  return this.getToken(JSXParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

TryStatementContext.prototype.catchProduction = function() {
  return this.getTypedRuleContext(CatchProductionContext, 0);
};

TryStatementContext.prototype.finallyProduction = function() {
  return this.getTypedRuleContext(FinallyProductionContext, 0);
};

TryStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterTryStatement(this);
  }
};

TryStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitTryStatement(this);
  }
};

TryStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitTryStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.TryStatementContext = TryStatementContext;

JSXParser.prototype.tryStatement = function() {
  var localctx = new TryStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 70, JSXParser.RULE_tryStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 478;
    this.match(JSXParser.Try);
    this.state = 479;
    this.block();
    this.state = 485;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Catch:
        this.state = 480;
        this.catchProduction();
        this.state = 482;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
        if(la_ === 1) {
          this.state = 481;
          this.finallyProduction();
        }
        break;
      case JSXParser.Finally:
        this.state = 484;
        this.finallyProduction();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function CatchProductionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_catchProduction;
  return this;
}

CatchProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchProductionContext.prototype.constructor = CatchProductionContext;

CatchProductionContext.prototype.Catch = function() {
  return this.getToken(JSXParser.Catch, 0);
};

CatchProductionContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

CatchProductionContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

CatchProductionContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

CatchProductionContext.prototype.assignable = function() {
  return this.getTypedRuleContext(AssignableContext, 0);
};

CatchProductionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterCatchProduction(this);
  }
};

CatchProductionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitCatchProduction(this);
  }
};

CatchProductionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitCatchProduction(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.CatchProductionContext = CatchProductionContext;

JSXParser.prototype.catchProduction = function() {
  var localctx = new CatchProductionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 72, JSXParser.RULE_catchProduction);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 487;
    this.match(JSXParser.Catch);
    this.state = 493;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.OpenParen) {
      this.state = 488;
      this.match(JSXParser.OpenParen);
      this.state = 490;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === JSXParser.OpenBracket || _la === JSXParser.OpenBrace || (((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
        this.state = 489;
        this.assignable();
      }

      this.state = 492;
      this.match(JSXParser.CloseParen);
    }

    this.state = 495;
    this.block();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function FinallyProductionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_finallyProduction;
  return this;
}

FinallyProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyProductionContext.prototype.constructor = FinallyProductionContext;

FinallyProductionContext.prototype.Finally = function() {
  return this.getToken(JSXParser.Finally, 0);
};

FinallyProductionContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

FinallyProductionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFinallyProduction(this);
  }
};

FinallyProductionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFinallyProduction(this);
  }
};

FinallyProductionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFinallyProduction(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.FinallyProductionContext = FinallyProductionContext;

JSXParser.prototype.finallyProduction = function() {
  var localctx = new FinallyProductionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 74, JSXParser.RULE_finallyProduction);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 497;
    this.match(JSXParser.Finally);
    this.state = 498;
    this.block();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DebuggerStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_debuggerStatement;
  return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
  return this.getToken(JSXParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

DebuggerStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterDebuggerStatement(this);
  }
};

DebuggerStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitDebuggerStatement(this);
  }
};

DebuggerStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitDebuggerStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.DebuggerStatementContext = DebuggerStatementContext;

JSXParser.prototype.debuggerStatement = function() {
  var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 76, JSXParser.RULE_debuggerStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 500;
    this.match(JSXParser.Debugger);
    this.state = 501;
    this.eos();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_functionDeclaration;
  return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
  return this.getToken(JSXParser.Function, 0);
};

FunctionDeclarationContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.Async = function() {
  return this.getToken(JSXParser.Async, 0);
};

FunctionDeclarationContext.prototype.Multiply = function() {
  return this.getToken(JSXParser.Multiply, 0);
};

FunctionDeclarationContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFunctionDeclaration(this);
  }
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFunctionDeclaration(this);
  }
};

FunctionDeclarationContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFunctionDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.FunctionDeclarationContext = FunctionDeclarationContext;

JSXParser.prototype.functionDeclaration = function() {
  var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 78, JSXParser.RULE_functionDeclaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 504;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Async) {
      this.state = 503;
      this.match(JSXParser.Async);
    }

    this.state = 506;
    this.match(JSXParser.Function);
    this.state = 508;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Multiply) {
      this.state = 507;
      this.match(JSXParser.Multiply);
    }

    this.state = 510;
    this.identifier();
    this.state = 511;
    this.match(JSXParser.OpenParen);
    this.state = 513;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << JSXParser.OpenBracket) | (1 << JSXParser.OpenBrace) | (1 << JSXParser.Ellipsis))) !== 0) || (((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
      this.state = 512;
      this.formalParameterList();
    }

    this.state = 515;
    this.match(JSXParser.CloseParen);
    this.state = 516;
    this.match(JSXParser.OpenBrace);
    this.state = 517;
    this.functionBody();
    this.state = 518;
    this.match(JSXParser.CloseBrace);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_classDeclaration;
  return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
  return this.getToken(JSXParser.Class, 0);
};

ClassDeclarationContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

ClassDeclarationContext.prototype.classTail = function() {
  return this.getTypedRuleContext(ClassTailContext, 0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterClassDeclaration(this);
  }
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitClassDeclaration(this);
  }
};

ClassDeclarationContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitClassDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ClassDeclarationContext = ClassDeclarationContext;

JSXParser.prototype.classDeclaration = function() {
  var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 80, JSXParser.RULE_classDeclaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 520;
    this.match(JSXParser.Class);
    this.state = 521;
    this.identifier();
    this.state = 522;
    this.classTail();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ClassTailContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_classTail;
  return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

ClassTailContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

ClassTailContext.prototype.Extends = function() {
  return this.getToken(JSXParser.Extends, 0);
};

ClassTailContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ClassTailContext.prototype.classElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ClassElementContext);
  } else {
    return this.getTypedRuleContext(ClassElementContext, i);
  }
};

ClassTailContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterClassTail(this);
  }
};

ClassTailContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitClassTail(this);
  }
};

ClassTailContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitClassTail(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ClassTailContext = ClassTailContext;

JSXParser.prototype.classTail = function() {
  var localctx = new ClassTailContext(this, this._ctx, this.state);
  this.enterRule(localctx, 82, JSXParser.RULE_classTail);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 526;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Extends) {
      this.state = 524;
      this.match(JSXParser.Extends);
      this.state = 525;
      this.singleExpression(0);
    }

    this.state = 528;
    this.match(JSXParser.OpenBrace);
    this.state = 532;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 529;
        this.classElement();
      }
      this.state = 534;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
    }

    this.state = 535;
    this.match(JSXParser.CloseBrace);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ClassElementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_classElement;
  return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.methodDefinition = function() {
  return this.getTypedRuleContext(MethodDefinitionContext, 0);
};

ClassElementContext.prototype.assignable = function() {
  return this.getTypedRuleContext(AssignableContext, 0);
};

ClassElementContext.prototype.Assign = function() {
  return this.getToken(JSXParser.Assign, 0);
};

ClassElementContext.prototype.objectLiteral = function() {
  return this.getTypedRuleContext(ObjectLiteralContext, 0);
};

ClassElementContext.prototype.SemiColon = function() {
  return this.getToken(JSXParser.SemiColon, 0);
};

ClassElementContext.prototype.Static = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Static);
  } else {
    return this.getToken(JSXParser.Static, i);
  }
};

ClassElementContext.prototype.identifier = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

ClassElementContext.prototype.Async = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Async);
  } else {
    return this.getToken(JSXParser.Async, i);
  }
};

ClassElementContext.prototype.emptyStatement = function() {
  return this.getTypedRuleContext(EmptyStatementContext, 0);
};

ClassElementContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

ClassElementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ClassElementContext.prototype.Hashtag = function() {
  return this.getToken(JSXParser.Hashtag, 0);
};

ClassElementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterClassElement(this);
  }
};

ClassElementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitClassElement(this);
  }
};

ClassElementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitClassElement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ClassElementContext = ClassElementContext;

JSXParser.prototype.classElement = function() {
  var localctx = new ClassElementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 84, JSXParser.RULE_classElement);
  var _la = 0; // Token type
  try {
    this.state = 562;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
        while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if(_alt === 1) {
            this.state = 541;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 50, this._ctx);
            switch (la_) {
              case 1:
                this.state = 537;
                this.match(JSXParser.Static);
                break;

              case 2:
                this.state = 538;
                if(!this.n('static')) {
                  throw new antlr4.error.FailedPredicateException(this, 'this.n("static")');
                }
                this.state = 539;
                this.identifier();
                break;

              case 3:
                this.state = 540;
                this.match(JSXParser.Async);
                break;
            }
          }
          this.state = 545;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
        }

        this.state = 552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx);
        switch (la_) {
          case 1:
            this.state = 546;
            this.methodDefinition();
            break;

          case 2:
            this.state = 547;
            this.assignable();
            this.state = 548;
            this.match(JSXParser.Assign);
            this.state = 549;
            this.objectLiteral();
            this.state = 550;
            this.match(JSXParser.SemiColon);
            break;
        }
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 554;
        this.emptyStatement();
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Hashtag) {
          this.state = 555;
          this.match(JSXParser.Hashtag);
        }

        this.state = 558;
        this.propertyName();
        this.state = 559;
        this.match(JSXParser.Assign);
        this.state = 560;
        this.singleExpression(0);
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_methodDefinition;
  return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.Multiply = function() {
  return this.getToken(JSXParser.Multiply, 0);
};

MethodDefinitionContext.prototype.Hashtag = function() {
  return this.getToken(JSXParser.Hashtag, 0);
};

MethodDefinitionContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};

MethodDefinitionContext.prototype.getter = function() {
  return this.getTypedRuleContext(GetterContext, 0);
};

MethodDefinitionContext.prototype.setter = function() {
  return this.getTypedRuleContext(SetterContext, 0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterMethodDefinition(this);
  }
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitMethodDefinition(this);
  }
};

MethodDefinitionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitMethodDefinition(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.MethodDefinitionContext = MethodDefinitionContext;

JSXParser.prototype.methodDefinition = function() {
  var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 86, JSXParser.RULE_methodDefinition);
  var _la = 0; // Token type
  try {
    this.state = 609;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Multiply) {
          this.state = 564;
          this.match(JSXParser.Multiply);
        }

        this.state = 568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Hashtag) {
          this.state = 567;
          this.match(JSXParser.Hashtag);
        }

        this.state = 570;
        this.propertyName();
        this.state = 571;
        this.match(JSXParser.OpenParen);
        this.state = 573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << JSXParser.OpenBracket) | (1 << JSXParser.OpenBrace) | (1 << JSXParser.Ellipsis))) !== 0) || (((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
          this.state = 572;
          this.formalParameterList();
        }

        this.state = 575;
        this.match(JSXParser.CloseParen);
        this.state = 576;
        this.match(JSXParser.OpenBrace);
        this.state = 577;
        this.functionBody();
        this.state = 578;
        this.match(JSXParser.CloseBrace);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 581;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Multiply) {
          this.state = 580;
          this.match(JSXParser.Multiply);
        }

        this.state = 584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Hashtag) {
          this.state = 583;
          this.match(JSXParser.Hashtag);
        }

        this.state = 586;
        this.getter();
        this.state = 587;
        this.match(JSXParser.OpenParen);
        this.state = 588;
        this.match(JSXParser.CloseParen);
        this.state = 589;
        this.match(JSXParser.OpenBrace);
        this.state = 590;
        this.functionBody();
        this.state = 591;
        this.match(JSXParser.CloseBrace);
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Multiply) {
          this.state = 593;
          this.match(JSXParser.Multiply);
        }

        this.state = 597;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Hashtag) {
          this.state = 596;
          this.match(JSXParser.Hashtag);
        }

        this.state = 599;
        this.setter();
        this.state = 600;
        this.match(JSXParser.OpenParen);
        this.state = 602;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << JSXParser.OpenBracket) | (1 << JSXParser.OpenBrace) | (1 << JSXParser.Ellipsis))) !== 0) || (((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
          this.state = 601;
          this.formalParameterList();
        }

        this.state = 604;
        this.match(JSXParser.CloseParen);
        this.state = 605;
        this.match(JSXParser.OpenBrace);
        this.state = 606;
        this.functionBody();
        this.state = 607;
        this.match(JSXParser.CloseBrace);
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_formalParameterList;
  return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameterArg = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(FormalParameterArgContext);
  } else {
    return this.getTypedRuleContext(FormalParameterArgContext, i);
  }
};

FormalParameterListContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Comma);
  } else {
    return this.getToken(JSXParser.Comma, i);
  }
};

FormalParameterListContext.prototype.lastFormalParameterArg = function() {
  return this.getTypedRuleContext(LastFormalParameterArgContext, 0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFormalParameterList(this);
  }
};

FormalParameterListContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFormalParameterList(this);
  }
};

FormalParameterListContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFormalParameterList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.FormalParameterListContext = FormalParameterListContext;

JSXParser.prototype.formalParameterList = function() {
  var localctx = new FormalParameterListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 88, JSXParser.RULE_formalParameterList);
  var _la = 0; // Token type
  try {
    this.state = 624;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.OpenBracket:
      case JSXParser.OpenBrace:
      case JSXParser.Async:
      case JSXParser.NonStrictLet:
      case JSXParser.Identifier:
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        this.formalParameterArg();
        this.state = 616;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
        while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if(_alt === 1) {
            this.state = 612;
            this.match(JSXParser.Comma);
            this.state = 613;
            this.formalParameterArg();
          }
          this.state = 618;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
        }

        this.state = 621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Comma) {
          this.state = 619;
          this.match(JSXParser.Comma);
          this.state = 620;
          this.lastFormalParameterArg();
        }

        break;
      case JSXParser.Ellipsis:
        this.enterOuterAlt(localctx, 2);
        this.state = 623;
        this.lastFormalParameterArg();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function FormalParameterArgContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_formalParameterArg;
  return this;
}

FormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterArgContext.prototype.constructor = FormalParameterArgContext;

FormalParameterArgContext.prototype.assignable = function() {
  return this.getTypedRuleContext(AssignableContext, 0);
};

FormalParameterArgContext.prototype.Assign = function() {
  return this.getToken(JSXParser.Assign, 0);
};

FormalParameterArgContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

FormalParameterArgContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFormalParameterArg(this);
  }
};

FormalParameterArgContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFormalParameterArg(this);
  }
};

FormalParameterArgContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFormalParameterArg(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.FormalParameterArgContext = FormalParameterArgContext;

JSXParser.prototype.formalParameterArg = function() {
  var localctx = new FormalParameterArgContext(this, this._ctx, this.state);
  this.enterRule(localctx, 90, JSXParser.RULE_formalParameterArg);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 626;
    this.assignable();
    this.state = 629;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Assign) {
      this.state = 627;
      this.match(JSXParser.Assign);
      this.state = 628;
      this.singleExpression(0);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function LastFormalParameterArgContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_lastFormalParameterArg;
  return this;
}

LastFormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterArgContext.prototype.constructor = LastFormalParameterArgContext;

LastFormalParameterArgContext.prototype.Ellipsis = function() {
  return this.getToken(JSXParser.Ellipsis, 0);
};

LastFormalParameterArgContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

LastFormalParameterArgContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterLastFormalParameterArg(this);
  }
};

LastFormalParameterArgContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitLastFormalParameterArg(this);
  }
};

LastFormalParameterArgContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitLastFormalParameterArg(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.LastFormalParameterArgContext = LastFormalParameterArgContext;

JSXParser.prototype.lastFormalParameterArg = function() {
  var localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
  this.enterRule(localctx, 92, JSXParser.RULE_lastFormalParameterArg);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 631;
    this.match(JSXParser.Ellipsis);
    this.state = 632;
    this.singleExpression(0);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function FunctionBodyContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_functionBody;
  return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.sourceElements = function() {
  return this.getTypedRuleContext(SourceElementsContext, 0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFunctionBody(this);
  }
};

FunctionBodyContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFunctionBody(this);
  }
};

FunctionBodyContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFunctionBody(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.FunctionBodyContext = FunctionBodyContext;

JSXParser.prototype.functionBody = function() {
  var localctx = new FunctionBodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 94, JSXParser.RULE_functionBody);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 635;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
    if(la_ === 1) {
      this.state = 634;
      this.sourceElements();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SourceElementsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_sourceElements;
  return this;
}

SourceElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementsContext.prototype.constructor = SourceElementsContext;

SourceElementsContext.prototype.sourceElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SourceElementContext);
  } else {
    return this.getTypedRuleContext(SourceElementContext, i);
  }
};

SourceElementsContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterSourceElements(this);
  }
};

SourceElementsContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitSourceElements(this);
  }
};

SourceElementsContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitSourceElements(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.SourceElementsContext = SourceElementsContext;

JSXParser.prototype.sourceElements = function() {
  var localctx = new SourceElementsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 96, JSXParser.RULE_sourceElements);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 638;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 637;
          this.sourceElement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 640;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 69, this._ctx);
    } while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArrayLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_arrayLiteral;
  return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
  return this.getToken(JSXParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.elementList = function() {
  return this.getTypedRuleContext(ElementListContext, 0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
  return this.getToken(JSXParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArrayLiteral(this);
  }
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArrayLiteral(this);
  }
};

ArrayLiteralContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArrayLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ArrayLiteralContext = ArrayLiteralContext;

JSXParser.prototype.arrayLiteral = function() {
  var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 98, JSXParser.RULE_arrayLiteral);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 642;
    this.match(JSXParser.OpenBracket);
    this.state = 643;
    this.elementList();
    this.state = 644;
    this.match(JSXParser.CloseBracket);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ElementListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_elementList;
  return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Comma);
  } else {
    return this.getToken(JSXParser.Comma, i);
  }
};

ElementListContext.prototype.arrayElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ArrayElementContext);
  } else {
    return this.getTypedRuleContext(ArrayElementContext, i);
  }
};

ElementListContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterElementList(this);
  }
};

ElementListContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitElementList(this);
  }
};

ElementListContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitElementList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ElementListContext = ElementListContext;

JSXParser.prototype.elementList = function() {
  var localctx = new ElementListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 100, JSXParser.RULE_elementList);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 649;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 70, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 646;
        this.match(JSXParser.Comma);
      }
      this.state = 651;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 70, this._ctx);
    }

    this.state = 653;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(
      (((_la - 4) & ~0x1f) == 0 &&
        ((1 << (_la - 4)) &
          ((1 << (JSXParser.RegularExpressionLiteral - 4)) |
            (1 << (JSXParser.OpenBracket - 4)) |
            (1 << (JSXParser.OpenParen - 4)) |
            (1 << (JSXParser.OpenBrace - 4)) |
            (1 << (JSXParser.Ellipsis - 4)) |
            (1 << (JSXParser.PlusPlus - 4)) |
            (1 << (JSXParser.MinusMinus - 4)) |
            (1 << (JSXParser.Plus - 4)) |
            (1 << (JSXParser.Minus - 4)) |
            (1 << (JSXParser.BitNot - 4)) |
            (1 << (JSXParser.Not - 4)) |
            (1 << (JSXParser.LessThan - 4)))) !==
          0) ||
      (((_la - 59) & ~0x1f) == 0 &&
        ((1 << (_la - 59)) &
          ((1 << (JSXParser.NullLiteral - 59)) |
            (1 << (JSXParser.BooleanLiteral - 59)) |
            (1 << (JSXParser.DecimalLiteral - 59)) |
            (1 << (JSXParser.HexIntegerLiteral - 59)) |
            (1 << (JSXParser.OctalIntegerLiteral - 59)) |
            (1 << (JSXParser.OctalIntegerLiteral2 - 59)) |
            (1 << (JSXParser.BinaryIntegerLiteral - 59)) |
            (1 << (JSXParser.BigHexIntegerLiteral - 59)) |
            (1 << (JSXParser.BigOctalIntegerLiteral - 59)) |
            (1 << (JSXParser.BigBinaryIntegerLiteral - 59)) |
            (1 << (JSXParser.BigDecimalIntegerLiteral - 59)) |
            (1 << (JSXParser.Typeof - 59)) |
            (1 << (JSXParser.New - 59)) |
            (1 << (JSXParser.Void - 59)) |
            (1 << (JSXParser.Function - 59)) |
            (1 << (JSXParser.This - 59)))) !==
          0) ||
      (((_la - 93) & ~0x1f) == 0 &&
        ((1 << (_la - 93)) &
          ((1 << (JSXParser.Delete - 93)) |
            (1 << (JSXParser.Class - 93)) |
            (1 << (JSXParser.Super - 93)) |
            (1 << (JSXParser.Import - 93)) |
            (1 << (JSXParser.Async - 93)) |
            (1 << (JSXParser.Await - 93)) |
            (1 << (JSXParser.NonStrictLet - 93)) |
            (1 << (JSXParser.Yield - 93)) |
            (1 << (JSXParser.Identifier - 93)) |
            (1 << (JSXParser.StringLiteral - 93)) |
            (1 << (JSXParser.TemplateStringLiteral - 93)))) !==
          0)
    ) {
      this.state = 652;
      this.arrayElement();
    }

    this.state = 663;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 73, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 655;
          this.match(JSXParser.Comma);
          this.state = 658;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while(_la === JSXParser.Comma);
        this.state = 660;
        this.arrayElement();
      }
      this.state = 665;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 73, this._ctx);
    }

    this.state = 669;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while(_la === JSXParser.Comma) {
      this.state = 666;
      this.match(JSXParser.Comma);
      this.state = 671;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArrayElementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_arrayElement;
  return this;
}

ArrayElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayElementContext.prototype.constructor = ArrayElementContext;

ArrayElementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArrayElementContext.prototype.Ellipsis = function() {
  return this.getToken(JSXParser.Ellipsis, 0);
};

ArrayElementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArrayElement(this);
  }
};

ArrayElementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArrayElement(this);
  }
};

ArrayElementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArrayElement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ArrayElementContext = ArrayElementContext;

JSXParser.prototype.arrayElement = function() {
  var localctx = new ArrayElementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 102, JSXParser.RULE_arrayElement);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 673;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Ellipsis) {
      this.state = 672;
      this.match(JSXParser.Ellipsis);
    }

    this.state = 675;
    this.singleExpression(0);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PropertyAssignmentContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_propertyAssignment;
  return this;
}

PropertyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAssignmentContext.prototype.constructor = PropertyAssignmentContext;

PropertyAssignmentContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PropertyExpressionAssignmentContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyExpressionAssignmentContext.prototype.constructor = PropertyExpressionAssignmentContext;

JSXParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

PropertyExpressionAssignmentContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

PropertyExpressionAssignmentContext.prototype.Colon = function() {
  return this.getToken(JSXParser.Colon, 0);
};

PropertyExpressionAssignmentContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
PropertyExpressionAssignmentContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPropertyExpressionAssignment(this);
  }
};

PropertyExpressionAssignmentContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPropertyExpressionAssignment(this);
  }
};

PropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPropertyExpressionAssignment(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ComputedPropertyExpressionAssignmentContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ComputedPropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
ComputedPropertyExpressionAssignmentContext.prototype.constructor = ComputedPropertyExpressionAssignmentContext;

JSXParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

ComputedPropertyExpressionAssignmentContext.prototype.OpenBracket = function() {
  return this.getToken(JSXParser.OpenBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

ComputedPropertyExpressionAssignmentContext.prototype.CloseBracket = function() {
  return this.getToken(JSXParser.CloseBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.Colon = function() {
  return this.getToken(JSXParser.Colon, 0);
};
ComputedPropertyExpressionAssignmentContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterComputedPropertyExpressionAssignment(this);
  }
};

ComputedPropertyExpressionAssignmentContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitComputedPropertyExpressionAssignment(this);
  }
};

ComputedPropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitComputedPropertyExpressionAssignment(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PropertyShorthandContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertyShorthandContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyShorthandContext.prototype.constructor = PropertyShorthandContext;

JSXParser.PropertyShorthandContext = PropertyShorthandContext;

PropertyShorthandContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PropertyShorthandContext.prototype.Ellipsis = function() {
  return this.getToken(JSXParser.Ellipsis, 0);
};
PropertyShorthandContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPropertyShorthand(this);
  }
};

PropertyShorthandContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPropertyShorthand(this);
  }
};

PropertyShorthandContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPropertyShorthand(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PropertySetterContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertySetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertySetterContext.prototype.constructor = PropertySetterContext;

JSXParser.PropertySetterContext = PropertySetterContext;

PropertySetterContext.prototype.setter = function() {
  return this.getTypedRuleContext(SetterContext, 0);
};

PropertySetterContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

PropertySetterContext.prototype.formalParameterArg = function() {
  return this.getTypedRuleContext(FormalParameterArgContext, 0);
};

PropertySetterContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

PropertySetterContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

PropertySetterContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

PropertySetterContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};
PropertySetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPropertySetter(this);
  }
};

PropertySetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPropertySetter(this);
  }
};

PropertySetterContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPropertySetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PropertyGetterContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertyGetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyGetterContext.prototype.constructor = PropertyGetterContext;

JSXParser.PropertyGetterContext = PropertyGetterContext;

PropertyGetterContext.prototype.getter = function() {
  return this.getTypedRuleContext(GetterContext, 0);
};

PropertyGetterContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

PropertyGetterContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

PropertyGetterContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

PropertyGetterContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

PropertyGetterContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};
PropertyGetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPropertyGetter(this);
  }
};

PropertyGetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPropertyGetter(this);
  }
};

PropertyGetterContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPropertyGetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function FunctionPropertyContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

FunctionPropertyContext.prototype = Object.create(PropertyAssignmentContext.prototype);
FunctionPropertyContext.prototype.constructor = FunctionPropertyContext;

JSXParser.FunctionPropertyContext = FunctionPropertyContext;

FunctionPropertyContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

FunctionPropertyContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

FunctionPropertyContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

FunctionPropertyContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

FunctionPropertyContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

FunctionPropertyContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

FunctionPropertyContext.prototype.Async = function() {
  return this.getToken(JSXParser.Async, 0);
};

FunctionPropertyContext.prototype.Multiply = function() {
  return this.getToken(JSXParser.Multiply, 0);
};

FunctionPropertyContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};
FunctionPropertyContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFunctionProperty(this);
  }
};

FunctionPropertyContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFunctionProperty(this);
  }
};

FunctionPropertyContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFunctionProperty(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.PropertyAssignmentContext = PropertyAssignmentContext;

JSXParser.prototype.propertyAssignment = function() {
  var localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 104, JSXParser.RULE_propertyAssignment);
  var _la = 0; // Token type
  try {
    this.state = 722;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
    switch (la_) {
      case 1:
        localctx = new PropertyExpressionAssignmentContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this.propertyName();
        this.state = 678;
        this.match(JSXParser.Colon);
        this.state = 679;
        this.singleExpression(0);
        break;

      case 2:
        localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 681;
        this.match(JSXParser.OpenBracket);
        this.state = 682;
        this.singleExpression(0);
        this.state = 683;
        this.match(JSXParser.CloseBracket);
        this.state = 684;
        this.match(JSXParser.Colon);
        this.state = 685;
        this.singleExpression(0);
        break;

      case 3:
        localctx = new FunctionPropertyContext(this, localctx);
        this.enterOuterAlt(localctx, 3);
        this.state = 688;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
        if(la_ === 1) {
          this.state = 687;
          this.match(JSXParser.Async);
        }
        this.state = 691;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Multiply) {
          this.state = 690;
          this.match(JSXParser.Multiply);
        }

        this.state = 693;
        this.propertyName();
        this.state = 694;
        this.match(JSXParser.OpenParen);
        this.state = 696;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << JSXParser.OpenBracket) | (1 << JSXParser.OpenBrace) | (1 << JSXParser.Ellipsis))) !== 0) || (((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
          this.state = 695;
          this.formalParameterList();
        }

        this.state = 698;
        this.match(JSXParser.CloseParen);
        this.state = 699;
        this.match(JSXParser.OpenBrace);
        this.state = 700;
        this.functionBody();
        this.state = 701;
        this.match(JSXParser.CloseBrace);
        break;

      case 4:
        localctx = new PropertyGetterContext(this, localctx);
        this.enterOuterAlt(localctx, 4);
        this.state = 703;
        this.getter();
        this.state = 704;
        this.match(JSXParser.OpenParen);
        this.state = 705;
        this.match(JSXParser.CloseParen);
        this.state = 706;
        this.match(JSXParser.OpenBrace);
        this.state = 707;
        this.functionBody();
        this.state = 708;
        this.match(JSXParser.CloseBrace);
        break;

      case 5:
        localctx = new PropertySetterContext(this, localctx);
        this.enterOuterAlt(localctx, 5);
        this.state = 710;
        this.setter();
        this.state = 711;
        this.match(JSXParser.OpenParen);
        this.state = 712;
        this.formalParameterArg();
        this.state = 713;
        this.match(JSXParser.CloseParen);
        this.state = 714;
        this.match(JSXParser.OpenBrace);
        this.state = 715;
        this.functionBody();
        this.state = 716;
        this.match(JSXParser.CloseBrace);
        break;

      case 6:
        localctx = new PropertyShorthandContext(this, localctx);
        this.enterOuterAlt(localctx, 6);
        this.state = 719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Ellipsis) {
          this.state = 718;
          this.match(JSXParser.Ellipsis);
        }

        this.state = 721;
        this.singleExpression(0);
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PropertyNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_propertyName;
  return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.identifierName = function() {
  return this.getTypedRuleContext(IdentifierNameContext, 0);
};

PropertyNameContext.prototype.StringLiteral = function() {
  return this.getToken(JSXParser.StringLiteral, 0);
};

PropertyNameContext.prototype.numericLiteral = function() {
  return this.getTypedRuleContext(NumericLiteralContext, 0);
};

PropertyNameContext.prototype.OpenBracket = function() {
  return this.getToken(JSXParser.OpenBracket, 0);
};

PropertyNameContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PropertyNameContext.prototype.CloseBracket = function() {
  return this.getToken(JSXParser.CloseBracket, 0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPropertyName(this);
  }
};

PropertyNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPropertyName(this);
  }
};

PropertyNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPropertyName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.PropertyNameContext = PropertyNameContext;

JSXParser.prototype.propertyName = function() {
  var localctx = new PropertyNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 106, JSXParser.RULE_propertyName);
  try {
    this.state = 731;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.NullLiteral:
      case JSXParser.BooleanLiteral:
      case JSXParser.Break:
      case JSXParser.Do:
      case JSXParser.Instanceof:
      case JSXParser.Typeof:
      case JSXParser.Case:
      case JSXParser.Else:
      case JSXParser.New:
      case JSXParser.Var:
      case JSXParser.Catch:
      case JSXParser.Finally:
      case JSXParser.Return:
      case JSXParser.Void:
      case JSXParser.Continue:
      case JSXParser.For:
      case JSXParser.Switch:
      case JSXParser.While:
      case JSXParser.Debugger:
      case JSXParser.Function:
      case JSXParser.This:
      case JSXParser.With:
      case JSXParser.Default:
      case JSXParser.If:
      case JSXParser.Throw:
      case JSXParser.Delete:
      case JSXParser.In:
      case JSXParser.Try:
      case JSXParser.As:
      case JSXParser.From:
      case JSXParser.Class:
      case JSXParser.Enum:
      case JSXParser.Extends:
      case JSXParser.Super:
      case JSXParser.Const:
      case JSXParser.Export:
      case JSXParser.Import:
      case JSXParser.Async:
      case JSXParser.Await:
      case JSXParser.Implements:
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
      case JSXParser.Private:
      case JSXParser.Public:
      case JSXParser.Interface:
      case JSXParser.Package:
      case JSXParser.Protected:
      case JSXParser.Static:
      case JSXParser.Yield:
      case JSXParser.Identifier:
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.identifierName();
        break;
      case JSXParser.StringLiteral:
        this.enterOuterAlt(localctx, 2);
        this.state = 725;
        this.match(JSXParser.StringLiteral);
        break;
      case JSXParser.DecimalLiteral:
      case JSXParser.HexIntegerLiteral:
      case JSXParser.OctalIntegerLiteral:
      case JSXParser.OctalIntegerLiteral2:
      case JSXParser.BinaryIntegerLiteral:
        this.enterOuterAlt(localctx, 3);
        this.state = 726;
        this.numericLiteral();
        break;
      case JSXParser.OpenBracket:
        this.enterOuterAlt(localctx, 4);
        this.state = 727;
        this.match(JSXParser.OpenBracket);
        this.state = 728;
        this.singleExpression(0);
        this.state = 729;
        this.match(JSXParser.CloseBracket);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_arguments;
  return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

ArgumentsContext.prototype.argument = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ArgumentContext);
  } else {
    return this.getTypedRuleContext(ArgumentContext, i);
  }
};

ArgumentsContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Comma);
  } else {
    return this.getToken(JSXParser.Comma, i);
  }
};

ArgumentsContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArguments(this);
  }
};

ArgumentsContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArguments(this);
  }
};

ArgumentsContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArguments(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ArgumentsContext = ArgumentsContext;

JSXParser.prototype.arguments = function() {
  var localctx = new ArgumentsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 108, JSXParser.RULE_arguments);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 733;
    this.match(JSXParser.OpenParen);
    this.state = 745;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(
      (((_la - 4) & ~0x1f) == 0 &&
        ((1 << (_la - 4)) &
          ((1 << (JSXParser.RegularExpressionLiteral - 4)) |
            (1 << (JSXParser.OpenBracket - 4)) |
            (1 << (JSXParser.OpenParen - 4)) |
            (1 << (JSXParser.OpenBrace - 4)) |
            (1 << (JSXParser.Ellipsis - 4)) |
            (1 << (JSXParser.PlusPlus - 4)) |
            (1 << (JSXParser.MinusMinus - 4)) |
            (1 << (JSXParser.Plus - 4)) |
            (1 << (JSXParser.Minus - 4)) |
            (1 << (JSXParser.BitNot - 4)) |
            (1 << (JSXParser.Not - 4)) |
            (1 << (JSXParser.LessThan - 4)))) !==
          0) ||
      (((_la - 59) & ~0x1f) == 0 &&
        ((1 << (_la - 59)) &
          ((1 << (JSXParser.NullLiteral - 59)) |
            (1 << (JSXParser.BooleanLiteral - 59)) |
            (1 << (JSXParser.DecimalLiteral - 59)) |
            (1 << (JSXParser.HexIntegerLiteral - 59)) |
            (1 << (JSXParser.OctalIntegerLiteral - 59)) |
            (1 << (JSXParser.OctalIntegerLiteral2 - 59)) |
            (1 << (JSXParser.BinaryIntegerLiteral - 59)) |
            (1 << (JSXParser.BigHexIntegerLiteral - 59)) |
            (1 << (JSXParser.BigOctalIntegerLiteral - 59)) |
            (1 << (JSXParser.BigBinaryIntegerLiteral - 59)) |
            (1 << (JSXParser.BigDecimalIntegerLiteral - 59)) |
            (1 << (JSXParser.Typeof - 59)) |
            (1 << (JSXParser.New - 59)) |
            (1 << (JSXParser.Void - 59)) |
            (1 << (JSXParser.Function - 59)) |
            (1 << (JSXParser.This - 59)))) !==
          0) ||
      (((_la - 93) & ~0x1f) == 0 &&
        ((1 << (_la - 93)) &
          ((1 << (JSXParser.Delete - 93)) |
            (1 << (JSXParser.Class - 93)) |
            (1 << (JSXParser.Super - 93)) |
            (1 << (JSXParser.Import - 93)) |
            (1 << (JSXParser.Async - 93)) |
            (1 << (JSXParser.Await - 93)) |
            (1 << (JSXParser.NonStrictLet - 93)) |
            (1 << (JSXParser.Yield - 93)) |
            (1 << (JSXParser.Identifier - 93)) |
            (1 << (JSXParser.StringLiteral - 93)) |
            (1 << (JSXParser.TemplateStringLiteral - 93)))) !==
          0)
    ) {
      this.state = 734;
      this.argument();
      this.state = 739;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 82, this._ctx);
      while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if(_alt === 1) {
          this.state = 735;
          this.match(JSXParser.Comma);
          this.state = 736;
          this.argument();
        }
        this.state = 741;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 82, this._ctx);
      }

      this.state = 743;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === JSXParser.Comma) {
        this.state = 742;
        this.match(JSXParser.Comma);
      }
    }

    this.state = 747;
    this.match(JSXParser.CloseParen);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_argument;
  return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArgumentContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

ArgumentContext.prototype.Ellipsis = function() {
  return this.getToken(JSXParser.Ellipsis, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArgument(this);
  }
};

ArgumentContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArgument(this);
  }
};

ArgumentContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArgument(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ArgumentContext = ArgumentContext;

JSXParser.prototype.argument = function() {
  var localctx = new ArgumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 110, JSXParser.RULE_argument);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 750;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Ellipsis) {
      this.state = 749;
      this.match(JSXParser.Ellipsis);
    }

    this.state = 754;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
    switch (la_) {
      case 1:
        this.state = 752;
        this.singleExpression(0);
        break;

      case 2:
        this.state = 753;
        this.identifier();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExpressionSequenceContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_expressionSequence;
  return this;
}

ExpressionSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSequenceContext.prototype.constructor = ExpressionSequenceContext;

ExpressionSequenceContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

ExpressionSequenceContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Comma);
  } else {
    return this.getToken(JSXParser.Comma, i);
  }
};

ExpressionSequenceContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterExpressionSequence(this);
  }
};

ExpressionSequenceContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitExpressionSequence(this);
  }
};

ExpressionSequenceContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitExpressionSequence(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ExpressionSequenceContext = ExpressionSequenceContext;

JSXParser.prototype.expressionSequence = function() {
  var localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 112, JSXParser.RULE_expressionSequence);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 756;
    this.singleExpression(0);
    this.state = 761;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 757;
        this.match(JSXParser.Comma);
        this.state = 758;
        this.singleExpression(0);
      }
      this.state = 763;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SingleExpressionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_singleExpression;
  return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;

SingleExpressionContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TemplateStringExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TemplateStringExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TemplateStringExpressionContext.prototype.constructor = TemplateStringExpressionContext;

JSXParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

TemplateStringExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

TemplateStringExpressionContext.prototype.TemplateStringLiteral = function() {
  return this.getToken(JSXParser.TemplateStringLiteral, 0);
};
TemplateStringExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterTemplateStringExpression(this);
  }
};

TemplateStringExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitTemplateStringExpression(this);
  }
};

TemplateStringExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitTemplateStringExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function TernaryExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TernaryExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

JSXParser.TernaryExpressionContext = TernaryExpressionContext;

TernaryExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

TernaryExpressionContext.prototype.QuestionMark = function() {
  return this.getToken(JSXParser.QuestionMark, 0);
};

TernaryExpressionContext.prototype.Colon = function() {
  return this.getToken(JSXParser.Colon, 0);
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterTernaryExpression(this);
  }
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitTernaryExpression(this);
  }
};

TernaryExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitTernaryExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function LogicalAndExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LogicalAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalAndExpressionContext.prototype.constructor = LogicalAndExpressionContext;

JSXParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

LogicalAndExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

LogicalAndExpressionContext.prototype.And = function() {
  return this.getToken(JSXParser.And, 0);
};
LogicalAndExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterLogicalAndExpression(this);
  }
};

LogicalAndExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitLogicalAndExpression(this);
  }
};

LogicalAndExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitLogicalAndExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PowerExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PowerExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PowerExpressionContext.prototype.constructor = PowerExpressionContext;

JSXParser.PowerExpressionContext = PowerExpressionContext;

PowerExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

PowerExpressionContext.prototype.Power = function() {
  return this.getToken(JSXParser.Power, 0);
};
PowerExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPowerExpression(this);
  }
};

PowerExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPowerExpression(this);
  }
};

PowerExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPowerExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PreIncrementExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PreIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreIncrementExpressionContext.prototype.constructor = PreIncrementExpressionContext;

JSXParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

PreIncrementExpressionContext.prototype.PlusPlus = function() {
  return this.getToken(JSXParser.PlusPlus, 0);
};

PreIncrementExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
PreIncrementExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPreIncrementExpression(this);
  }
};

PreIncrementExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPreIncrementExpression(this);
  }
};

PreIncrementExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPreIncrementExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ObjectLiteralExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ObjectLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ObjectLiteralExpressionContext.prototype.constructor = ObjectLiteralExpressionContext;

JSXParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

ObjectLiteralExpressionContext.prototype.objectLiteral = function() {
  return this.getTypedRuleContext(ObjectLiteralContext, 0);
};
ObjectLiteralExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterObjectLiteralExpression(this);
  }
};

ObjectLiteralExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitObjectLiteralExpression(this);
  }
};

ObjectLiteralExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitObjectLiteralExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function MetaExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MetaExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MetaExpressionContext.prototype.constructor = MetaExpressionContext;

JSXParser.MetaExpressionContext = MetaExpressionContext;

MetaExpressionContext.prototype.New = function() {
  return this.getToken(JSXParser.New, 0);
};

MetaExpressionContext.prototype.Dot = function() {
  return this.getToken(JSXParser.Dot, 0);
};

MetaExpressionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};
MetaExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterMetaExpression(this);
  }
};

MetaExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitMetaExpression(this);
  }
};

MetaExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitMetaExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function InExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

InExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

JSXParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

InExpressionContext.prototype.In = function() {
  return this.getToken(JSXParser.In, 0);
};
InExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterInExpression(this);
  }
};

InExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitInExpression(this);
  }
};

InExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitInExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function LogicalOrExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LogicalOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalOrExpressionContext.prototype.constructor = LogicalOrExpressionContext;

JSXParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

LogicalOrExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

LogicalOrExpressionContext.prototype.Or = function() {
  return this.getToken(JSXParser.Or, 0);
};
LogicalOrExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterLogicalOrExpression(this);
  }
};

LogicalOrExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitLogicalOrExpression(this);
  }
};

LogicalOrExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitLogicalOrExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function NotExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

NotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

JSXParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.Not = function() {
  return this.getToken(JSXParser.Not, 0);
};

NotExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterNotExpression(this);
  }
};

NotExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitNotExpression(this);
  }
};

NotExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitNotExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PreDecreaseExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PreDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreDecreaseExpressionContext.prototype.constructor = PreDecreaseExpressionContext;

JSXParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

PreDecreaseExpressionContext.prototype.MinusMinus = function() {
  return this.getToken(JSXParser.MinusMinus, 0);
};

PreDecreaseExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
PreDecreaseExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPreDecreaseExpression(this);
  }
};

PreDecreaseExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPreDecreaseExpression(this);
  }
};

PreDecreaseExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPreDecreaseExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ArgumentsExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ArgumentsExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArgumentsExpressionContext.prototype.constructor = ArgumentsExpressionContext;

JSXParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

ArgumentsExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArgumentsExpressionContext.prototype.arguments = function() {
  return this.getTypedRuleContext(ArgumentsContext, 0);
};
ArgumentsExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArgumentsExpression(this);
  }
};

ArgumentsExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArgumentsExpression(this);
  }
};

ArgumentsExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArgumentsExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function AwaitExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AwaitExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AwaitExpressionContext.prototype.constructor = AwaitExpressionContext;

JSXParser.AwaitExpressionContext = AwaitExpressionContext;

AwaitExpressionContext.prototype.Await = function() {
  return this.getToken(JSXParser.Await, 0);
};

AwaitExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
AwaitExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAwaitExpression(this);
  }
};

AwaitExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAwaitExpression(this);
  }
};

AwaitExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAwaitExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ThisExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ThisExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

JSXParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.This = function() {
  return this.getToken(JSXParser.This, 0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterThisExpression(this);
  }
};

ThisExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitThisExpression(this);
  }
};

ThisExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitThisExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function FunctionExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

FunctionExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

JSXParser.FunctionExpressionContext = FunctionExpressionContext;

FunctionExpressionContext.prototype.anoymousFunction = function() {
  return this.getTypedRuleContext(AnoymousFunctionContext, 0);
};
FunctionExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFunctionExpression(this);
  }
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFunctionExpression(this);
  }
};

FunctionExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFunctionExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function UnaryMinusExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UnaryMinusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryMinusExpressionContext.prototype.constructor = UnaryMinusExpressionContext;

JSXParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

UnaryMinusExpressionContext.prototype.Minus = function() {
  return this.getToken(JSXParser.Minus, 0);
};

UnaryMinusExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
UnaryMinusExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterUnaryMinusExpression(this);
  }
};

UnaryMinusExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitUnaryMinusExpression(this);
  }
};

UnaryMinusExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitUnaryMinusExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function AssignmentExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AssignmentExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

JSXParser.AssignmentExpressionContext = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

AssignmentExpressionContext.prototype.Assign = function() {
  return this.getToken(JSXParser.Assign, 0);
};
AssignmentExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAssignmentExpression(this);
  }
};

AssignmentExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAssignmentExpression(this);
  }
};

AssignmentExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAssignmentExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PostDecreaseExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PostDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostDecreaseExpressionContext.prototype.constructor = PostDecreaseExpressionContext;

JSXParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

PostDecreaseExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PostDecreaseExpressionContext.prototype.MinusMinus = function() {
  return this.getToken(JSXParser.MinusMinus, 0);
};
PostDecreaseExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPostDecreaseExpression(this);
  }
};

PostDecreaseExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPostDecreaseExpression(this);
  }
};

PostDecreaseExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPostDecreaseExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function TypeofExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TypeofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

JSXParser.TypeofExpressionContext = TypeofExpressionContext;

TypeofExpressionContext.prototype.Typeof = function() {
  return this.getToken(JSXParser.Typeof, 0);
};

TypeofExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
TypeofExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterTypeofExpression(this);
  }
};

TypeofExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitTypeofExpression(this);
  }
};

TypeofExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitTypeofExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function InstanceofExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

InstanceofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InstanceofExpressionContext.prototype.constructor = InstanceofExpressionContext;

JSXParser.InstanceofExpressionContext = InstanceofExpressionContext;

InstanceofExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

InstanceofExpressionContext.prototype.Instanceof = function() {
  return this.getToken(JSXParser.Instanceof, 0);
};
InstanceofExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterInstanceofExpression(this);
  }
};

InstanceofExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitInstanceofExpression(this);
  }
};

InstanceofExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitInstanceofExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function UnaryPlusExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UnaryPlusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryPlusExpressionContext.prototype.constructor = UnaryPlusExpressionContext;

JSXParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

UnaryPlusExpressionContext.prototype.Plus = function() {
  return this.getToken(JSXParser.Plus, 0);
};

UnaryPlusExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
UnaryPlusExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterUnaryPlusExpression(this);
  }
};

UnaryPlusExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitUnaryPlusExpression(this);
  }
};

UnaryPlusExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitUnaryPlusExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function DeleteExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

DeleteExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
DeleteExpressionContext.prototype.constructor = DeleteExpressionContext;

JSXParser.DeleteExpressionContext = DeleteExpressionContext;

DeleteExpressionContext.prototype.Delete = function() {
  return this.getToken(JSXParser.Delete, 0);
};

DeleteExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
DeleteExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterDeleteExpression(this);
  }
};

DeleteExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitDeleteExpression(this);
  }
};

DeleteExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitDeleteExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ImportExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ImportExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ImportExpressionContext.prototype.constructor = ImportExpressionContext;

JSXParser.ImportExpressionContext = ImportExpressionContext;

ImportExpressionContext.prototype.Import = function() {
  return this.getToken(JSXParser.Import, 0);
};

ImportExpressionContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ImportExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ImportExpressionContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};
ImportExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterImportExpression(this);
  }
};

ImportExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitImportExpression(this);
  }
};

ImportExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitImportExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function EqualityExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

EqualityExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

JSXParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

EqualityExpressionContext.prototype.Equals_ = function() {
  return this.getToken(JSXParser.Equals_, 0);
};

EqualityExpressionContext.prototype.NotEquals = function() {
  return this.getToken(JSXParser.NotEquals, 0);
};

EqualityExpressionContext.prototype.IdentityEquals = function() {
  return this.getToken(JSXParser.IdentityEquals, 0);
};

EqualityExpressionContext.prototype.IdentityNotEquals = function() {
  return this.getToken(JSXParser.IdentityNotEquals, 0);
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterEqualityExpression(this);
  }
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitEqualityExpression(this);
  }
};

EqualityExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitEqualityExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function BitXOrExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitXOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitXOrExpressionContext.prototype.constructor = BitXOrExpressionContext;

JSXParser.BitXOrExpressionContext = BitXOrExpressionContext;

BitXOrExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitXOrExpressionContext.prototype.BitXOr = function() {
  return this.getToken(JSXParser.BitXOr, 0);
};
BitXOrExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBitXOrExpression(this);
  }
};

BitXOrExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBitXOrExpression(this);
  }
};

BitXOrExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBitXOrExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function SuperExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

SuperExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
SuperExpressionContext.prototype.constructor = SuperExpressionContext;

JSXParser.SuperExpressionContext = SuperExpressionContext;

SuperExpressionContext.prototype.Super = function() {
  return this.getToken(JSXParser.Super, 0);
};
SuperExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterSuperExpression(this);
  }
};

SuperExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitSuperExpression(this);
  }
};

SuperExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitSuperExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function MultiplicativeExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MultiplicativeExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

JSXParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

MultiplicativeExpressionContext.prototype.Multiply = function() {
  return this.getToken(JSXParser.Multiply, 0);
};

MultiplicativeExpressionContext.prototype.Divide = function() {
  return this.getToken(JSXParser.Divide, 0);
};

MultiplicativeExpressionContext.prototype.Modulus = function() {
  return this.getToken(JSXParser.Modulus, 0);
};
MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterMultiplicativeExpression(this);
  }
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitMultiplicativeExpression(this);
  }
};

MultiplicativeExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitMultiplicativeExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function HtmlElementExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

HtmlElementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
HtmlElementExpressionContext.prototype.constructor = HtmlElementExpressionContext;

JSXParser.HtmlElementExpressionContext = HtmlElementExpressionContext;

HtmlElementExpressionContext.prototype.htmlElements = function() {
  return this.getTypedRuleContext(HtmlElementsContext, 0);
};
HtmlElementExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlElementExpression(this);
  }
};

HtmlElementExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlElementExpression(this);
  }
};

HtmlElementExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlElementExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function BitShiftExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitShiftExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitShiftExpressionContext.prototype.constructor = BitShiftExpressionContext;

JSXParser.BitShiftExpressionContext = BitShiftExpressionContext;

BitShiftExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitShiftExpressionContext.prototype.LeftShiftArithmetic = function() {
  return this.getToken(JSXParser.LeftShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftArithmetic = function() {
  return this.getToken(JSXParser.RightShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftLogical = function() {
  return this.getToken(JSXParser.RightShiftLogical, 0);
};
BitShiftExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBitShiftExpression(this);
  }
};

BitShiftExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBitShiftExpression(this);
  }
};

BitShiftExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBitShiftExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ParenthesizedExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ParenthesizedExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

JSXParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ParenthesizedExpressionContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ParenthesizedExpressionContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterParenthesizedExpression(this);
  }
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitParenthesizedExpression(this);
  }
};

ParenthesizedExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitParenthesizedExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function AdditiveExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AdditiveExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

JSXParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

AdditiveExpressionContext.prototype.Plus = function() {
  return this.getToken(JSXParser.Plus, 0);
};

AdditiveExpressionContext.prototype.Minus = function() {
  return this.getToken(JSXParser.Minus, 0);
};
AdditiveExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAdditiveExpression(this);
  }
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAdditiveExpression(this);
  }
};

AdditiveExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAdditiveExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function RelationalExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

RelationalExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

JSXParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

RelationalExpressionContext.prototype.LessThan = function() {
  return this.getToken(JSXParser.LessThan, 0);
};

RelationalExpressionContext.prototype.MoreThan = function() {
  return this.getToken(JSXParser.MoreThan, 0);
};

RelationalExpressionContext.prototype.LessThanEquals = function() {
  return this.getToken(JSXParser.LessThanEquals, 0);
};

RelationalExpressionContext.prototype.GreaterThanEquals = function() {
  return this.getToken(JSXParser.GreaterThanEquals, 0);
};
RelationalExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterRelationalExpression(this);
  }
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitRelationalExpression(this);
  }
};

RelationalExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitRelationalExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function PostIncrementExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PostIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostIncrementExpressionContext.prototype.constructor = PostIncrementExpressionContext;

JSXParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

PostIncrementExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PostIncrementExpressionContext.prototype.PlusPlus = function() {
  return this.getToken(JSXParser.PlusPlus, 0);
};
PostIncrementExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterPostIncrementExpression(this);
  }
};

PostIncrementExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitPostIncrementExpression(this);
  }
};

PostIncrementExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitPostIncrementExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function YieldExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

YieldExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
YieldExpressionContext.prototype.constructor = YieldExpressionContext;

JSXParser.YieldExpressionContext = YieldExpressionContext;

YieldExpressionContext.prototype.yieldStatement = function() {
  return this.getTypedRuleContext(YieldStatementContext, 0);
};
YieldExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterYieldExpression(this);
  }
};

YieldExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitYieldExpression(this);
  }
};

YieldExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitYieldExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function BitNotExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitNotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitNotExpressionContext.prototype.constructor = BitNotExpressionContext;

JSXParser.BitNotExpressionContext = BitNotExpressionContext;

BitNotExpressionContext.prototype.BitNot = function() {
  return this.getToken(JSXParser.BitNot, 0);
};

BitNotExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
BitNotExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBitNotExpression(this);
  }
};

BitNotExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBitNotExpression(this);
  }
};

BitNotExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBitNotExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function NewExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

NewExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

JSXParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.New = function() {
  return this.getToken(JSXParser.New, 0);
};

NewExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

NewExpressionContext.prototype.arguments = function() {
  return this.getTypedRuleContext(ArgumentsContext, 0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterNewExpression(this);
  }
};

NewExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitNewExpression(this);
  }
};

NewExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitNewExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function LiteralExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

JSXParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
  return this.getTypedRuleContext(LiteralContext, 0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterLiteralExpression(this);
  }
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitLiteralExpression(this);
  }
};

LiteralExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitLiteralExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ArrayLiteralExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ArrayLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArrayLiteralExpressionContext.prototype.constructor = ArrayLiteralExpressionContext;

JSXParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

ArrayLiteralExpressionContext.prototype.arrayLiteral = function() {
  return this.getTypedRuleContext(ArrayLiteralContext, 0);
};
ArrayLiteralExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArrayLiteralExpression(this);
  }
};

ArrayLiteralExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArrayLiteralExpression(this);
  }
};

ArrayLiteralExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArrayLiteralExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function MemberDotExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MemberDotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberDotExpressionContext.prototype.constructor = MemberDotExpressionContext;

JSXParser.MemberDotExpressionContext = MemberDotExpressionContext;

MemberDotExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

MemberDotExpressionContext.prototype.Dot = function() {
  return this.getToken(JSXParser.Dot, 0);
};

MemberDotExpressionContext.prototype.identifierName = function() {
  return this.getTypedRuleContext(IdentifierNameContext, 0);
};

MemberDotExpressionContext.prototype.QuestionMark = function() {
  return this.getToken(JSXParser.QuestionMark, 0);
};

MemberDotExpressionContext.prototype.Hashtag = function() {
  return this.getToken(JSXParser.Hashtag, 0);
};
MemberDotExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterMemberDotExpression(this);
  }
};

MemberDotExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitMemberDotExpression(this);
  }
};

MemberDotExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitMemberDotExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ClassExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ClassExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

JSXParser.ClassExpressionContext = ClassExpressionContext;

ClassExpressionContext.prototype.Class = function() {
  return this.getToken(JSXParser.Class, 0);
};

ClassExpressionContext.prototype.classTail = function() {
  return this.getTypedRuleContext(ClassTailContext, 0);
};

ClassExpressionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};
ClassExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterClassExpression(this);
  }
};

ClassExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitClassExpression(this);
  }
};

ClassExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitClassExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function MemberIndexExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MemberIndexExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberIndexExpressionContext.prototype.constructor = MemberIndexExpressionContext;

JSXParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

MemberIndexExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

MemberIndexExpressionContext.prototype.OpenBracket = function() {
  return this.getToken(JSXParser.OpenBracket, 0);
};

MemberIndexExpressionContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

MemberIndexExpressionContext.prototype.CloseBracket = function() {
  return this.getToken(JSXParser.CloseBracket, 0);
};
MemberIndexExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterMemberIndexExpression(this);
  }
};

MemberIndexExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitMemberIndexExpression(this);
  }
};

MemberIndexExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitMemberIndexExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function IdentifierExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

IdentifierExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

JSXParser.IdentifierExpressionContext = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterIdentifierExpression(this);
  }
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitIdentifierExpression(this);
  }
};

IdentifierExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitIdentifierExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function BitAndExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitAndExpressionContext.prototype.constructor = BitAndExpressionContext;

JSXParser.BitAndExpressionContext = BitAndExpressionContext;

BitAndExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitAndExpressionContext.prototype.BitAnd = function() {
  return this.getToken(JSXParser.BitAnd, 0);
};
BitAndExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBitAndExpression(this);
  }
};

BitAndExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBitAndExpression(this);
  }
};

BitAndExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBitAndExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function BitOrExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitOrExpressionContext.prototype.constructor = BitOrExpressionContext;

JSXParser.BitOrExpressionContext = BitOrExpressionContext;

BitOrExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitOrExpressionContext.prototype.BitOr = function() {
  return this.getToken(JSXParser.BitOr, 0);
};
BitOrExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBitOrExpression(this);
  }
};

BitOrExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBitOrExpression(this);
  }
};

BitOrExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBitOrExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function AssignmentOperatorExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

JSXParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
  return this.getTypedRuleContext(AssignmentOperatorContext, 0);
};
AssignmentOperatorExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAssignmentOperatorExpression(this);
  }
};

AssignmentOperatorExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAssignmentOperatorExpression(this);
  }
};

AssignmentOperatorExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAssignmentOperatorExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function VoidExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

VoidExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
VoidExpressionContext.prototype.constructor = VoidExpressionContext;

JSXParser.VoidExpressionContext = VoidExpressionContext;

VoidExpressionContext.prototype.Void = function() {
  return this.getToken(JSXParser.Void, 0);
};

VoidExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
VoidExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterVoidExpression(this);
  }
};

VoidExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitVoidExpression(this);
  }
};

VoidExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitVoidExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function CoalesceExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

CoalesceExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
CoalesceExpressionContext.prototype.constructor = CoalesceExpressionContext;

JSXParser.CoalesceExpressionContext = CoalesceExpressionContext;

CoalesceExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

CoalesceExpressionContext.prototype.NullCoalesce = function() {
  return this.getToken(JSXParser.NullCoalesce, 0);
};
CoalesceExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterCoalesceExpression(this);
  }
};

CoalesceExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitCoalesceExpression(this);
  }
};

CoalesceExpressionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitCoalesceExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.prototype.singleExpression = function(_p) {
  if(_p === undefined) {
    _p = 0;
  }
  var _parentctx = this._ctx;
  var _parentState = this.state;
  var localctx = new SingleExpressionContext(this, this._ctx, _parentState);
  var _prevctx = localctx;
  var _startState = 114;
  this.enterRecursionRule(localctx, 114, JSXParser.RULE_singleExpression, _p);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 816;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
    switch (la_) {
      case 1:
        localctx = new FunctionExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 765;
        this.anoymousFunction();
        break;

      case 2:
        localctx = new ClassExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 766;
        this.match(JSXParser.Class);
        this.state = 768;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0) {
          this.state = 767;
          this.identifier();
        }

        this.state = 770;
        this.classTail();
        break;

      case 3:
        localctx = new NewExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 771;
        this.match(JSXParser.New);
        this.state = 772;
        this.singleExpression(0);
        this.state = 774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
        if(la_ === 1) {
          this.state = 773;
          this.arguments();
        }
        break;

      case 4:
        localctx = new MetaExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 776;
        this.match(JSXParser.New);
        this.state = 777;
        this.match(JSXParser.Dot);
        this.state = 778;
        this.identifier();
        break;

      case 5:
        localctx = new DeleteExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 779;
        this.match(JSXParser.Delete);
        this.state = 780;
        this.singleExpression(38);
        break;

      case 6:
        localctx = new VoidExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 781;
        this.match(JSXParser.Void);
        this.state = 782;
        this.singleExpression(37);
        break;

      case 7:
        localctx = new TypeofExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 783;
        this.match(JSXParser.Typeof);
        this.state = 784;
        this.singleExpression(36);
        break;

      case 8:
        localctx = new PreIncrementExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 785;
        this.match(JSXParser.PlusPlus);
        this.state = 786;
        this.singleExpression(35);
        break;

      case 9:
        localctx = new PreDecreaseExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 787;
        this.match(JSXParser.MinusMinus);
        this.state = 788;
        this.singleExpression(34);
        break;

      case 10:
        localctx = new UnaryPlusExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 789;
        this.match(JSXParser.Plus);
        this.state = 790;
        this.singleExpression(33);
        break;

      case 11:
        localctx = new UnaryMinusExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 791;
        this.match(JSXParser.Minus);
        this.state = 792;
        this.singleExpression(32);
        break;

      case 12:
        localctx = new BitNotExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 793;
        this.match(JSXParser.BitNot);
        this.state = 794;
        this.singleExpression(31);
        break;

      case 13:
        localctx = new NotExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 795;
        this.match(JSXParser.Not);
        this.state = 796;
        this.singleExpression(30);
        break;

      case 14:
        localctx = new AwaitExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 797;
        this.match(JSXParser.Await);
        this.state = 798;
        this.singleExpression(29);
        break;

      case 15:
        localctx = new ImportExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 799;
        this.match(JSXParser.Import);
        this.state = 800;
        this.match(JSXParser.OpenParen);
        this.state = 801;
        this.singleExpression(0);
        this.state = 802;
        this.match(JSXParser.CloseParen);
        break;

      case 16:
        localctx = new YieldExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 804;
        this.yieldStatement();
        break;

      case 17:
        localctx = new ThisExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 805;
        this.match(JSXParser.This);
        break;

      case 18:
        localctx = new IdentifierExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 806;
        this.identifier();
        break;

      case 19:
        localctx = new SuperExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 807;
        this.match(JSXParser.Super);
        break;

      case 20:
        localctx = new LiteralExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 808;
        this.literal();
        break;

      case 21:
        localctx = new ArrayLiteralExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 809;
        this.arrayLiteral();
        break;

      case 22:
        localctx = new ObjectLiteralExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 810;
        this.objectLiteral();
        break;

      case 23:
        localctx = new HtmlElementExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 811;
        this.htmlElements();
        break;

      case 24:
        localctx = new ParenthesizedExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 812;
        this.match(JSXParser.OpenParen);
        this.state = 813;
        this.expressionSequence();
        this.state = 814;
        this.match(JSXParser.CloseParen);
        break;
    }
    this._ctx.stop = this._input.LT(-1);
    this.state = 899;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        if(this._parseListeners !== null) {
          this.triggerExitRuleEvent();
        }
        _prevctx = localctx;
        this.state = 897;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 93, this._ctx);
        switch (la_) {
          case 1:
            localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 818;
            if(!this.precpred(this._ctx, 28)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 28)');
            }
            this.state = 819;
            this.match(JSXParser.Power);
            this.state = 820;
            this.singleExpression(28);
            break;

          case 2:
            localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 821;
            if(!this.precpred(this._ctx, 27)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 27)');
            }
            this.state = 822;
            _la = this._input.LA(1);
            if(!((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << JSXParser.Multiply) | (1 << JSXParser.Divide) | (1 << JSXParser.Modulus))) !== 0)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 823;
            this.singleExpression(28);
            break;

          case 3:
            localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 824;
            if(!this.precpred(this._ctx, 26)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 26)');
            }
            this.state = 825;
            _la = this._input.LA(1);
            if(!(_la === JSXParser.Plus || _la === JSXParser.Minus)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 826;
            this.singleExpression(27);
            break;

          case 4:
            localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 827;
            if(!this.precpred(this._ctx, 25)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 25)');
            }
            this.state = 828;
            this.match(JSXParser.NullCoalesce);
            this.state = 829;
            this.singleExpression(26);
            break;

          case 5:
            localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 830;
            if(!this.precpred(this._ctx, 24)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 24)');
            }
            this.state = 831;
            _la = this._input.LA(1);
            if(!(((_la - 30) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (JSXParser.RightShiftArithmetic - 30)) | (1 << (JSXParser.LeftShiftArithmetic - 30)) | (1 << (JSXParser.RightShiftLogical - 30)))) !== 0)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 832;
            this.singleExpression(25);
            break;

          case 6:
            localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 833;
            if(!this.precpred(this._ctx, 23)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 23)');
            }
            this.state = 834;
            _la = this._input.LA(1);
            if(!(((_la - 33) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (JSXParser.LessThan - 33)) | (1 << (JSXParser.MoreThan - 33)) | (1 << (JSXParser.LessThanEquals - 33)) | (1 << (JSXParser.GreaterThanEquals - 33)))) !== 0)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 835;
            this.singleExpression(24);
            break;

          case 7:
            localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 836;
            if(!this.precpred(this._ctx, 22)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 22)');
            }
            this.state = 837;
            this.match(JSXParser.Instanceof);
            this.state = 838;
            this.singleExpression(23);
            break;

          case 8:
            localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 839;
            if(!this.precpred(this._ctx, 21)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 21)');
            }
            this.state = 840;
            this.match(JSXParser.In);
            this.state = 841;
            this.singleExpression(22);
            break;

          case 9:
            localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 842;
            if(!this.precpred(this._ctx, 20)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 20)');
            }
            this.state = 843;
            _la = this._input.LA(1);
            if(!(((_la - 37) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (JSXParser.Equals_ - 37)) | (1 << (JSXParser.NotEquals - 37)) | (1 << (JSXParser.IdentityEquals - 37)) | (1 << (JSXParser.IdentityNotEquals - 37)))) !== 0)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 844;
            this.singleExpression(21);
            break;

          case 10:
            localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 845;
            if(!this.precpred(this._ctx, 19)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 19)');
            }
            this.state = 846;
            this.match(JSXParser.BitAnd);
            this.state = 847;
            this.singleExpression(20);
            break;

          case 11:
            localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 848;
            if(!this.precpred(this._ctx, 18)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 18)');
            }
            this.state = 849;
            this.match(JSXParser.BitXOr);
            this.state = 850;
            this.singleExpression(19);
            break;

          case 12:
            localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 851;
            if(!this.precpred(this._ctx, 17)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 17)');
            }
            this.state = 852;
            this.match(JSXParser.BitOr);
            this.state = 853;
            this.singleExpression(18);
            break;

          case 13:
            localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 854;
            if(!this.precpred(this._ctx, 16)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 16)');
            }
            this.state = 855;
            this.match(JSXParser.And);
            this.state = 856;
            this.singleExpression(17);
            break;

          case 14:
            localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 857;
            if(!this.precpred(this._ctx, 15)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 15)');
            }
            this.state = 858;
            this.match(JSXParser.Or);
            this.state = 859;
            this.singleExpression(16);
            break;

          case 15:
            localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 860;
            if(!this.precpred(this._ctx, 14)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 14)');
            }
            this.state = 861;
            this.match(JSXParser.QuestionMark);
            this.state = 862;
            this.singleExpression(0);
            this.state = 863;
            this.match(JSXParser.Colon);
            this.state = 864;
            this.singleExpression(15);
            break;

          case 16:
            localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 866;
            if(!this.precpred(this._ctx, 13)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 13)');
            }
            this.state = 867;
            this.match(JSXParser.Assign);
            this.state = 868;
            this.singleExpression(13);
            break;

          case 17:
            localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 869;
            if(!this.precpred(this._ctx, 12)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 12)');
            }
            this.state = 870;
            this.assignmentOperator();
            this.state = 871;
            this.singleExpression(12);
            break;

          case 18:
            localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 873;
            if(!this.precpred(this._ctx, 45)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 45)');
            }
            this.state = 874;
            this.match(JSXParser.OpenBracket);
            this.state = 875;
            this.expressionSequence();
            this.state = 876;
            this.match(JSXParser.CloseBracket);
            break;

          case 19:
            localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 878;
            if(!this.precpred(this._ctx, 44)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 44)');
            }
            this.state = 880;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la === JSXParser.QuestionMark) {
              this.state = 879;
              this.match(JSXParser.QuestionMark);
            }

            this.state = 882;
            this.match(JSXParser.Dot);
            this.state = 884;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la === JSXParser.Hashtag) {
              this.state = 883;
              this.match(JSXParser.Hashtag);
            }

            this.state = 886;
            this.identifierName();
            break;

          case 20:
            localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 887;
            if(!this.precpred(this._ctx, 43)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 43)');
            }
            this.state = 888;
            this.arguments();
            break;

          case 21:
            localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 889;
            if(!this.precpred(this._ctx, 40)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 40)');
            }
            this.state = 890;
            if(!this.notLineTerminator()) {
              throw new antlr4.error.FailedPredicateException(this, 'this.notLineTerminator()');
            }
            this.state = 891;
            this.match(JSXParser.PlusPlus);
            break;

          case 22:
            localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 892;
            if(!this.precpred(this._ctx, 39)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 39)');
            }
            this.state = 893;
            if(!this.notLineTerminator()) {
              throw new antlr4.error.FailedPredicateException(this, 'this.notLineTerminator()');
            }
            this.state = 894;
            this.match(JSXParser.MinusMinus);
            break;

          case 23:
            localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
            this.pushNewRecursionContext(localctx, _startState, JSXParser.RULE_singleExpression);
            this.state = 895;
            if(!this.precpred(this._ctx, 10)) {
              throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 10)');
            }
            this.state = 896;
            this.match(JSXParser.TemplateStringLiteral);
            break;
        }
      }
      this.state = 901;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
    }
  } catch(error) {
    if(error instanceof antlr4.error.RecognitionException) {
      localctx.exception = error;
      this._errHandler.reportError(this, error);
      this._errHandler.recover(this, error);
    } else {
      throw error;
    }
  } finally {
    this.unrollRecursionContexts(_parentctx);
  }
  return localctx;
};

function HtmlElementsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlElements;
  return this;
}

HtmlElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlElementsContext.prototype.constructor = HtmlElementsContext;

HtmlElementsContext.prototype.htmlElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(HtmlElementContext);
  } else {
    return this.getTypedRuleContext(HtmlElementContext, i);
  }
};

HtmlElementsContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlElements(this);
  }
};

HtmlElementsContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlElements(this);
  }
};

HtmlElementsContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlElements(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlElementsContext = HtmlElementsContext;

JSXParser.prototype.htmlElements = function() {
  var localctx = new HtmlElementsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 116, JSXParser.RULE_htmlElements);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 903;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 902;
          this.htmlElement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 905;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
    } while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlElementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlElement;
  return this;
}

HtmlElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlElementContext.prototype.constructor = HtmlElementContext;

HtmlElementContext.prototype.LessThan = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.LessThan);
  } else {
    return this.getToken(JSXParser.LessThan, i);
  }
};

HtmlElementContext.prototype.htmlTagStartName = function() {
  return this.getTypedRuleContext(HtmlTagStartNameContext, 0);
};

HtmlElementContext.prototype.MoreThan = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.MoreThan);
  } else {
    return this.getToken(JSXParser.MoreThan, i);
  }
};

HtmlElementContext.prototype.htmlContent = function() {
  return this.getTypedRuleContext(HtmlContentContext, 0);
};

HtmlElementContext.prototype.Divide = function() {
  return this.getToken(JSXParser.Divide, 0);
};

HtmlElementContext.prototype.htmlTagClosingName = function() {
  return this.getTypedRuleContext(HtmlTagClosingNameContext, 0);
};

HtmlElementContext.prototype.htmlAttribute = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(HtmlAttributeContext);
  } else {
    return this.getTypedRuleContext(HtmlAttributeContext, i);
  }
};

HtmlElementContext.prototype.htmlTagName = function() {
  return this.getTypedRuleContext(HtmlTagNameContext, 0);
};

HtmlElementContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlElement(this);
  }
};

HtmlElementContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlElement(this);
  }
};

HtmlElementContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlElement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlElementContext = HtmlElementContext;

JSXParser.prototype.htmlElement = function() {
  var localctx = new HtmlElementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 118, JSXParser.RULE_htmlElement);
  var _la = 0; // Token type
  try {
    this.state = 955;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.match(JSXParser.LessThan);
        this.state = 908;
        this.htmlTagStartName();
        this.state = 912;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la === JSXParser.Identifier || _la === JSXParser.TagName) {
          this.state = 909;
          this.htmlAttribute();
          this.state = 914;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 915;
        this.match(JSXParser.MoreThan);
        this.state = 916;
        this.htmlContent();
        this.state = 917;
        this.match(JSXParser.LessThan);
        this.state = 918;
        this.match(JSXParser.Divide);
        this.state = 919;
        this.htmlTagClosingName();
        this.state = 920;
        this.match(JSXParser.MoreThan);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 922;
        this.match(JSXParser.LessThan);
        this.state = 923;
        this.htmlTagName();
        this.state = 927;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 97, this._ctx);
        while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if(_alt === 1) {
            this.state = 924;
            this.htmlAttribute();
          }
          this.state = 929;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 97, this._ctx);
        }

        this.state = 930;
        this.htmlContent();
        this.state = 931;
        this.match(JSXParser.Divide);
        this.state = 932;
        this.match(JSXParser.MoreThan);
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 934;
        this.match(JSXParser.LessThan);
        this.state = 935;
        this.htmlTagName();
        this.state = 939;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la === JSXParser.Identifier || _la === JSXParser.TagName) {
          this.state = 936;
          this.htmlAttribute();
          this.state = 941;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 942;
        this.match(JSXParser.Divide);
        this.state = 943;
        this.match(JSXParser.MoreThan);
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 945;
        this.match(JSXParser.LessThan);
        this.state = 946;
        this.htmlTagName();
        this.state = 950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la === JSXParser.Identifier || _la === JSXParser.TagName) {
          this.state = 947;
          this.htmlAttribute();
          this.state = 952;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 953;
        this.match(JSXParser.MoreThan);
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlContentContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlContent;
  return this;
}

HtmlContentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlContentContext.prototype.constructor = HtmlContentContext;

HtmlContentContext.prototype.htmlChardata = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(HtmlChardataContext);
  } else {
    return this.getTypedRuleContext(HtmlChardataContext, i);
  }
};

HtmlContentContext.prototype.htmlElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(HtmlElementContext);
  } else {
    return this.getTypedRuleContext(HtmlElementContext, i);
  }
};

HtmlContentContext.prototype.objectExpressionSequence = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ObjectExpressionSequenceContext);
  } else {
    return this.getTypedRuleContext(ObjectExpressionSequenceContext, i);
  }
};

HtmlContentContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlContent(this);
  }
};

HtmlContentContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlContent(this);
  }
};

HtmlContentContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlContent(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlContentContext = HtmlContentContext;

JSXParser.prototype.htmlContent = function() {
  var localctx = new HtmlContentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 120, JSXParser.RULE_htmlContent);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 958;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
    if(la_ === 1) {
      this.state = 957;
      this.htmlChardata();
    }
    this.state = 969;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 104, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 962;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case JSXParser.LessThan:
            this.state = 960;
            this.htmlElement();
            break;
          case JSXParser.OpenBrace:
            this.state = 961;
            this.objectExpressionSequence();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 965;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
        if(la_ === 1) {
          this.state = 964;
          this.htmlChardata();
        }
      }
      this.state = 971;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 104, this._ctx);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlTagStartNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlTagStartName;
  this._htmlTagName = null; // HtmlTagNameContext
  return this;
}

HtmlTagStartNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlTagStartNameContext.prototype.constructor = HtmlTagStartNameContext;

HtmlTagStartNameContext.prototype.htmlTagName = function() {
  return this.getTypedRuleContext(HtmlTagNameContext, 0);
};

HtmlTagStartNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlTagStartName(this);
  }
};

HtmlTagStartNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlTagStartName(this);
  }
};

HtmlTagStartNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlTagStartName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlTagStartNameContext = HtmlTagStartNameContext;

JSXParser.prototype.htmlTagStartName = function() {
  var localctx = new HtmlTagStartNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 122, JSXParser.RULE_htmlTagStartName);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 972;
    localctx._htmlTagName = this.htmlTagName();
    this.pushHtmlTagName(localctx._htmlTagName === null ? null : this._input.getText(new antlr4.Interval(localctx._htmlTagName.start, localctx._htmlTagName.stop)));
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlTagClosingNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlTagClosingName;
  this._htmlTagName = null; // HtmlTagNameContext
  return this;
}

HtmlTagClosingNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlTagClosingNameContext.prototype.constructor = HtmlTagClosingNameContext;

HtmlTagClosingNameContext.prototype.htmlTagName = function() {
  return this.getTypedRuleContext(HtmlTagNameContext, 0);
};

HtmlTagClosingNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlTagClosingName(this);
  }
};

HtmlTagClosingNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlTagClosingName(this);
  }
};

HtmlTagClosingNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlTagClosingName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlTagClosingNameContext = HtmlTagClosingNameContext;

JSXParser.prototype.htmlTagClosingName = function() {
  var localctx = new HtmlTagClosingNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 124, JSXParser.RULE_htmlTagClosingName);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 975;
    localctx._htmlTagName = this.htmlTagName();
    this.state = 976;
    if(!this.popHtmlTagName(localctx._htmlTagName === null ? null : this._input.getText(new antlr4.Interval(localctx._htmlTagName.start, localctx._htmlTagName.stop)))) {
      throw new antlr4.error.FailedPredicateException(this, 'this.popHtmlTagName($htmlTagName.text)');
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlTagNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlTagName;
  return this;
}

HtmlTagNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlTagNameContext.prototype.constructor = HtmlTagNameContext;

HtmlTagNameContext.prototype.TagName = function() {
  return this.getToken(JSXParser.TagName, 0);
};

HtmlTagNameContext.prototype.keyword = function() {
  return this.getTypedRuleContext(KeywordContext, 0);
};

HtmlTagNameContext.prototype.Identifier = function() {
  return this.getToken(JSXParser.Identifier, 0);
};

HtmlTagNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlTagName(this);
  }
};

HtmlTagNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlTagName(this);
  }
};

HtmlTagNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlTagName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlTagNameContext = HtmlTagNameContext;

JSXParser.prototype.htmlTagName = function() {
  var localctx = new HtmlTagNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 126, JSXParser.RULE_htmlTagName);
  try {
    this.state = 981;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.TagName:
        this.enterOuterAlt(localctx, 1);
        this.state = 978;
        this.match(JSXParser.TagName);
        break;
      case JSXParser.Break:
      case JSXParser.Do:
      case JSXParser.Instanceof:
      case JSXParser.Typeof:
      case JSXParser.Case:
      case JSXParser.Else:
      case JSXParser.New:
      case JSXParser.Var:
      case JSXParser.Catch:
      case JSXParser.Finally:
      case JSXParser.Return:
      case JSXParser.Void:
      case JSXParser.Continue:
      case JSXParser.For:
      case JSXParser.Switch:
      case JSXParser.While:
      case JSXParser.Debugger:
      case JSXParser.Function:
      case JSXParser.This:
      case JSXParser.With:
      case JSXParser.Default:
      case JSXParser.If:
      case JSXParser.Throw:
      case JSXParser.Delete:
      case JSXParser.In:
      case JSXParser.Try:
      case JSXParser.As:
      case JSXParser.From:
      case JSXParser.Class:
      case JSXParser.Enum:
      case JSXParser.Extends:
      case JSXParser.Super:
      case JSXParser.Const:
      case JSXParser.Export:
      case JSXParser.Import:
      case JSXParser.Async:
      case JSXParser.Await:
      case JSXParser.Implements:
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
      case JSXParser.Private:
      case JSXParser.Public:
      case JSXParser.Interface:
      case JSXParser.Package:
      case JSXParser.Protected:
      case JSXParser.Static:
      case JSXParser.Yield:
        this.enterOuterAlt(localctx, 2);
        this.state = 979;
        this.keyword();
        break;
      case JSXParser.Identifier:
        this.enterOuterAlt(localctx, 3);
        this.state = 980;
        this.match(JSXParser.Identifier);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlAttributeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlAttribute;
  return this;
}

HtmlAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlAttributeContext.prototype.constructor = HtmlAttributeContext;

HtmlAttributeContext.prototype.htmlAttributeName = function() {
  return this.getTypedRuleContext(HtmlAttributeNameContext, 0);
};

HtmlAttributeContext.prototype.Assign = function() {
  return this.getToken(JSXParser.Assign, 0);
};

HtmlAttributeContext.prototype.htmlAttributeValue = function() {
  return this.getTypedRuleContext(HtmlAttributeValueContext, 0);
};

HtmlAttributeContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlAttribute(this);
  }
};

HtmlAttributeContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlAttribute(this);
  }
};

HtmlAttributeContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlAttribute(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlAttributeContext = HtmlAttributeContext;

JSXParser.prototype.htmlAttribute = function() {
  var localctx = new HtmlAttributeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 128, JSXParser.RULE_htmlAttribute);
  try {
    this.state = 988;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 983;
        this.htmlAttributeName();
        this.state = 984;
        this.match(JSXParser.Assign);
        this.state = 985;
        this.htmlAttributeValue();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 987;
        this.htmlAttributeName();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlAttributeNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlAttributeName;
  return this;
}

HtmlAttributeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlAttributeNameContext.prototype.constructor = HtmlAttributeNameContext;

HtmlAttributeNameContext.prototype.TagName = function() {
  return this.getToken(JSXParser.TagName, 0);
};

HtmlAttributeNameContext.prototype.Identifier = function() {
  return this.getToken(JSXParser.Identifier, 0);
};

HtmlAttributeNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlAttributeName(this);
  }
};

HtmlAttributeNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlAttributeName(this);
  }
};

HtmlAttributeNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlAttributeName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlAttributeNameContext = HtmlAttributeNameContext;

JSXParser.prototype.htmlAttributeName = function() {
  var localctx = new HtmlAttributeNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 130, JSXParser.RULE_htmlAttributeName);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 990;
    _la = this._input.LA(1);
    if(!(_la === JSXParser.Identifier || _la === JSXParser.TagName)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlChardataContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlChardata;
  return this;
}

HtmlChardataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlChardataContext.prototype.constructor = HtmlChardataContext;

HtmlChardataContext.prototype.LessThan = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.LessThan);
  } else {
    return this.getToken(JSXParser.LessThan, i);
  }
};

HtmlChardataContext.prototype.OpenBrace = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.OpenBrace);
  } else {
    return this.getToken(JSXParser.OpenBrace, i);
  }
};

HtmlChardataContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlChardata(this);
  }
};

HtmlChardataContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlChardata(this);
  }
};

HtmlChardataContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlChardata(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlChardataContext = HtmlChardataContext;

JSXParser.prototype.htmlChardata = function() {
  var localctx = new HtmlChardataContext(this, this._ctx, this.state);
  this.enterRule(localctx, 132, JSXParser.RULE_htmlChardata);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 993;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 992;
          _la = this._input.LA(1);
          if(_la <= 0 || _la === JSXParser.OpenBrace || _la === JSXParser.LessThan) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 995;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 107, this._ctx);
    } while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function HtmlAttributeValueContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_htmlAttributeValue;
  return this;
}

HtmlAttributeValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlAttributeValueContext.prototype.constructor = HtmlAttributeValueContext;

HtmlAttributeValueContext.prototype.AttributeValue = function() {
  return this.getToken(JSXParser.AttributeValue, 0);
};

HtmlAttributeValueContext.prototype.StringLiteral = function() {
  return this.getToken(JSXParser.StringLiteral, 0);
};

HtmlAttributeValueContext.prototype.objectExpressionSequence = function() {
  return this.getTypedRuleContext(ObjectExpressionSequenceContext, 0);
};

HtmlAttributeValueContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterHtmlAttributeValue(this);
  }
};

HtmlAttributeValueContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitHtmlAttributeValue(this);
  }
};

HtmlAttributeValueContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitHtmlAttributeValue(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.HtmlAttributeValueContext = HtmlAttributeValueContext;

JSXParser.prototype.htmlAttributeValue = function() {
  var localctx = new HtmlAttributeValueContext(this, this._ctx, this.state);
  this.enterRule(localctx, 134, JSXParser.RULE_htmlAttributeValue);
  try {
    this.state = 1000;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.AttributeValue:
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.match(JSXParser.AttributeValue);
        break;
      case JSXParser.StringLiteral:
        this.enterOuterAlt(localctx, 2);
        this.state = 998;
        this.match(JSXParser.StringLiteral);
        break;
      case JSXParser.OpenBrace:
        this.enterOuterAlt(localctx, 3);
        this.state = 999;
        this.objectExpressionSequence();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AssignableContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_assignable;
  return this;
}

AssignableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignableContext.prototype.constructor = AssignableContext;

AssignableContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

AssignableContext.prototype.arrayLiteral = function() {
  return this.getTypedRuleContext(ArrayLiteralContext, 0);
};

AssignableContext.prototype.objectLiteral = function() {
  return this.getTypedRuleContext(ObjectLiteralContext, 0);
};

AssignableContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAssignable(this);
  }
};

AssignableContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAssignable(this);
  }
};

AssignableContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAssignable(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.AssignableContext = AssignableContext;

JSXParser.prototype.assignable = function() {
  var localctx = new AssignableContext(this, this._ctx, this.state);
  this.enterRule(localctx, 136, JSXParser.RULE_assignable);
  try {
    this.state = 1005;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Async:
      case JSXParser.NonStrictLet:
      case JSXParser.Identifier:
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this.identifier();
        break;
      case JSXParser.OpenBracket:
        this.enterOuterAlt(localctx, 2);
        this.state = 1003;
        this.arrayLiteral();
        break;
      case JSXParser.OpenBrace:
        this.enterOuterAlt(localctx, 3);
        this.state = 1004;
        this.objectLiteral();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ObjectLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_objectLiteral;
  return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

ObjectLiteralContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

ObjectLiteralContext.prototype.propertyAssignment = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(PropertyAssignmentContext);
  } else {
    return this.getTypedRuleContext(PropertyAssignmentContext, i);
  }
};

ObjectLiteralContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(JSXParser.Comma);
  } else {
    return this.getToken(JSXParser.Comma, i);
  }
};

ObjectLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterObjectLiteral(this);
  }
};

ObjectLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitObjectLiteral(this);
  }
};

ObjectLiteralContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitObjectLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ObjectLiteralContext = ObjectLiteralContext;

JSXParser.prototype.objectLiteral = function() {
  var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 138, JSXParser.RULE_objectLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1007;
    this.match(JSXParser.OpenBrace);
    this.state = 1016;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(
      (((_la - 4) & ~0x1f) == 0 &&
        ((1 << (_la - 4)) &
          ((1 << (JSXParser.RegularExpressionLiteral - 4)) |
            (1 << (JSXParser.OpenBracket - 4)) |
            (1 << (JSXParser.OpenParen - 4)) |
            (1 << (JSXParser.OpenBrace - 4)) |
            (1 << (JSXParser.Ellipsis - 4)) |
            (1 << (JSXParser.PlusPlus - 4)) |
            (1 << (JSXParser.MinusMinus - 4)) |
            (1 << (JSXParser.Plus - 4)) |
            (1 << (JSXParser.Minus - 4)) |
            (1 << (JSXParser.BitNot - 4)) |
            (1 << (JSXParser.Not - 4)) |
            (1 << (JSXParser.Multiply - 4)) |
            (1 << (JSXParser.LessThan - 4)))) !==
          0) ||
      (((_la - 59) & ~0x1f) == 0 &&
        ((1 << (_la - 59)) &
          ((1 << (JSXParser.NullLiteral - 59)) |
            (1 << (JSXParser.BooleanLiteral - 59)) |
            (1 << (JSXParser.DecimalLiteral - 59)) |
            (1 << (JSXParser.HexIntegerLiteral - 59)) |
            (1 << (JSXParser.OctalIntegerLiteral - 59)) |
            (1 << (JSXParser.OctalIntegerLiteral2 - 59)) |
            (1 << (JSXParser.BinaryIntegerLiteral - 59)) |
            (1 << (JSXParser.BigHexIntegerLiteral - 59)) |
            (1 << (JSXParser.BigOctalIntegerLiteral - 59)) |
            (1 << (JSXParser.BigBinaryIntegerLiteral - 59)) |
            (1 << (JSXParser.BigDecimalIntegerLiteral - 59)) |
            (1 << (JSXParser.Break - 59)) |
            (1 << (JSXParser.Do - 59)) |
            (1 << (JSXParser.Instanceof - 59)) |
            (1 << (JSXParser.Typeof - 59)) |
            (1 << (JSXParser.Case - 59)) |
            (1 << (JSXParser.Else - 59)) |
            (1 << (JSXParser.New - 59)) |
            (1 << (JSXParser.Var - 59)) |
            (1 << (JSXParser.Catch - 59)) |
            (1 << (JSXParser.Finally - 59)) |
            (1 << (JSXParser.Return - 59)) |
            (1 << (JSXParser.Void - 59)) |
            (1 << (JSXParser.Continue - 59)) |
            (1 << (JSXParser.For - 59)) |
            (1 << (JSXParser.Switch - 59)) |
            (1 << (JSXParser.While - 59)) |
            (1 << (JSXParser.Debugger - 59)) |
            (1 << (JSXParser.Function - 59)) |
            (1 << (JSXParser.This - 59)) |
            (1 << (JSXParser.With - 59)) |
            (1 << (JSXParser.Default - 59)))) !==
          0) ||
      (((_la - 91) & ~0x1f) == 0 &&
        ((1 << (_la - 91)) &
          ((1 << (JSXParser.If - 91)) |
            (1 << (JSXParser.Throw - 91)) |
            (1 << (JSXParser.Delete - 91)) |
            (1 << (JSXParser.In - 91)) |
            (1 << (JSXParser.Try - 91)) |
            (1 << (JSXParser.As - 91)) |
            (1 << (JSXParser.From - 91)) |
            (1 << (JSXParser.Class - 91)) |
            (1 << (JSXParser.Enum - 91)) |
            (1 << (JSXParser.Extends - 91)) |
            (1 << (JSXParser.Super - 91)) |
            (1 << (JSXParser.Const - 91)) |
            (1 << (JSXParser.Export - 91)) |
            (1 << (JSXParser.Import - 91)) |
            (1 << (JSXParser.Async - 91)) |
            (1 << (JSXParser.Await - 91)) |
            (1 << (JSXParser.Implements - 91)) |
            (1 << (JSXParser.StrictLet - 91)) |
            (1 << (JSXParser.NonStrictLet - 91)) |
            (1 << (JSXParser.Private - 91)) |
            (1 << (JSXParser.Public - 91)) |
            (1 << (JSXParser.Interface - 91)) |
            (1 << (JSXParser.Package - 91)) |
            (1 << (JSXParser.Protected - 91)) |
            (1 << (JSXParser.Static - 91)) |
            (1 << (JSXParser.Yield - 91)) |
            (1 << (JSXParser.Identifier - 91)) |
            (1 << (JSXParser.StringLiteral - 91)) |
            (1 << (JSXParser.TemplateStringLiteral - 91)))) !==
          0)
    ) {
      this.state = 1008;
      this.propertyAssignment();
      this.state = 1013;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 110, this._ctx);
      while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if(_alt === 1) {
          this.state = 1009;
          this.match(JSXParser.Comma);
          this.state = 1010;
          this.propertyAssignment();
        }
        this.state = 1015;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 110, this._ctx);
      }
    }

    this.state = 1019;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === JSXParser.Comma) {
      this.state = 1018;
      this.match(JSXParser.Comma);
    }

    this.state = 1021;
    this.match(JSXParser.CloseBrace);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ObjectExpressionSequenceContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_objectExpressionSequence;
  return this;
}

ObjectExpressionSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectExpressionSequenceContext.prototype.constructor = ObjectExpressionSequenceContext;

ObjectExpressionSequenceContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

ObjectExpressionSequenceContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ObjectExpressionSequenceContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

ObjectExpressionSequenceContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterObjectExpressionSequence(this);
  }
};

ObjectExpressionSequenceContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitObjectExpressionSequence(this);
  }
};

ObjectExpressionSequenceContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitObjectExpressionSequence(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ObjectExpressionSequenceContext = ObjectExpressionSequenceContext;

JSXParser.prototype.objectExpressionSequence = function() {
  var localctx = new ObjectExpressionSequenceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 140, JSXParser.RULE_objectExpressionSequence);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1023;
    this.match(JSXParser.OpenBrace);
    this.state = 1024;
    this.expressionSequence();
    this.state = 1025;
    this.match(JSXParser.CloseBrace);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AnoymousFunctionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_anoymousFunction;
  return this;
}

AnoymousFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnoymousFunctionContext.prototype.constructor = AnoymousFunctionContext;

AnoymousFunctionContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AnoymousFunctionDeclContext(parser, ctx) {
  AnoymousFunctionContext.call(this, parser);
  AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AnoymousFunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
AnoymousFunctionDeclContext.prototype.constructor = AnoymousFunctionDeclContext;

JSXParser.AnoymousFunctionDeclContext = AnoymousFunctionDeclContext;

AnoymousFunctionDeclContext.prototype.Function = function() {
  return this.getToken(JSXParser.Function, 0);
};

AnoymousFunctionDeclContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

AnoymousFunctionDeclContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

AnoymousFunctionDeclContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

AnoymousFunctionDeclContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

AnoymousFunctionDeclContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

AnoymousFunctionDeclContext.prototype.Async = function() {
  return this.getToken(JSXParser.Async, 0);
};

AnoymousFunctionDeclContext.prototype.Multiply = function() {
  return this.getToken(JSXParser.Multiply, 0);
};

AnoymousFunctionDeclContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};
AnoymousFunctionDeclContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAnoymousFunctionDecl(this);
  }
};

AnoymousFunctionDeclContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAnoymousFunctionDecl(this);
  }
};

AnoymousFunctionDeclContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAnoymousFunctionDecl(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function ArrowFunctionContext(parser, ctx) {
  AnoymousFunctionContext.call(this, parser);
  AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ArrowFunctionContext.prototype = Object.create(AnoymousFunctionContext.prototype);
ArrowFunctionContext.prototype.constructor = ArrowFunctionContext;

JSXParser.ArrowFunctionContext = ArrowFunctionContext;

ArrowFunctionContext.prototype.arrowFunctionParameters = function() {
  return this.getTypedRuleContext(ArrowFunctionParametersContext, 0);
};

ArrowFunctionContext.prototype.ARROW = function() {
  return this.getToken(JSXParser.ARROW, 0);
};

ArrowFunctionContext.prototype.arrowFunctionBody = function() {
  return this.getTypedRuleContext(ArrowFunctionBodyContext, 0);
};

ArrowFunctionContext.prototype.Async = function() {
  return this.getToken(JSXParser.Async, 0);
};
ArrowFunctionContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArrowFunction(this);
  }
};

ArrowFunctionContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArrowFunction(this);
  }
};

ArrowFunctionContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArrowFunction(this);
  } else {
    return visitor.visitChildren(this);
  }
};

function FunctionDeclContext(parser, ctx) {
  AnoymousFunctionContext.call(this, parser);
  AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

FunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
FunctionDeclContext.prototype.constructor = FunctionDeclContext;

JSXParser.FunctionDeclContext = FunctionDeclContext;

FunctionDeclContext.prototype.functionDeclaration = function() {
  return this.getTypedRuleContext(FunctionDeclarationContext, 0);
};
FunctionDeclContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterFunctionDecl(this);
  }
};

FunctionDeclContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitFunctionDecl(this);
  }
};

FunctionDeclContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitFunctionDecl(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.AnoymousFunctionContext = AnoymousFunctionContext;

JSXParser.prototype.anoymousFunction = function() {
  var localctx = new AnoymousFunctionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 142, JSXParser.RULE_anoymousFunction);
  var _la = 0; // Token type
  try {
    this.state = 1051;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);
    switch (la_) {
      case 1:
        localctx = new FunctionDeclContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1027;
        this.functionDeclaration();
        break;

      case 2:
        localctx = new AnoymousFunctionDeclContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 1029;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Async) {
          this.state = 1028;
          this.match(JSXParser.Async);
        }

        this.state = 1031;
        this.match(JSXParser.Function);
        this.state = 1033;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la === JSXParser.Multiply) {
          this.state = 1032;
          this.match(JSXParser.Multiply);
        }

        this.state = 1035;
        this.match(JSXParser.OpenParen);
        this.state = 1037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << JSXParser.OpenBracket) | (1 << JSXParser.OpenBrace) | (1 << JSXParser.Ellipsis))) !== 0) || (((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
          this.state = 1036;
          this.formalParameterList();
        }

        this.state = 1039;
        this.match(JSXParser.CloseParen);
        this.state = 1040;
        this.match(JSXParser.OpenBrace);
        this.state = 1041;
        this.functionBody();
        this.state = 1042;
        this.match(JSXParser.CloseBrace);
        break;

      case 3:
        localctx = new ArrowFunctionContext(this, localctx);
        this.enterOuterAlt(localctx, 3);
        this.state = 1045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 116, this._ctx);
        if(la_ === 1) {
          this.state = 1044;
          this.match(JSXParser.Async);
        }
        this.state = 1047;
        this.arrowFunctionParameters();
        this.state = 1048;
        this.match(JSXParser.ARROW);
        this.state = 1049;
        this.arrowFunctionBody();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArrowFunctionParametersContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_arrowFunctionParameters;
  return this;
}

ArrowFunctionParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionParametersContext.prototype.constructor = ArrowFunctionParametersContext;

ArrowFunctionParametersContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

ArrowFunctionParametersContext.prototype.OpenParen = function() {
  return this.getToken(JSXParser.OpenParen, 0);
};

ArrowFunctionParametersContext.prototype.CloseParen = function() {
  return this.getToken(JSXParser.CloseParen, 0);
};

ArrowFunctionParametersContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};

ArrowFunctionParametersContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArrowFunctionParameters(this);
  }
};

ArrowFunctionParametersContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArrowFunctionParameters(this);
  }
};

ArrowFunctionParametersContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArrowFunctionParameters(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;

JSXParser.prototype.arrowFunctionParameters = function() {
  var localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 144, JSXParser.RULE_arrowFunctionParameters);
  var _la = 0; // Token type
  try {
    this.state = 1059;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Async:
      case JSXParser.NonStrictLet:
      case JSXParser.Identifier:
        this.enterOuterAlt(localctx, 1);
        this.state = 1053;
        this.identifier();
        break;
      case JSXParser.OpenParen:
        this.enterOuterAlt(localctx, 2);
        this.state = 1054;
        this.match(JSXParser.OpenParen);
        this.state = 1056;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << JSXParser.OpenBracket) | (1 << JSXParser.OpenBrace) | (1 << JSXParser.Ellipsis))) !== 0) || (((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
          this.state = 1055;
          this.formalParameterList();
        }

        this.state = 1058;
        this.match(JSXParser.CloseParen);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArrowFunctionBodyContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_arrowFunctionBody;
  return this;
}

ArrowFunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionBodyContext.prototype.constructor = ArrowFunctionBodyContext;

ArrowFunctionBodyContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArrowFunctionBodyContext.prototype.OpenBrace = function() {
  return this.getToken(JSXParser.OpenBrace, 0);
};

ArrowFunctionBodyContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

ArrowFunctionBodyContext.prototype.CloseBrace = function() {
  return this.getToken(JSXParser.CloseBrace, 0);
};

ArrowFunctionBodyContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterArrowFunctionBody(this);
  }
};

ArrowFunctionBodyContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitArrowFunctionBody(this);
  }
};

ArrowFunctionBodyContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitArrowFunctionBody(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;

JSXParser.prototype.arrowFunctionBody = function() {
  var localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 146, JSXParser.RULE_arrowFunctionBody);
  try {
    this.state = 1066;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 120, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1061;
        this.singleExpression(0);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1062;
        this.match(JSXParser.OpenBrace);
        this.state = 1063;
        this.functionBody();
        this.state = 1064;
        this.match(JSXParser.CloseBrace);
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_assignmentOperator;
  return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
  return this.getToken(JSXParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
  return this.getToken(JSXParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModulusAssign = function() {
  return this.getToken(JSXParser.ModulusAssign, 0);
};

AssignmentOperatorContext.prototype.PlusAssign = function() {
  return this.getToken(JSXParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
  return this.getToken(JSXParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
  return this.getToken(JSXParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
  return this.getToken(JSXParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
  return this.getToken(JSXParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
  return this.getToken(JSXParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
  return this.getToken(JSXParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
  return this.getToken(JSXParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
  return this.getToken(JSXParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterAssignmentOperator(this);
  }
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitAssignmentOperator(this);
  }
};

AssignmentOperatorContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitAssignmentOperator(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.AssignmentOperatorContext = AssignmentOperatorContext;

JSXParser.prototype.assignmentOperator = function() {
  var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 148, JSXParser.RULE_assignmentOperator);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1068;
    _la = this._input.LA(1);
    if(
      !(
        ((_la - 46) & ~0x1f) == 0 &&
        ((1 << (_la - 46)) &
          ((1 << (JSXParser.MultiplyAssign - 46)) |
            (1 << (JSXParser.DivideAssign - 46)) |
            (1 << (JSXParser.ModulusAssign - 46)) |
            (1 << (JSXParser.PlusAssign - 46)) |
            (1 << (JSXParser.MinusAssign - 46)) |
            (1 << (JSXParser.LeftShiftArithmeticAssign - 46)) |
            (1 << (JSXParser.RightShiftArithmeticAssign - 46)) |
            (1 << (JSXParser.RightShiftLogicalAssign - 46)) |
            (1 << (JSXParser.BitAndAssign - 46)) |
            (1 << (JSXParser.BitXorAssign - 46)) |
            (1 << (JSXParser.BitOrAssign - 46)) |
            (1 << (JSXParser.PowerAssign - 46)))) !==
          0
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function LiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_literal;
  return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
  return this.getToken(JSXParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
  return this.getToken(JSXParser.BooleanLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
  return this.getToken(JSXParser.StringLiteral, 0);
};

LiteralContext.prototype.TemplateStringLiteral = function() {
  return this.getToken(JSXParser.TemplateStringLiteral, 0);
};

LiteralContext.prototype.RegularExpressionLiteral = function() {
  return this.getToken(JSXParser.RegularExpressionLiteral, 0);
};

LiteralContext.prototype.numericLiteral = function() {
  return this.getTypedRuleContext(NumericLiteralContext, 0);
};

LiteralContext.prototype.bigintLiteral = function() {
  return this.getTypedRuleContext(BigintLiteralContext, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterLiteral(this);
  }
};

LiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitLiteral(this);
  }
};

LiteralContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.LiteralContext = LiteralContext;

JSXParser.prototype.literal = function() {
  var localctx = new LiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 150, JSXParser.RULE_literal);
  try {
    this.state = 1077;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.NullLiteral:
        this.enterOuterAlt(localctx, 1);
        this.state = 1070;
        this.match(JSXParser.NullLiteral);
        break;
      case JSXParser.BooleanLiteral:
        this.enterOuterAlt(localctx, 2);
        this.state = 1071;
        this.match(JSXParser.BooleanLiteral);
        break;
      case JSXParser.StringLiteral:
        this.enterOuterAlt(localctx, 3);
        this.state = 1072;
        this.match(JSXParser.StringLiteral);
        break;
      case JSXParser.TemplateStringLiteral:
        this.enterOuterAlt(localctx, 4);
        this.state = 1073;
        this.match(JSXParser.TemplateStringLiteral);
        break;
      case JSXParser.RegularExpressionLiteral:
        this.enterOuterAlt(localctx, 5);
        this.state = 1074;
        this.match(JSXParser.RegularExpressionLiteral);
        break;
      case JSXParser.DecimalLiteral:
      case JSXParser.HexIntegerLiteral:
      case JSXParser.OctalIntegerLiteral:
      case JSXParser.OctalIntegerLiteral2:
      case JSXParser.BinaryIntegerLiteral:
        this.enterOuterAlt(localctx, 6);
        this.state = 1075;
        this.numericLiteral();
        break;
      case JSXParser.BigHexIntegerLiteral:
      case JSXParser.BigOctalIntegerLiteral:
      case JSXParser.BigBinaryIntegerLiteral:
      case JSXParser.BigDecimalIntegerLiteral:
        this.enterOuterAlt(localctx, 7);
        this.state = 1076;
        this.bigintLiteral();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function NumericLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_numericLiteral;
  return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.DecimalLiteral = function() {
  return this.getToken(JSXParser.DecimalLiteral, 0);
};

NumericLiteralContext.prototype.HexIntegerLiteral = function() {
  return this.getToken(JSXParser.HexIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral = function() {
  return this.getToken(JSXParser.OctalIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral2 = function() {
  return this.getToken(JSXParser.OctalIntegerLiteral2, 0);
};

NumericLiteralContext.prototype.BinaryIntegerLiteral = function() {
  return this.getToken(JSXParser.BinaryIntegerLiteral, 0);
};

NumericLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterNumericLiteral(this);
  }
};

NumericLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitNumericLiteral(this);
  }
};

NumericLiteralContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitNumericLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.NumericLiteralContext = NumericLiteralContext;

JSXParser.prototype.numericLiteral = function() {
  var localctx = new NumericLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 152, JSXParser.RULE_numericLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1079;
    _la = this._input.LA(1);
    if(!(((_la - 61) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (JSXParser.DecimalLiteral - 61)) | (1 << (JSXParser.HexIntegerLiteral - 61)) | (1 << (JSXParser.OctalIntegerLiteral - 61)) | (1 << (JSXParser.OctalIntegerLiteral2 - 61)) | (1 << (JSXParser.BinaryIntegerLiteral - 61)))) !== 0)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function BigintLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_bigintLiteral;
  return this;
}

BigintLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BigintLiteralContext.prototype.constructor = BigintLiteralContext;

BigintLiteralContext.prototype.BigDecimalIntegerLiteral = function() {
  return this.getToken(JSXParser.BigDecimalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigHexIntegerLiteral = function() {
  return this.getToken(JSXParser.BigHexIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigOctalIntegerLiteral = function() {
  return this.getToken(JSXParser.BigOctalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigBinaryIntegerLiteral = function() {
  return this.getToken(JSXParser.BigBinaryIntegerLiteral, 0);
};

BigintLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterBigintLiteral(this);
  }
};

BigintLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitBigintLiteral(this);
  }
};

BigintLiteralContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitBigintLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.BigintLiteralContext = BigintLiteralContext;

JSXParser.prototype.bigintLiteral = function() {
  var localctx = new BigintLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 154, JSXParser.RULE_bigintLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1081;
    _la = this._input.LA(1);
    if(!(((_la - 66) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (JSXParser.BigHexIntegerLiteral - 66)) | (1 << (JSXParser.BigOctalIntegerLiteral - 66)) | (1 << (JSXParser.BigBinaryIntegerLiteral - 66)) | (1 << (JSXParser.BigDecimalIntegerLiteral - 66)))) !== 0)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function GetterContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_getter;
  return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

GetterContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

GetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterGetter(this);
  }
};

GetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitGetter(this);
  }
};

GetterContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitGetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.GetterContext = GetterContext;

JSXParser.prototype.getter = function() {
  var localctx = new GetterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 156, JSXParser.RULE_getter);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1083;
    this.identifier();
    this.state = 1084;
    if(!this.p('get')) {
      throw new antlr4.error.FailedPredicateException(this, 'this.p("get")');
    }
    this.state = 1085;
    this.propertyName();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SetterContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_setter;
  return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

SetterContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

SetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterSetter(this);
  }
};

SetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitSetter(this);
  }
};

SetterContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitSetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.SetterContext = SetterContext;

JSXParser.prototype.setter = function() {
  var localctx = new SetterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 158, JSXParser.RULE_setter);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1087;
    this.identifier();
    this.state = 1088;
    if(!this.p('set')) {
      throw new antlr4.error.FailedPredicateException(this, 'this.p("set")');
    }
    this.state = 1089;
    this.propertyName();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IdentifierNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_identifierName;
  return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
  return this.getTypedRuleContext(ReservedWordContext, 0);
};

IdentifierNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterIdentifierName(this);
  }
};

IdentifierNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitIdentifierName(this);
  }
};

IdentifierNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitIdentifierName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.IdentifierNameContext = IdentifierNameContext;

JSXParser.prototype.identifierName = function() {
  var localctx = new IdentifierNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 160, JSXParser.RULE_identifierName);
  try {
    this.state = 1093;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 122, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1091;
        this.identifier();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1092;
        this.reservedWord();
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_identifier;
  return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
  return this.getToken(JSXParser.Identifier, 0);
};

IdentifierContext.prototype.NonStrictLet = function() {
  return this.getToken(JSXParser.NonStrictLet, 0);
};

IdentifierContext.prototype.Async = function() {
  return this.getToken(JSXParser.Async, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterIdentifier(this);
  }
};

IdentifierContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitIdentifier(this);
  }
};

IdentifierContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitIdentifier(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.IdentifierContext = IdentifierContext;

JSXParser.prototype.identifier = function() {
  var localctx = new IdentifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 162, JSXParser.RULE_identifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1095;
    _la = this._input.LA(1);
    if(!(((_la - 105) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JSXParser.Async - 105)) | (1 << (JSXParser.NonStrictLet - 105)) | (1 << (JSXParser.Identifier - 105)))) !== 0)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_reservedWord;
  return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
  return this.getTypedRuleContext(KeywordContext, 0);
};

ReservedWordContext.prototype.NullLiteral = function() {
  return this.getToken(JSXParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
  return this.getToken(JSXParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterReservedWord(this);
  }
};

ReservedWordContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitReservedWord(this);
  }
};

ReservedWordContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitReservedWord(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.ReservedWordContext = ReservedWordContext;

JSXParser.prototype.reservedWord = function() {
  var localctx = new ReservedWordContext(this, this._ctx, this.state);
  this.enterRule(localctx, 164, JSXParser.RULE_reservedWord);
  try {
    this.state = 1100;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Break:
      case JSXParser.Do:
      case JSXParser.Instanceof:
      case JSXParser.Typeof:
      case JSXParser.Case:
      case JSXParser.Else:
      case JSXParser.New:
      case JSXParser.Var:
      case JSXParser.Catch:
      case JSXParser.Finally:
      case JSXParser.Return:
      case JSXParser.Void:
      case JSXParser.Continue:
      case JSXParser.For:
      case JSXParser.Switch:
      case JSXParser.While:
      case JSXParser.Debugger:
      case JSXParser.Function:
      case JSXParser.This:
      case JSXParser.With:
      case JSXParser.Default:
      case JSXParser.If:
      case JSXParser.Throw:
      case JSXParser.Delete:
      case JSXParser.In:
      case JSXParser.Try:
      case JSXParser.As:
      case JSXParser.From:
      case JSXParser.Class:
      case JSXParser.Enum:
      case JSXParser.Extends:
      case JSXParser.Super:
      case JSXParser.Const:
      case JSXParser.Export:
      case JSXParser.Import:
      case JSXParser.Async:
      case JSXParser.Await:
      case JSXParser.Implements:
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
      case JSXParser.Private:
      case JSXParser.Public:
      case JSXParser.Interface:
      case JSXParser.Package:
      case JSXParser.Protected:
      case JSXParser.Static:
      case JSXParser.Yield:
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        this.keyword();
        break;
      case JSXParser.NullLiteral:
        this.enterOuterAlt(localctx, 2);
        this.state = 1098;
        this.match(JSXParser.NullLiteral);
        break;
      case JSXParser.BooleanLiteral:
        this.enterOuterAlt(localctx, 3);
        this.state = 1099;
        this.match(JSXParser.BooleanLiteral);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function KeywordContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_keyword;
  return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Break = function() {
  return this.getToken(JSXParser.Break, 0);
};

KeywordContext.prototype.Do = function() {
  return this.getToken(JSXParser.Do, 0);
};

KeywordContext.prototype.Instanceof = function() {
  return this.getToken(JSXParser.Instanceof, 0);
};

KeywordContext.prototype.Typeof = function() {
  return this.getToken(JSXParser.Typeof, 0);
};

KeywordContext.prototype.Case = function() {
  return this.getToken(JSXParser.Case, 0);
};

KeywordContext.prototype.Else = function() {
  return this.getToken(JSXParser.Else, 0);
};

KeywordContext.prototype.New = function() {
  return this.getToken(JSXParser.New, 0);
};

KeywordContext.prototype.Var = function() {
  return this.getToken(JSXParser.Var, 0);
};

KeywordContext.prototype.Catch = function() {
  return this.getToken(JSXParser.Catch, 0);
};

KeywordContext.prototype.Finally = function() {
  return this.getToken(JSXParser.Finally, 0);
};

KeywordContext.prototype.Return = function() {
  return this.getToken(JSXParser.Return, 0);
};

KeywordContext.prototype.Void = function() {
  return this.getToken(JSXParser.Void, 0);
};

KeywordContext.prototype.Continue = function() {
  return this.getToken(JSXParser.Continue, 0);
};

KeywordContext.prototype.For = function() {
  return this.getToken(JSXParser.For, 0);
};

KeywordContext.prototype.Switch = function() {
  return this.getToken(JSXParser.Switch, 0);
};

KeywordContext.prototype.While = function() {
  return this.getToken(JSXParser.While, 0);
};

KeywordContext.prototype.Debugger = function() {
  return this.getToken(JSXParser.Debugger, 0);
};

KeywordContext.prototype.Function = function() {
  return this.getToken(JSXParser.Function, 0);
};

KeywordContext.prototype.This = function() {
  return this.getToken(JSXParser.This, 0);
};

KeywordContext.prototype.With = function() {
  return this.getToken(JSXParser.With, 0);
};

KeywordContext.prototype.Default = function() {
  return this.getToken(JSXParser.Default, 0);
};

KeywordContext.prototype.If = function() {
  return this.getToken(JSXParser.If, 0);
};

KeywordContext.prototype.Throw = function() {
  return this.getToken(JSXParser.Throw, 0);
};

KeywordContext.prototype.Delete = function() {
  return this.getToken(JSXParser.Delete, 0);
};

KeywordContext.prototype.In = function() {
  return this.getToken(JSXParser.In, 0);
};

KeywordContext.prototype.Try = function() {
  return this.getToken(JSXParser.Try, 0);
};

KeywordContext.prototype.Class = function() {
  return this.getToken(JSXParser.Class, 0);
};

KeywordContext.prototype.Enum = function() {
  return this.getToken(JSXParser.Enum, 0);
};

KeywordContext.prototype.Extends = function() {
  return this.getToken(JSXParser.Extends, 0);
};

KeywordContext.prototype.Super = function() {
  return this.getToken(JSXParser.Super, 0);
};

KeywordContext.prototype.Const = function() {
  return this.getToken(JSXParser.Const, 0);
};

KeywordContext.prototype.Export = function() {
  return this.getToken(JSXParser.Export, 0);
};

KeywordContext.prototype.Import = function() {
  return this.getToken(JSXParser.Import, 0);
};

KeywordContext.prototype.Implements = function() {
  return this.getToken(JSXParser.Implements, 0);
};

KeywordContext.prototype.let = function() {
  return this.getTypedRuleContext(LetContext, 0);
};

KeywordContext.prototype.Private = function() {
  return this.getToken(JSXParser.Private, 0);
};

KeywordContext.prototype.Public = function() {
  return this.getToken(JSXParser.Public, 0);
};

KeywordContext.prototype.Interface = function() {
  return this.getToken(JSXParser.Interface, 0);
};

KeywordContext.prototype.Package = function() {
  return this.getToken(JSXParser.Package, 0);
};

KeywordContext.prototype.Protected = function() {
  return this.getToken(JSXParser.Protected, 0);
};

KeywordContext.prototype.Static = function() {
  return this.getToken(JSXParser.Static, 0);
};

KeywordContext.prototype.Yield = function() {
  return this.getToken(JSXParser.Yield, 0);
};

KeywordContext.prototype.Async = function() {
  return this.getToken(JSXParser.Async, 0);
};

KeywordContext.prototype.Await = function() {
  return this.getToken(JSXParser.Await, 0);
};

KeywordContext.prototype.From = function() {
  return this.getToken(JSXParser.From, 0);
};

KeywordContext.prototype.As = function() {
  return this.getToken(JSXParser.As, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterKeyword(this);
  }
};

KeywordContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitKeyword(this);
  }
};

KeywordContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitKeyword(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.KeywordContext = KeywordContext;

JSXParser.prototype.keyword = function() {
  var localctx = new KeywordContext(this, this._ctx, this.state);
  this.enterRule(localctx, 166, JSXParser.RULE_keyword);
  try {
    this.state = 1148;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case JSXParser.Break:
        this.enterOuterAlt(localctx, 1);
        this.state = 1102;
        this.match(JSXParser.Break);
        break;
      case JSXParser.Do:
        this.enterOuterAlt(localctx, 2);
        this.state = 1103;
        this.match(JSXParser.Do);
        break;
      case JSXParser.Instanceof:
        this.enterOuterAlt(localctx, 3);
        this.state = 1104;
        this.match(JSXParser.Instanceof);
        break;
      case JSXParser.Typeof:
        this.enterOuterAlt(localctx, 4);
        this.state = 1105;
        this.match(JSXParser.Typeof);
        break;
      case JSXParser.Case:
        this.enterOuterAlt(localctx, 5);
        this.state = 1106;
        this.match(JSXParser.Case);
        break;
      case JSXParser.Else:
        this.enterOuterAlt(localctx, 6);
        this.state = 1107;
        this.match(JSXParser.Else);
        break;
      case JSXParser.New:
        this.enterOuterAlt(localctx, 7);
        this.state = 1108;
        this.match(JSXParser.New);
        break;
      case JSXParser.Var:
        this.enterOuterAlt(localctx, 8);
        this.state = 1109;
        this.match(JSXParser.Var);
        break;
      case JSXParser.Catch:
        this.enterOuterAlt(localctx, 9);
        this.state = 1110;
        this.match(JSXParser.Catch);
        break;
      case JSXParser.Finally:
        this.enterOuterAlt(localctx, 10);
        this.state = 1111;
        this.match(JSXParser.Finally);
        break;
      case JSXParser.Return:
        this.enterOuterAlt(localctx, 11);
        this.state = 1112;
        this.match(JSXParser.Return);
        break;
      case JSXParser.Void:
        this.enterOuterAlt(localctx, 12);
        this.state = 1113;
        this.match(JSXParser.Void);
        break;
      case JSXParser.Continue:
        this.enterOuterAlt(localctx, 13);
        this.state = 1114;
        this.match(JSXParser.Continue);
        break;
      case JSXParser.For:
        this.enterOuterAlt(localctx, 14);
        this.state = 1115;
        this.match(JSXParser.For);
        break;
      case JSXParser.Switch:
        this.enterOuterAlt(localctx, 15);
        this.state = 1116;
        this.match(JSXParser.Switch);
        break;
      case JSXParser.While:
        this.enterOuterAlt(localctx, 16);
        this.state = 1117;
        this.match(JSXParser.While);
        break;
      case JSXParser.Debugger:
        this.enterOuterAlt(localctx, 17);
        this.state = 1118;
        this.match(JSXParser.Debugger);
        break;
      case JSXParser.Function:
        this.enterOuterAlt(localctx, 18);
        this.state = 1119;
        this.match(JSXParser.Function);
        break;
      case JSXParser.This:
        this.enterOuterAlt(localctx, 19);
        this.state = 1120;
        this.match(JSXParser.This);
        break;
      case JSXParser.With:
        this.enterOuterAlt(localctx, 20);
        this.state = 1121;
        this.match(JSXParser.With);
        break;
      case JSXParser.Default:
        this.enterOuterAlt(localctx, 21);
        this.state = 1122;
        this.match(JSXParser.Default);
        break;
      case JSXParser.If:
        this.enterOuterAlt(localctx, 22);
        this.state = 1123;
        this.match(JSXParser.If);
        break;
      case JSXParser.Throw:
        this.enterOuterAlt(localctx, 23);
        this.state = 1124;
        this.match(JSXParser.Throw);
        break;
      case JSXParser.Delete:
        this.enterOuterAlt(localctx, 24);
        this.state = 1125;
        this.match(JSXParser.Delete);
        break;
      case JSXParser.In:
        this.enterOuterAlt(localctx, 25);
        this.state = 1126;
        this.match(JSXParser.In);
        break;
      case JSXParser.Try:
        this.enterOuterAlt(localctx, 26);
        this.state = 1127;
        this.match(JSXParser.Try);
        break;
      case JSXParser.Class:
        this.enterOuterAlt(localctx, 27);
        this.state = 1128;
        this.match(JSXParser.Class);
        break;
      case JSXParser.Enum:
        this.enterOuterAlt(localctx, 28);
        this.state = 1129;
        this.match(JSXParser.Enum);
        break;
      case JSXParser.Extends:
        this.enterOuterAlt(localctx, 29);
        this.state = 1130;
        this.match(JSXParser.Extends);
        break;
      case JSXParser.Super:
        this.enterOuterAlt(localctx, 30);
        this.state = 1131;
        this.match(JSXParser.Super);
        break;
      case JSXParser.Const:
        this.enterOuterAlt(localctx, 31);
        this.state = 1132;
        this.match(JSXParser.Const);
        break;
      case JSXParser.Export:
        this.enterOuterAlt(localctx, 32);
        this.state = 1133;
        this.match(JSXParser.Export);
        break;
      case JSXParser.Import:
        this.enterOuterAlt(localctx, 33);
        this.state = 1134;
        this.match(JSXParser.Import);
        break;
      case JSXParser.Implements:
        this.enterOuterAlt(localctx, 34);
        this.state = 1135;
        this.match(JSXParser.Implements);
        break;
      case JSXParser.StrictLet:
      case JSXParser.NonStrictLet:
        this.enterOuterAlt(localctx, 35);
        this.state = 1136;
        this.let();
        break;
      case JSXParser.Private:
        this.enterOuterAlt(localctx, 36);
        this.state = 1137;
        this.match(JSXParser.Private);
        break;
      case JSXParser.Public:
        this.enterOuterAlt(localctx, 37);
        this.state = 1138;
        this.match(JSXParser.Public);
        break;
      case JSXParser.Interface:
        this.enterOuterAlt(localctx, 38);
        this.state = 1139;
        this.match(JSXParser.Interface);
        break;
      case JSXParser.Package:
        this.enterOuterAlt(localctx, 39);
        this.state = 1140;
        this.match(JSXParser.Package);
        break;
      case JSXParser.Protected:
        this.enterOuterAlt(localctx, 40);
        this.state = 1141;
        this.match(JSXParser.Protected);
        break;
      case JSXParser.Static:
        this.enterOuterAlt(localctx, 41);
        this.state = 1142;
        this.match(JSXParser.Static);
        break;
      case JSXParser.Yield:
        this.enterOuterAlt(localctx, 42);
        this.state = 1143;
        this.match(JSXParser.Yield);
        break;
      case JSXParser.Async:
        this.enterOuterAlt(localctx, 43);
        this.state = 1144;
        this.match(JSXParser.Async);
        break;
      case JSXParser.Await:
        this.enterOuterAlt(localctx, 44);
        this.state = 1145;
        this.match(JSXParser.Await);
        break;
      case JSXParser.From:
        this.enterOuterAlt(localctx, 45);
        this.state = 1146;
        this.match(JSXParser.From);
        break;
      case JSXParser.As:
        this.enterOuterAlt(localctx, 46);
        this.state = 1147;
        this.match(JSXParser.As);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function LetContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_let;
  return this;
}

LetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetContext.prototype.constructor = LetContext;

LetContext.prototype.NonStrictLet = function() {
  return this.getToken(JSXParser.NonStrictLet, 0);
};

LetContext.prototype.StrictLet = function() {
  return this.getToken(JSXParser.StrictLet, 0);
};

LetContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterLet(this);
  }
};

LetContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitLet(this);
  }
};

LetContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitLet(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.LetContext = LetContext;

JSXParser.prototype.let = function() {
  var localctx = new LetContext(this, this._ctx, this.state);
  this.enterRule(localctx, 168, JSXParser.RULE_let);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1150;
    _la = this._input.LA(1);
    if(!(_la === JSXParser.StrictLet || _la === JSXParser.NonStrictLet)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function EosContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = JSXParser.RULE_eos;
  return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
  return this.getToken(JSXParser.SemiColon, 0);
};

EosContext.prototype.EOF = function() {
  return this.getToken(JSXParser.EOF, 0);
};

EosContext.prototype.enterRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.enterEos(this);
  }
};

EosContext.prototype.exitRule = function(listener) {
  if(listener instanceof JSXParserListener) {
    listener.exitEos(this);
  }
};

EosContext.prototype.accept = function(visitor) {
  if(visitor instanceof JSXParserVisitor) {
    return visitor.visitEos(this);
  } else {
    return visitor.visitChildren(this);
  }
};

JSXParser.EosContext = EosContext;

JSXParser.prototype.eos = function() {
  var localctx = new EosContext(this, this._ctx, this.state);
  this.enterRule(localctx, 170, JSXParser.RULE_eos);
  try {
    this.state = 1156;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 125, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1152;
        this.match(JSXParser.SemiColon);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1153;
        this.match(JSXParser.EOF);
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 1154;
        if(!this.lineTerminatorAhead()) {
          throw new antlr4.error.FailedPredicateException(this, 'this.lineTerminatorAhead()');
        }
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 1155;
        if(!this.closeBrace()) {
          throw new antlr4.error.FailedPredicateException(this, 'this.closeBrace()');
        }
        break;
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

JSXParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
  switch (ruleIndex) {
    case 19:
      return this.expressionStatement_sempred(localctx, predIndex);
    case 21:
      return this.iterationStatement_sempred(localctx, predIndex);
    case 23:
      return this.continueStatement_sempred(localctx, predIndex);
    case 24:
      return this.breakStatement_sempred(localctx, predIndex);
    case 25:
      return this.returnStatement_sempred(localctx, predIndex);
    case 26:
      return this.yieldStatement_sempred(localctx, predIndex);
    case 34:
      return this.throwStatement_sempred(localctx, predIndex);
    case 42:
      return this.classElement_sempred(localctx, predIndex);
    case 57:
      return this.singleExpression_sempred(localctx, predIndex);
    case 62:
      return this.htmlTagClosingName_sempred(localctx, predIndex);
    case 78:
      return this.getter_sempred(localctx, predIndex);
    case 79:
      return this.setter_sempred(localctx, predIndex);
    case 85:
      return this.eos_sempred(localctx, predIndex);
    default:
      throw 'No predicate with index:' + ruleIndex;
  }
};

JSXParser.prototype.expressionStatement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 0:
      return this.notOpenBraceAndNotFunction();
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.iterationStatement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 1:
      return this.p('of');
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.continueStatement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 2:
      return this.notLineTerminator();
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.breakStatement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 3:
      return this.notLineTerminator();
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.returnStatement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 4:
      return this.notLineTerminator();
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.yieldStatement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 5:
      return this.notLineTerminator();
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.throwStatement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 6:
      return this.notLineTerminator();
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.classElement_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 7:
      return this.n('static');
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.singleExpression_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 8:
      return this.precpred(this._ctx, 28);
    case 9:
      return this.precpred(this._ctx, 27);
    case 10:
      return this.precpred(this._ctx, 26);
    case 11:
      return this.precpred(this._ctx, 25);
    case 12:
      return this.precpred(this._ctx, 24);
    case 13:
      return this.precpred(this._ctx, 23);
    case 14:
      return this.precpred(this._ctx, 22);
    case 15:
      return this.precpred(this._ctx, 21);
    case 16:
      return this.precpred(this._ctx, 20);
    case 17:
      return this.precpred(this._ctx, 19);
    case 18:
      return this.precpred(this._ctx, 18);
    case 19:
      return this.precpred(this._ctx, 17);
    case 20:
      return this.precpred(this._ctx, 16);
    case 21:
      return this.precpred(this._ctx, 15);
    case 22:
      return this.precpred(this._ctx, 14);
    case 23:
      return this.precpred(this._ctx, 13);
    case 24:
      return this.precpred(this._ctx, 12);
    case 25:
      return this.precpred(this._ctx, 45);
    case 26:
      return this.precpred(this._ctx, 44);
    case 27:
      return this.precpred(this._ctx, 43);
    case 28:
      return this.precpred(this._ctx, 40);
    case 29:
      return this.notLineTerminator();
    case 30:
      return this.precpred(this._ctx, 39);
    case 31:
      return this.notLineTerminator();
    case 32:
      return this.precpred(this._ctx, 10);
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.htmlTagClosingName_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 33:
      return this.popHtmlTagName(localctx._htmlTagName === null ? null : this._input.getText(new antlr4.Interval(localctx._htmlTagName.start, localctx._htmlTagName.stop)));
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.getter_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 34:
      return this.p('get');
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.setter_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 35:
      return this.p('set');
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

JSXParser.prototype.eos_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 36:
      return this.lineTerminatorAhead();
    case 37:
      return this.closeBrace();
    default:
      throw 'No predicate with index:' + predIndex;
  }
};

exports.JSXParser = JSXParser;
