// Generated from /home/roman/Dokumente/Sources/plot-cv/lib/grammars/WebIDL.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var WebIDLListener = require('./WebIDLListener').WebIDLListener;
var WebIDLVisitor = require('./WebIDLVisitor').WebIDLVisitor;

var grammarFileName = 'WebIDL.g4';

var serializedATN = [
  '\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964',
  '\u0003X\u0340\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t',
  '\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004',
  '\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004',
  '\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004',
  '\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t',
  '\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004',
  '\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t',
  '\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004',
  '\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#\t#\u0004$\t$\u0004',
  "%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
  ',\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004',
  '3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004',
  ':\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004',
  'A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004',
  'H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004',
  'O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004',
  'V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004',
  ']\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004',
  'd\td\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003',
  '\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00d1\n\u0003\u0003\u0004',
  '\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004',
  '\u00d9\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005',
  '\u0005\u00df\n\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u00e3\n\u0006',
  '\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007',
  '\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003',
  '\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0005\n\u00fa',
  '\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003',
  '\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0108',
  '\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r',
  '\u0003\r\u0003\r\u0005\r\u0114\n\r\u0003\u000e\u0003\u000e\u0003\u000e',
  '\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f',
  '\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0123\n',
  '\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003',
  '\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u012d\n\u0011\u0003\u0012',
  '\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012',
  '\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0139\n\u0013\u0003',
  '\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u013f\n\u0014',
  '\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0144\n\u0015\u0003',
  '\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0149\n\u0016\u0003\u0017',
  '\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017',
  '\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019',
  '\u0005\u0019\u0158\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005',
  '\u001a\u015d\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b',
  '\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c',
  '\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d',
  '\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e',
  '\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f',
  '\u0003\u001f\u0005\u001f\u017c\n\u001f\u0003 \u0003 \u0003!\u0003!\u0003',
  '"\u0003"\u0003"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#',
  '\u018b\n#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003',
  '$\u0005$\u0196\n$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u019e',
  "\n%\u0003&\u0003&\u0003&\u0003&\u0005&\u01a4\n&\u0003'\u0003'\u0003",
  "'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u01b0\n(",
  '\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005',
  '*\u01bb\n*\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0005,\u01c3\n',
  ',\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u01ca\n-\u0003.\u0003.\u0003',
  '.\u0003.\u0003.\u0003/\u0003/\u0005/\u01d3\n/\u00030\u00030\u00031\u0003',
  '1\u00051\u01d9\n1\u00032\u00032\u00052\u01dd\n2\u00033\u00033\u0003',
  '3\u00033\u00053\u01e3\n3\u00034\u00034\u00034\u00034\u00034\u00035\u0003',
  '5\u00035\u00035\u00055\u01ee\n5\u00036\u00036\u00037\u00037\u00037\u0003',
  '7\u00037\u00037\u00038\u00038\u00058\u01fa\n8\u00039\u00039\u00039\u0003',
  '9\u00059\u0200\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u0207\n',
  ':\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003',
  '<\u0003<\u0003<\u0005<\u0215\n<\u0003=\u0003=\u0005=\u0219\n=\u0003',
  '>\u0003>\u0005>\u021d\n>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003',
  '?\u0003@\u0003@\u0003@\u0005@\u0229\n@\u0003A\u0003A\u0003B\u0003B\u0003',
  'C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003',
  'D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005',
  'E\u0243\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u024a\nF\u0003',
  'G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003',
  'G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u025e\nG\u0003',
  'H\u0003H\u0005H\u0262\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003',
  'I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003',
  'I\u0003I\u0003I\u0005I\u0277\nI\u0003J\u0003J\u0003J\u0003J\u0003J\u0003',
  'J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003',
  'J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003',
  'J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003',
  'J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u02a2\nJ\u0003K\u0003K\u0003',
  'L\u0003L\u0005L\u02a8\nL\u0003M\u0003M\u0003M\u0003M\u0005M\u02ae\n',
  'M\u0003N\u0003N\u0005N\u02b2\nN\u0003O\u0003O\u0003O\u0003O\u0003O\u0003',
  'O\u0003O\u0003P\u0003P\u0003P\u0003P\u0005P\u02bf\nP\u0003Q\u0003Q\u0003',
  'Q\u0003Q\u0003Q\u0005Q\u02c6\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003',
  'R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003',
  'R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003',
  'R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005',
  'R\u02eb\nR\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0005T\u02f4',
  '\nT\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u02fb\nU\u0003V\u0003',
  'V\u0003V\u0005V\u0300\nV\u0003W\u0003W\u0003X\u0003X\u0003X\u0005X\u0307',
  '\nX\u0003Y\u0003Y\u0003Y\u0005Y\u030c\nY\u0003Z\u0003Z\u0005Z\u0310',
  '\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0005\\\u0319',
  '\n\\\u0003]\u0003]\u0005]\u031d\n]\u0003^\u0003^\u0003^\u0003_\u0003',
  '_\u0003_\u0003_\u0005_\u0326\n_\u0003`\u0003`\u0003a\u0003a\u0003a\u0003',
  'a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003c\u0003c\u0003c\u0003c\u0003',
  'c\u0003c\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0002',
  '\u0002e\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018',
  '\u001a\u001c\u001e "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|',
  '~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094',
  '\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac',
  '\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4',
  '\u00c6\u0002\b\u0003\u0002\u0019\u001a\u0004\u0002\u001b\u001dSS\u0004',
  "\u0002\u001f\u001f%'\u000b\u0002\u0003\u0004\t\u000b\u0011\u0011\u0015",
  '\u0017\u001e"$\'**-.DD\u0003\u0002FP\u0003\u0002:;\u0002\u0365\u0002',
  '\u00c8\u0003\u0002\u0002\u0002\u0004\u00d0\u0003\u0002\u0002\u0002\u0006',
  '\u00d8\u0003\u0002\u0002\u0002\b\u00de\u0003\u0002\u0002\u0002\n\u00e2',
  '\u0003\u0002\u0002\u0002\f\u00e4\u0003\u0002\u0002\u0002\u000e\u00ec',
  '\u0003\u0002\u0002\u0002\u0010\u00f4\u0003\u0002\u0002\u0002\u0012\u00f9',
  '\u0003\u0002\u0002\u0002\u0014\u00fb\u0003\u0002\u0002\u0002\u0016\u0107',
  '\u0003\u0002\u0002\u0002\u0018\u0113\u0003\u0002\u0002\u0002\u001a\u0115',
  '\u0003\u0002\u0002\u0002\u001c\u0122\u0003\u0002\u0002\u0002\u001e\u0124',
  '\u0003\u0002\u0002\u0002 \u012c\u0003\u0002\u0002\u0002"\u012e\u0003',
  '\u0002\u0002\u0002$\u0138\u0003\u0002\u0002\u0002&\u013e\u0003\u0002',
  '\u0002\u0002(\u0143\u0003\u0002\u0002\u0002*\u0148\u0003\u0002\u0002',
  '\u0002,\u014a\u0003\u0002\u0002\u0002.\u0151\u0003\u0002\u0002\u0002',
  '0\u0157\u0003\u0002\u0002\u00022\u015c\u0003\u0002\u0002\u00024\u015e',
  '\u0003\u0002\u0002\u00026\u0166\u0003\u0002\u0002\u00028\u016b\u0003',
  '\u0002\u0002\u0002:\u0170\u0003\u0002\u0002\u0002<\u017b\u0003\u0002',
  '\u0002\u0002>\u017d\u0003\u0002\u0002\u0002@\u017f\u0003\u0002\u0002',
  '\u0002B\u0181\u0003\u0002\u0002\u0002D\u018a\u0003\u0002\u0002\u0002',
  'F\u0195\u0003\u0002\u0002\u0002H\u019d\u0003\u0002\u0002\u0002J\u01a3',
  '\u0003\u0002\u0002\u0002L\u01a5\u0003\u0002\u0002\u0002N\u01af\u0003',
  '\u0002\u0002\u0002P\u01b1\u0003\u0002\u0002\u0002R\u01ba\u0003\u0002',
  '\u0002\u0002T\u01bc\u0003\u0002\u0002\u0002V\u01c2\u0003\u0002\u0002',
  '\u0002X\u01c9\u0003\u0002\u0002\u0002Z\u01cb\u0003\u0002\u0002\u0002',
  '\\\u01d2\u0003\u0002\u0002\u0002^\u01d4\u0003\u0002\u0002\u0002`\u01d8',
  '\u0003\u0002\u0002\u0002b\u01dc\u0003\u0002\u0002\u0002d\u01e2\u0003',
  '\u0002\u0002\u0002f\u01e4\u0003\u0002\u0002\u0002h\u01ed\u0003\u0002',
  '\u0002\u0002j\u01ef\u0003\u0002\u0002\u0002l\u01f1\u0003\u0002\u0002',
  '\u0002n\u01f9\u0003\u0002\u0002\u0002p\u01ff\u0003\u0002\u0002\u0002',
  'r\u0206\u0003\u0002\u0002\u0002t\u0208\u0003\u0002\u0002\u0002v\u0214',
  '\u0003\u0002\u0002\u0002x\u0218\u0003\u0002\u0002\u0002z\u021c\u0003',
  '\u0002\u0002\u0002|\u021e\u0003\u0002\u0002\u0002~\u0228\u0003\u0002',
  '\u0002\u0002\u0080\u022a\u0003\u0002\u0002\u0002\u0082\u022c\u0003\u0002',
  '\u0002\u0002\u0084\u022e\u0003\u0002\u0002\u0002\u0086\u0236\u0003\u0002',
  '\u0002\u0002\u0088\u0242\u0003\u0002\u0002\u0002\u008a\u0249\u0003\u0002',
  '\u0002\u0002\u008c\u025d\u0003\u0002\u0002\u0002\u008e\u0261\u0003\u0002',
  '\u0002\u0002\u0090\u0276\u0003\u0002\u0002\u0002\u0092\u02a1\u0003\u0002',
  '\u0002\u0002\u0094\u02a3\u0003\u0002\u0002\u0002\u0096\u02a7\u0003\u0002',
  '\u0002\u0002\u0098\u02ad\u0003\u0002\u0002\u0002\u009a\u02b1\u0003\u0002',
  '\u0002\u0002\u009c\u02b3\u0003\u0002\u0002\u0002\u009e\u02be\u0003\u0002',
  '\u0002\u0002\u00a0\u02c5\u0003\u0002\u0002\u0002\u00a2\u02ea\u0003\u0002',
  '\u0002\u0002\u00a4\u02ec\u0003\u0002\u0002\u0002\u00a6\u02f3\u0003\u0002',
  '\u0002\u0002\u00a8\u02fa\u0003\u0002\u0002\u0002\u00aa\u02ff\u0003\u0002',
  '\u0002\u0002\u00ac\u0301\u0003\u0002\u0002\u0002\u00ae\u0306\u0003\u0002',
  '\u0002\u0002\u00b0\u030b\u0003\u0002\u0002\u0002\u00b2\u030f\u0003\u0002',
  '\u0002\u0002\u00b4\u0311\u0003\u0002\u0002\u0002\u00b6\u0318\u0003\u0002',
  '\u0002\u0002\u00b8\u031c\u0003\u0002\u0002\u0002\u00ba\u031e\u0003\u0002',
  '\u0002\u0002\u00bc\u0325\u0003\u0002\u0002\u0002\u00be\u0327\u0003\u0002',
  '\u0002\u0002\u00c0\u0329\u0003\u0002\u0002\u0002\u00c2\u032e\u0003\u0002',
  '\u0002\u0002\u00c4\u0332\u0003\u0002\u0002\u0002\u00c6\u0338\u0003\u0002',
  '\u0002\u0002\u00c8\u00c9\u0005\u0004\u0003\u0002\u00c9\u00ca\u0007\u0002',
  '\u0002\u0003\u00ca\u0003\u0003\u0002\u0002\u0002\u00cb\u00cc\u0005\u0088',
  'E\u0002\u00cc\u00cd\u0005\u0006\u0004\u0002\u00cd\u00ce\u0005\u0004',
  '\u0003\u0002\u00ce\u00d1\u0003\u0002\u0002\u0002\u00cf\u00d1\u0003\u0002',
  '\u0002\u0002\u00d0\u00cb\u0003\u0002\u0002\u0002\u00d0\u00cf\u0003\u0002',
  '\u0002\u0002\u00d1\u0005\u0003\u0002\u0002\u0002\u00d2\u00d9\u0005\b',
  '\u0005\u0002\u00d3\u00d9\u0005\u0010\t\u0002\u00d4\u00d9\u0005\u001a',
  '\u000e\u0002\u00d5\u00d9\u0005,\u0017\u0002\u00d6\u00d9\u00056\u001c',
  '\u0002\u00d7\u00d9\u00058\u001d\u0002\u00d8\u00d2\u0003\u0002\u0002',
  '\u0002\u00d8\u00d3\u0003\u0002\u0002\u0002\u00d8\u00d4\u0003\u0002\u0002',
  '\u0002\u00d8\u00d5\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003\u0002\u0002',
  '\u0002\u00d8\u00d7\u0003\u0002\u0002\u0002\u00d9\u0007\u0003\u0002\u0002',
  '\u0002\u00da\u00db\u0007\u0003\u0002\u0002\u00db\u00df\u0005\n\u0006',
  '\u0002\u00dc\u00df\u0005\f\u0007\u0002\u00dd\u00df\u0005\u000e\b\u0002',
  '\u00de\u00da\u0003\u0002\u0002\u0002\u00de\u00dc\u0003\u0002\u0002\u0002',
  '\u00de\u00dd\u0003\u0002\u0002\u0002\u00df\t\u0003\u0002\u0002\u0002',
  '\u00e0\u00e3\u00054\u001b\u0002\u00e1\u00e3\u0005\f\u0007\u0002\u00e2',
  '\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e1\u0003\u0002\u0002\u0002\u00e3',
  '\u000b\u0003\u0002\u0002\u0002\u00e4\u00e5\u0007\u0004\u0002\u0002\u00e5',
  '\u00e6\u0007T\u0002\u0002\u00e6\u00e7\u0005(\u0015\u0002\u00e7\u00e8',
  '\u0007\u0005\u0002\u0002\u00e8\u00e9\u0005\u0016\f\u0002\u00e9\u00ea',
  '\u0007\u0006\u0002\u0002\u00ea\u00eb\u0007\u0007\u0002\u0002\u00eb\r',
  '\u0003\u0002\u0002\u0002\u00ec\u00ed\u0007\b\u0002\u0002\u00ed\u00ee',
  '\u0007T\u0002\u0002\u00ee\u00ef\u0005*\u0016\u0002\u00ef\u00f0\u0007',
  '\u0005\u0002\u0002\u00f0\u00f1\u0005\u0016\f\u0002\u00f1\u00f2\u0007',
  '\u0006\u0002\u0002\u00f2\u00f3\u0007\u0007\u0002\u0002\u00f3\u000f\u0003',
  '\u0002\u0002\u0002\u00f4\u00f5\u0007\t\u0002\u0002\u00f5\u00f6\u0005',
  '\u0012\n\u0002\u00f6\u0011\u0003\u0002\u0002\u0002\u00f7\u00fa\u0005',
  '\u0014\u000b\u0002\u00f8\u00fa\u0005"\u0012\u0002\u00f9\u00f7\u0003',
  '\u0002\u0002\u0002\u00f9\u00f8\u0003\u0002\u0002\u0002\u00fa\u0013\u0003',
  '\u0002\u0002\u0002\u00fb\u00fc\u0007\u0004\u0002\u0002\u00fc\u00fd\u0007',
  'T\u0002\u0002\u00fd\u00fe\u0007\u0005\u0002\u0002\u00fe\u00ff\u0005',
  '\u0016\f\u0002\u00ff\u0100\u0007\u0006\u0002\u0002\u0100\u0101\u0007',
  '\u0007\u0002\u0002\u0101\u0015\u0003\u0002\u0002\u0002\u0102\u0103\u0005',
  '\u0088E\u0002\u0103\u0104\u0005\u0018\r\u0002\u0104\u0105\u0005\u0016',
  '\f\u0002\u0105\u0108\u0003\u0002\u0002\u0002\u0106\u0108\u0003\u0002',
  '\u0002\u0002\u0107\u0102\u0003\u0002\u0002\u0002\u0107\u0106\u0003\u0002',
  '\u0002\u0002\u0108\u0017\u0003\u0002\u0002\u0002\u0109\u0114\u0005:',
  '\u001e\u0002\u010a\u0114\u0005d3\u0002\u010b\u0114\u0005B"\u0002\u010c',
  "\u0114\u0005L'\u0002\u010d\u0114\u0005P)\u0002\u010e\u0114\u0005|?",
  '\u0002\u010f\u0114\u0005T+\u0002\u0110\u0114\u0005X-\u0002\u0111\u0114',
  '\u0005\u0080A\u0002\u0112\u0114\u0005\u0082B\u0002\u0113\u0109\u0003',
  '\u0002\u0002\u0002\u0113\u010a\u0003\u0002\u0002\u0002\u0113\u010b\u0003',
  '\u0002\u0002\u0002\u0113\u010c\u0003\u0002\u0002\u0002\u0113\u010d\u0003',
  '\u0002\u0002\u0002\u0113\u010e\u0003\u0002\u0002\u0002\u0113\u010f\u0003',
  '\u0002\u0002\u0002\u0113\u0110\u0003\u0002\u0002\u0002\u0113\u0111\u0003',
  '\u0002\u0002\u0002\u0113\u0112\u0003\u0002\u0002\u0002\u0114\u0019\u0003',
  '\u0002\u0002\u0002\u0115\u0116\u0007\n\u0002\u0002\u0116\u0117\u0007',
  'T\u0002\u0002\u0117\u0118\u0005(\u0015\u0002\u0118\u0119\u0007\u0005',
  '\u0002\u0002\u0119\u011a\u0005\u001c\u000f\u0002\u011a\u011b\u0007\u0006',
  '\u0002\u0002\u011b\u011c\u0007\u0007\u0002\u0002\u011c\u001b\u0003\u0002',
  '\u0002\u0002\u011d\u011e\u0005\u0088E\u0002\u011e\u011f\u0005\u001e',
  '\u0010\u0002\u011f\u0120\u0005\u001c\u000f\u0002\u0120\u0123\u0003\u0002',
  '\u0002\u0002\u0121\u0123\u0003\u0002\u0002\u0002\u0122\u011d\u0003\u0002',
  '\u0002\u0002\u0122\u0121\u0003\u0002\u0002\u0002\u0123\u001d\u0003\u0002',
  '\u0002\u0002\u0124\u0125\u0005 \u0011\u0002\u0125\u0126\u0005\u0098',
  'M\u0002\u0126\u0127\u0007T\u0002\u0002\u0127\u0128\u0005$\u0013\u0002',
  '\u0128\u0129\u0007\u0007\u0002\u0002\u0129\u001f\u0003\u0002\u0002\u0002',
  '\u012a\u012d\u0007\u000b\u0002\u0002\u012b\u012d\u0003\u0002\u0002\u0002',
  '\u012c\u012a\u0003\u0002\u0002\u0002\u012c\u012b\u0003\u0002\u0002\u0002',
  '\u012d!\u0003\u0002\u0002\u0002\u012e\u012f\u0007\n\u0002\u0002\u012f',
  '\u0130\u0007T\u0002\u0002\u0130\u0131\u0007\u0005\u0002\u0002\u0131',
  '\u0132\u0005\u001c\u000f\u0002\u0132\u0133\u0007\u0006\u0002\u0002\u0133',
  '\u0134\u0007\u0007\u0002\u0002\u0134#\u0003\u0002\u0002\u0002\u0135',
  '\u0136\u0007\f\u0002\u0002\u0136\u0139\u0005&\u0014\u0002\u0137\u0139',
  '\u0003\u0002\u0002\u0002\u0138\u0135\u0003\u0002\u0002\u0002\u0138\u0137',
  '\u0003\u0002\u0002\u0002\u0139%\u0003\u0002\u0002\u0002\u013a\u013f',
  '\u0005<\u001f\u0002\u013b\u013f\u0007U\u0002\u0002\u013c\u013d\u0007',
  '\r\u0002\u0002\u013d\u013f\u0007\u000e\u0002\u0002\u013e\u013a\u0003',
  '\u0002\u0002\u0002\u013e\u013b\u0003\u0002\u0002\u0002\u013e\u013c\u0003',
  "\u0002\u0002\u0002\u013f'\u0003\u0002\u0002\u0002\u0140\u0141\u0007",
  '\u000f\u0002\u0002\u0141\u0144\u0007T\u0002\u0002\u0142\u0144\u0003',
  '\u0002\u0002\u0002\u0143\u0140\u0003\u0002\u0002\u0002\u0143\u0142\u0003',
  '\u0002\u0002\u0002\u0144)\u0003\u0002\u0002\u0002\u0145\u0146\u0007',
  '\u0010\u0002\u0002\u0146\u0149\u0007T\u0002\u0002\u0147\u0149\u0003',
  '\u0002\u0002\u0002\u0148\u0145\u0003\u0002\u0002\u0002\u0148\u0147\u0003',
  '\u0002\u0002\u0002\u0149+\u0003\u0002\u0002\u0002\u014a\u014b\u0007',
  '\u0011\u0002\u0002\u014b\u014c\u0007T\u0002\u0002\u014c\u014d\u0007',
  '\u0005\u0002\u0002\u014d\u014e\u0005.\u0018\u0002\u014e\u014f\u0007',
  '\u0006\u0002\u0002\u014f\u0150\u0007\u0007\u0002\u0002\u0150-\u0003',
  '\u0002\u0002\u0002\u0151\u0152\u0007U\u0002\u0002\u0152\u0153\u0005',
  '0\u0019\u0002\u0153/\u0003\u0002\u0002\u0002\u0154\u0155\u0007\u0012',
  '\u0002\u0002\u0155\u0158\u00052\u001a\u0002\u0156\u0158\u0003\u0002',
  '\u0002\u0002\u0157\u0154\u0003\u0002\u0002\u0002\u0157\u0156\u0003\u0002',
  '\u0002\u0002\u01581\u0003\u0002\u0002\u0002\u0159\u015a\u0007U\u0002',
  '\u0002\u015a\u015d\u00050\u0019\u0002\u015b\u015d\u0003\u0002\u0002',
  '\u0002\u015c\u0159\u0003\u0002\u0002\u0002\u015c\u015b\u0003\u0002\u0002',
  '\u0002\u015d3\u0003\u0002\u0002\u0002\u015e\u015f\u0007T\u0002\u0002',
  '\u015f\u0160\u0007\f\u0002\u0002\u0160\u0161\u0005\u00b8]\u0002\u0161',
  '\u0162\u0007\u0013\u0002\u0002\u0162\u0163\u0005p9\u0002\u0163\u0164',
  '\u0007\u0014\u0002\u0002\u0164\u0165\u0007\u0007\u0002\u0002\u01655',
  '\u0003\u0002\u0002\u0002\u0166\u0167\u0007\u0015\u0002\u0002\u0167\u0168',
  '\u0005\u0098M\u0002\u0168\u0169\u0007T\u0002\u0002\u0169\u016a\u0007',
  '\u0007\u0002\u0002\u016a7\u0003\u0002\u0002\u0002\u016b\u016c\u0007',
  'T\u0002\u0002\u016c\u016d\u0007\u0016\u0002\u0002\u016d\u016e\u0007',
  'T\u0002\u0002\u016e\u016f\u0007\u0007\u0002\u0002\u016f9\u0003\u0002',
  '\u0002\u0002\u0170\u0171\u0007\u0017\u0002\u0002\u0171\u0172\u0005\u00a6',
  'T\u0002\u0172\u0173\u0007T\u0002\u0002\u0173\u0174\u0007\f\u0002\u0002',
  '\u0174\u0175\u0005<\u001f\u0002\u0175\u0176\u0007\u0007\u0002\u0002',
  '\u0176;\u0003\u0002\u0002\u0002\u0177\u017c\u0005> \u0002\u0178\u017c',
  '\u0005@!\u0002\u0179\u017c\u0007R\u0002\u0002\u017a\u017c\u0007\u0018',
  '\u0002\u0002\u017b\u0177\u0003\u0002\u0002\u0002\u017b\u0178\u0003\u0002',
  '\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002\u017b\u017a\u0003\u0002',
  '\u0002\u0002\u017c=\u0003\u0002\u0002\u0002\u017d\u017e\t\u0002\u0002',
  '\u0002\u017e?\u0003\u0002\u0002\u0002\u017f\u0180\t\u0003\u0002\u0002',
  '\u0180A\u0003\u0002\u0002\u0002\u0181\u0182\u0007\u001e\u0002\u0002',
  '\u0182\u0183\u0005D#\u0002\u0183C\u0003\u0002\u0002\u0002\u0184\u018b',
  '\u0005l7\u0002\u0185\u0186\u0007\f\u0002\u0002\u0186\u0187\u0005F$\u0002',
  '\u0187\u0188\u0007\u0007\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002',
  '\u0189\u018b\u0007\u0007\u0002\u0002\u018a\u0184\u0003\u0002\u0002\u0002',
  '\u018a\u0185\u0003\u0002\u0002\u0002\u018a\u0189\u0003\u0002\u0002\u0002',
  '\u018bE\u0003\u0002\u0002\u0002\u018c\u018d\u0007\u0005\u0002\u0002',
  '\u018d\u018e\u0005H%\u0002\u018e\u018f\u0007\u0006\u0002\u0002\u018f',
  '\u0196\u0003\u0002\u0002\u0002\u0190\u0191\u0007\r\u0002\u0002\u0191',
  '\u0192\u0005J&\u0002\u0192\u0193\u0007\u000e\u0002\u0002\u0193\u0196',
  '\u0003\u0002\u0002\u0002\u0194\u0196\u0007T\u0002\u0002\u0195\u018c',
  '\u0003\u0002\u0002\u0002\u0195\u0190\u0003\u0002\u0002\u0002\u0195\u0194',
  '\u0003\u0002\u0002\u0002\u0196G\u0003\u0002\u0002\u0002\u0197\u019e',
  '\u0007\u001f\u0002\u0002\u0198\u0199\u0007 \u0002\u0002\u0199\u019e',
  '\u0005\u00bc_\u0002\u019a\u019b\u0007T\u0002\u0002\u019b\u019e\u0005',
  '\u00bc_\u0002\u019c\u019e\u0003\u0002\u0002\u0002\u019d\u0197\u0003',
  '\u0002\u0002\u0002\u019d\u0198\u0003\u0002\u0002\u0002\u019d\u019a\u0003',
  '\u0002\u0002\u0002\u019d\u019c\u0003\u0002\u0002\u0002\u019eI\u0003',
  '\u0002\u0002\u0002\u019f\u01a4\u0007\u001f\u0002\u0002\u01a0\u01a1\u0007',
  'T\u0002\u0002\u01a1\u01a4\u0005\u00bc_\u0002\u01a2\u01a4\u0003\u0002',
  '\u0002\u0002\u01a3\u019f\u0003\u0002\u0002\u0002\u01a3\u01a0\u0003\u0002',
  '\u0002\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a4K\u0003\u0002',
  '\u0002\u0002\u01a5\u01a6\u0007!\u0002\u0002\u01a6\u01a7\u0005N(\u0002',
  '\u01a7M\u0003\u0002\u0002\u0002\u01a8\u01a9\u0005b2\u0002\u01a9\u01aa',
  '\u0005Z.\u0002\u01aa\u01b0\u0003\u0002\u0002\u0002\u01ab\u01ac\u0005',
  '\u00b8]\u0002\u01ac\u01ad\u0005l7\u0002\u01ad\u01b0\u0003\u0002\u0002',
  '\u0002\u01ae\u01b0\u0007\u0007\u0002\u0002\u01af\u01a8\u0003\u0002\u0002',
  '\u0002\u01af\u01ab\u0003\u0002\u0002\u0002\u01af\u01ae\u0003\u0002\u0002',
  '\u0002\u01b0O\u0003\u0002\u0002\u0002\u01b1\u01b2\u0007"\u0002\u0002',
  '\u01b2\u01b3\u0005R*\u0002\u01b3Q\u0003\u0002\u0002\u0002\u01b4\u01b5',
  '\u0005b2\u0002\u01b5\u01b6\u0005Z.\u0002\u01b6\u01bb\u0003\u0002\u0002',
  '\u0002\u01b7\u01b8\u0005\u00b8]\u0002\u01b8\u01b9\u0005l7\u0002\u01b9',
  '\u01bb\u0003\u0002\u0002\u0002\u01ba\u01b4\u0003\u0002\u0002\u0002\u01ba',
  '\u01b7\u0003\u0002\u0002\u0002\u01bbS\u0003\u0002\u0002\u0002\u01bc',
  '\u01bd\u0007#\u0002\u0002\u01bd\u01be\u0005V,\u0002\u01beU\u0003\u0002',
  '\u0002\u0002\u01bf\u01c3\u0005Z.\u0002\u01c0\u01c3\u0005\u0080A\u0002',
  '\u01c1\u01c3\u0005\u0082B\u0002\u01c2\u01bf\u0003\u0002\u0002\u0002',
  '\u01c2\u01c0\u0003\u0002\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002',
  '\u01c3W\u0003\u0002\u0002\u0002\u01c4\u01c5\u0007 \u0002\u0002\u01c5',
  '\u01c6\u0005b2\u0002\u01c6\u01c7\u0005Z.\u0002\u01c7\u01ca\u0003\u0002',
  '\u0002\u0002\u01c8\u01ca\u0005Z.\u0002\u01c9\u01c4\u0003\u0002\u0002',
  '\u0002\u01c9\u01c8\u0003\u0002\u0002\u0002\u01caY\u0003\u0002\u0002',
  '\u0002\u01cb\u01cc\u0007$\u0002\u0002\u01cc\u01cd\u0005\u0098M\u0002',
  '\u01cd\u01ce\u0005\\/\u0002\u01ce\u01cf\u0007\u0007\u0002\u0002\u01cf',
  '[\u0003\u0002\u0002\u0002\u01d0\u01d3\u0005^0\u0002\u01d1\u01d3\u0007',
  'T\u0002\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d1\u0003',
  '\u0002\u0002\u0002\u01d3]\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007',
  '\u000b\u0002\u0002\u01d5_\u0003\u0002\u0002\u0002\u01d6\u01d9\u0007',
  ' \u0002\u0002\u01d7\u01d9\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003',
  '\u0002\u0002\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002\u01d9a\u0003',
  '\u0002\u0002\u0002\u01da\u01dd\u0007#\u0002\u0002\u01db\u01dd\u0003',
  '\u0002\u0002\u0002\u01dc\u01da\u0003\u0002\u0002\u0002\u01dc\u01db\u0003',
  '\u0002\u0002\u0002\u01ddc\u0003\u0002\u0002\u0002\u01de\u01df\u0005',
  '\u00b8]\u0002\u01df\u01e0\u0005l7\u0002\u01e0\u01e3\u0003\u0002\u0002',
  '\u0002\u01e1\u01e3\u0005f4\u0002\u01e2\u01de\u0003\u0002\u0002\u0002',
  '\u01e2\u01e1\u0003\u0002\u0002\u0002\u01e3e\u0003\u0002\u0002\u0002',
  '\u01e4\u01e5\u0005j6\u0002\u01e5\u01e6\u0005h5\u0002\u01e6\u01e7\u0005',
  '\u00b8]\u0002\u01e7\u01e8\u0005l7\u0002\u01e8g\u0003\u0002\u0002\u0002',
  '\u01e9\u01ea\u0005j6\u0002\u01ea\u01eb\u0005h5\u0002\u01eb\u01ee\u0003',
  '\u0002\u0002\u0002\u01ec\u01ee\u0003\u0002\u0002\u0002\u01ed\u01e9\u0003',
  '\u0002\u0002\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01eei\u0003',
  '\u0002\u0002\u0002\u01ef\u01f0\t\u0004\u0002\u0002\u01f0k\u0003\u0002',
  '\u0002\u0002\u01f1\u01f2\u0005n8\u0002\u01f2\u01f3\u0007\u0013\u0002',
  '\u0002\u01f3\u01f4\u0005p9\u0002\u01f4\u01f5\u0007\u0014\u0002\u0002',
  '\u01f5\u01f6\u0007\u0007\u0002\u0002\u01f6m\u0003\u0002\u0002\u0002',
  '\u01f7\u01fa\u0007T\u0002\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002',
  '\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002',
  '\u01fao\u0003\u0002\u0002\u0002\u01fb\u01fc\u0005t;\u0002\u01fc\u01fd',
  '\u0005r:\u0002\u01fd\u0200\u0003\u0002\u0002\u0002\u01fe\u0200\u0003',
  '\u0002\u0002\u0002\u01ff\u01fb\u0003\u0002\u0002\u0002\u01ff\u01fe\u0003',
  '\u0002\u0002\u0002\u0200q\u0003\u0002\u0002\u0002\u0201\u0202\u0007',
  '\u0012\u0002\u0002\u0202\u0203\u0005t;\u0002\u0203\u0204\u0005r:\u0002',
  '\u0204\u0207\u0003\u0002\u0002\u0002\u0205\u0207\u0003\u0002\u0002\u0002',
  '\u0206\u0201\u0003\u0002\u0002\u0002\u0206\u0205\u0003\u0002\u0002\u0002',
  '\u0207s\u0003\u0002\u0002\u0002\u0208\u0209\u0005\u0088E\u0002\u0209',
  '\u020a\u0005v<\u0002\u020au\u0003\u0002\u0002\u0002\u020b\u020c\u0007',
  '(\u0002\u0002\u020c\u020d\u0005\u0098M\u0002\u020d\u020e\u0005x=\u0002',
  '\u020e\u020f\u0005$\u0013\u0002\u020f\u0215\u0003\u0002\u0002\u0002',
  '\u0210\u0211\u0005\u0098M\u0002\u0211\u0212\u0005z>\u0002\u0212\u0213',
  '\u0005x=\u0002\u0213\u0215\u0003\u0002\u0002\u0002\u0214\u020b\u0003',
  '\u0002\u0002\u0002\u0214\u0210\u0003\u0002\u0002\u0002\u0215w\u0003',
  '\u0002\u0002\u0002\u0216\u0219\u0005\u0094K\u0002\u0217\u0219\u0007',
  'T\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0218\u0217\u0003',
  '\u0002\u0002\u0002\u0219y\u0003\u0002\u0002\u0002\u021a\u021d\u0007',
  ')\u0002\u0002\u021b\u021d\u0003\u0002\u0002\u0002\u021c\u021a\u0003',
  '\u0002\u0002\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021d{\u0003',
  '\u0002\u0002\u0002\u021e\u021f\u0007*\u0002\u0002\u021f\u0220\u0007',
  '+\u0002\u0002\u0220\u0221\u0005\u0098M\u0002\u0221\u0222\u0005~@\u0002',
  '\u0222\u0223\u0007,\u0002\u0002\u0223\u0224\u0007\u0007\u0002\u0002',
  '\u0224}\u0003\u0002\u0002\u0002\u0225\u0226\u0007\u0012\u0002\u0002',
  '\u0226\u0229\u0005\u0098M\u0002\u0227\u0229\u0003\u0002\u0002\u0002',
  '\u0228\u0225\u0003\u0002\u0002\u0002\u0228\u0227\u0003\u0002\u0002\u0002',
  '\u0229\u007f\u0003\u0002\u0002\u0002\u022a\u022b\u0005\u0084C\u0002',
  '\u022b\u0081\u0003\u0002\u0002\u0002\u022c\u022d\u0005\u0086D\u0002',
  '\u022d\u0083\u0003\u0002\u0002\u0002\u022e\u022f\u0007-\u0002\u0002',
  '\u022f\u0230\u0007+\u0002\u0002\u0230\u0231\u0005\u0098M\u0002\u0231',
  '\u0232\u0007\u0012\u0002\u0002\u0232\u0233\u0005\u0098M\u0002\u0233',
  '\u0234\u0007,\u0002\u0002\u0234\u0235\u0007\u0007\u0002\u0002\u0235',
  '\u0085\u0003\u0002\u0002\u0002\u0236\u0237\u0007.\u0002\u0002\u0237',
  '\u0238\u0007+\u0002\u0002\u0238\u0239\u0005\u0098M\u0002\u0239\u023a',
  '\u0007,\u0002\u0002\u023a\u023b\u0007\u0007\u0002\u0002\u023b\u0087',
  '\u0003\u0002\u0002\u0002\u023c\u023d\u0007\r\u0002\u0002\u023d\u023e',
  '\u0005\u008cG\u0002\u023e\u023f\u0005\u008aF\u0002\u023f\u0240\u0007',
  '\u000e\u0002\u0002\u0240\u0243\u0003\u0002\u0002\u0002\u0241\u0243\u0003',
  '\u0002\u0002\u0002\u0242\u023c\u0003\u0002\u0002\u0002\u0242\u0241\u0003',
  '\u0002\u0002\u0002\u0243\u0089\u0003\u0002\u0002\u0002\u0244\u0245\u0007',
  '\u0012\u0002\u0002\u0245\u0246\u0005\u008cG\u0002\u0246\u0247\u0005',
  '\u008aF\u0002\u0247\u024a\u0003\u0002\u0002\u0002\u0248\u024a\u0003',
  '\u0002\u0002\u0002\u0249\u0244\u0003\u0002\u0002\u0002\u0249\u0248\u0003',
  '\u0002\u0002\u0002\u024a\u008b\u0003\u0002\u0002\u0002\u024b\u024c\u0007',
  '\u0013\u0002\u0002\u024c\u024d\u0005\u0090I\u0002\u024d\u024e\u0007',
  '\u0014\u0002\u0002\u024e\u024f\u0005\u008eH\u0002\u024f\u025e\u0003',
  '\u0002\u0002\u0002\u0250\u0251\u0007\r\u0002\u0002\u0251\u0252\u0005',
  '\u0090I\u0002\u0252\u0253\u0007\u000e\u0002\u0002\u0253\u0254\u0005',
  '\u008eH\u0002\u0254\u025e\u0003\u0002\u0002\u0002\u0255\u0256\u0007',
  '\u0005\u0002\u0002\u0256\u0257\u0005\u0090I\u0002\u0257\u0258\u0007',
  '\u0006\u0002\u0002\u0258\u0259\u0005\u008eH\u0002\u0259\u025e\u0003',
  '\u0002\u0002\u0002\u025a\u025b\u0005\u0092J\u0002\u025b\u025c\u0005',
  '\u008eH\u0002\u025c\u025e\u0003\u0002\u0002\u0002\u025d\u024b\u0003',
  '\u0002\u0002\u0002\u025d\u0250\u0003\u0002\u0002\u0002\u025d\u0255\u0003',
  '\u0002\u0002\u0002\u025d\u025a\u0003\u0002\u0002\u0002\u025e\u008d\u0003',
  '\u0002\u0002\u0002\u025f\u0262\u0005\u008cG\u0002\u0260\u0262\u0003',
  '\u0002\u0002\u0002\u0261\u025f\u0003\u0002\u0002\u0002\u0261\u0260\u0003',
  '\u0002\u0002\u0002\u0262\u008f\u0003\u0002\u0002\u0002\u0263\u0264\u0007',
  '\u0013\u0002\u0002\u0264\u0265\u0005\u0090I\u0002\u0265\u0266\u0007',
  '\u0014\u0002\u0002\u0266\u0267\u0005\u0090I\u0002\u0267\u0277\u0003',
  '\u0002\u0002\u0002\u0268\u0269\u0007\r\u0002\u0002\u0269\u026a\u0005',
  '\u0090I\u0002\u026a\u026b\u0007\u000e\u0002\u0002\u026b\u026c\u0005',
  '\u0090I\u0002\u026c\u0277\u0003\u0002\u0002\u0002\u026d\u026e\u0007',
  '\u0005\u0002\u0002\u026e\u026f\u0005\u0090I\u0002\u026f\u0270\u0007',
  '\u0006\u0002\u0002\u0270\u0271\u0005\u0090I\u0002\u0271\u0277\u0003',
  '\u0002\u0002\u0002\u0272\u0273\u0005\u0096L\u0002\u0273\u0274\u0005',
  '\u0090I\u0002\u0274\u0277\u0003\u0002\u0002\u0002\u0275\u0277\u0003',
  '\u0002\u0002\u0002\u0276\u0263\u0003\u0002\u0002\u0002\u0276\u0268\u0003',
  '\u0002\u0002\u0002\u0276\u026d\u0003\u0002\u0002\u0002\u0276\u0272\u0003',
  '\u0002\u0002\u0002\u0276\u0275\u0003\u0002\u0002\u0002\u0277\u0091\u0003',
  '\u0002\u0002\u0002\u0278\u02a2\u0007R\u0002\u0002\u0279\u02a2\u0007',
  'S\u0002\u0002\u027a\u02a2\u0007T\u0002\u0002\u027b\u02a2\u0007U\u0002',
  '\u0002\u027c\u02a2\u0007X\u0002\u0002\u027d\u02a2\u0007/\u0002\u0002',
  '\u027e\u02a2\u0007\u001b\u0002\u0002\u027f\u02a2\u00070\u0002\u0002',
  '\u0280\u02a2\u0007)\u0002\u0002\u0281\u02a2\u0007\u000f\u0002\u0002',
  '\u0282\u02a2\u0007\u0007\u0002\u0002\u0283\u02a2\u0007+\u0002\u0002',
  '\u0284\u02a2\u0007\f\u0002\u0002\u0285\u02a2\u0007,\u0002\u0002\u0286',
  '\u02a2\u00071\u0002\u0002\u0287\u02a2\u00072\u0002\u0002\u0288\u02a2',
  '\u00073\u0002\u0002\u0289\u02a2\u00074\u0002\u0002\u028a\u02a2\u0007',
  '\u001c\u0002\u0002\u028b\u02a2\u0007\u001d\u0002\u0002\u028c\u02a2\u0007',
  '5\u0002\u0002\u028d\u02a2\u00076\u0002\u0002\u028e\u02a2\u00077\u0002',
  '\u0002\u028f\u02a2\u00078\u0002\u0002\u0290\u02a2\u00079\u0002\u0002',
  '\u0291\u02a2\u0007:\u0002\u0002\u0292\u02a2\u0007\u001a\u0002\u0002',
  '\u0293\u02a2\u0007;\u0002\u0002\u0294\u02a2\u0007<\u0002\u0002\u0295',
  '\u02a2\u0007\u0018\u0002\u0002\u0296\u02a2\u0007=\u0002\u0002\u0297',
  '\u02a2\u0007>\u0002\u0002\u0298\u02a2\u0007?\u0002\u0002\u0299\u02a2',
  '\u0007(\u0002\u0002\u029a\u02a2\u0007@\u0002\u0002\u029b\u02a2\u0007',
  'A\u0002\u0002\u029c\u02a2\u0007\u0019\u0002\u0002\u029d\u02a2\u0007',
  'B\u0002\u0002\u029e\u02a2\u0007C\u0002\u0002\u029f\u02a2\u0005\u0094',
  'K\u0002\u02a0\u02a2\u0005\u00a4S\u0002\u02a1\u0278\u0003\u0002\u0002',
  '\u0002\u02a1\u0279\u0003\u0002\u0002\u0002\u02a1\u027a\u0003\u0002\u0002',
  '\u0002\u02a1\u027b\u0003\u0002\u0002\u0002\u02a1\u027c\u0003\u0002\u0002',
  '\u0002\u02a1\u027d\u0003\u0002\u0002\u0002\u02a1\u027e\u0003\u0002\u0002',
  '\u0002\u02a1\u027f\u0003\u0002\u0002\u0002\u02a1\u0280\u0003\u0002\u0002',
  '\u0002\u02a1\u0281\u0003\u0002\u0002\u0002\u02a1\u0282\u0003\u0002\u0002',
  '\u0002\u02a1\u0283\u0003\u0002\u0002\u0002\u02a1\u0284\u0003\u0002\u0002',
  '\u0002\u02a1\u0285\u0003\u0002\u0002\u0002\u02a1\u0286\u0003\u0002\u0002',
  '\u0002\u02a1\u0287\u0003\u0002\u0002\u0002\u02a1\u0288\u0003\u0002\u0002',
  '\u0002\u02a1\u0289\u0003\u0002\u0002\u0002\u02a1\u028a\u0003\u0002\u0002',
  '\u0002\u02a1\u028b\u0003\u0002\u0002\u0002\u02a1\u028c\u0003\u0002\u0002',
  '\u0002\u02a1\u028d\u0003\u0002\u0002\u0002\u02a1\u028e\u0003\u0002\u0002',
  '\u0002\u02a1\u028f\u0003\u0002\u0002\u0002\u02a1\u0290\u0003\u0002\u0002',
  '\u0002\u02a1\u0291\u0003\u0002\u0002\u0002\u02a1\u0292\u0003\u0002\u0002',
  '\u0002\u02a1\u0293\u0003\u0002\u0002\u0002\u02a1\u0294\u0003\u0002\u0002',
  '\u0002\u02a1\u0295\u0003\u0002\u0002\u0002\u02a1\u0296\u0003\u0002\u0002',
  '\u0002\u02a1\u0297\u0003\u0002\u0002\u0002\u02a1\u0298\u0003\u0002\u0002',
  '\u0002\u02a1\u0299\u0003\u0002\u0002\u0002\u02a1\u029a\u0003\u0002\u0002',
  '\u0002\u02a1\u029b\u0003\u0002\u0002\u0002\u02a1\u029c\u0003\u0002\u0002',
  '\u0002\u02a1\u029d\u0003\u0002\u0002\u0002\u02a1\u029e\u0003\u0002\u0002',
  '\u0002\u02a1\u029f\u0003\u0002\u0002\u0002\u02a1\u02a0\u0003\u0002\u0002',
  '\u0002\u02a2\u0093\u0003\u0002\u0002\u0002\u02a3\u02a4\t\u0005\u0002',
  '\u0002\u02a4\u0095\u0003\u0002\u0002\u0002\u02a5\u02a8\u0005\u0092J',
  '\u0002\u02a6\u02a8\u0007\u0012\u0002\u0002\u02a7\u02a5\u0003\u0002\u0002',
  '\u0002\u02a7\u02a6\u0003\u0002\u0002\u0002\u02a8\u0097\u0003\u0002\u0002',
  '\u0002\u02a9\u02ae\u0005\u009aN\u0002\u02aa\u02ab\u0005\u009cO\u0002',
  '\u02ab\u02ac\u0005\u00b6\\\u0002\u02ac\u02ae\u0003\u0002\u0002\u0002',
  '\u02ad\u02a9\u0003\u0002\u0002\u0002\u02ad\u02aa\u0003\u0002\u0002\u0002',
  '\u02ae\u0099\u0003\u0002\u0002\u0002\u02af\u02b2\u0005\u00a2R\u0002',
  '\u02b0\u02b2\u00077\u0002\u0002\u02b1\u02af\u0003\u0002\u0002\u0002',
  '\u02b1\u02b0\u0003\u0002\u0002\u0002\u02b2\u009b\u0003\u0002\u0002\u0002',
  '\u02b3\u02b4\u0007\u0013\u0002\u0002\u02b4\u02b5\u0005\u009eP\u0002',
  '\u02b5\u02b6\u0007?\u0002\u0002\u02b6\u02b7\u0005\u009eP\u0002\u02b7',
  '\u02b8\u0005\u00a0Q\u0002\u02b8\u02b9\u0007\u0014\u0002\u0002\u02b9',
  '\u009d\u0003\u0002\u0002\u0002\u02ba\u02bf\u0005\u00a2R\u0002\u02bb',
  '\u02bc\u0005\u009cO\u0002\u02bc\u02bd\u0005\u00b6\\\u0002\u02bd\u02bf',
  '\u0003\u0002\u0002\u0002\u02be\u02ba\u0003\u0002\u0002\u0002\u02be\u02bb',
  '\u0003\u0002\u0002\u0002\u02bf\u009f\u0003\u0002\u0002\u0002\u02c0\u02c1',
  '\u0007?\u0002\u0002\u02c1\u02c2\u0005\u009eP\u0002\u02c2\u02c3\u0005',
  '\u00a0Q\u0002\u02c3\u02c6\u0003\u0002\u0002\u0002\u02c4\u02c6\u0003',
  '\u0002\u0002\u0002\u02c5\u02c0\u0003\u0002\u0002\u0002\u02c5\u02c4\u0003',
  '\u0002\u0002\u0002\u02c6\u00a1\u0003\u0002\u0002\u0002\u02c7\u02c8\u0005',
  '\u00a8U\u0002\u02c8\u02c9\u0005\u00b6\\\u0002\u02c9\u02eb\u0003\u0002',
  '\u0002\u0002\u02ca\u02cb\u0005\u00b4[\u0002\u02cb\u02cc\u0005\u00b6',
  '\\\u0002\u02cc\u02eb\u0003\u0002\u0002\u0002\u02cd\u02ce\u00072\u0002',
  '\u0002\u02ce\u02eb\u0005\u00b6\\\u0002\u02cf\u02d0\u00073\u0002\u0002',
  '\u02d0\u02eb\u0005\u00b6\\\u0002\u02d1\u02d2\u00076\u0002\u0002\u02d2',
  '\u02eb\u0005\u00b6\\\u0002\u02d3\u02d4\u0007T\u0002\u0002\u02d4\u02eb',
  '\u0005\u00b6\\\u0002\u02d5\u02d6\u0007@\u0002\u0002\u02d6\u02d7\u0007',
  '+\u0002\u0002\u02d7\u02d8\u0005\u0098M\u0002\u02d8\u02d9\u0007,\u0002',
  '\u0002\u02d9\u02da\u0005\u00b6\\\u0002\u02da\u02eb\u0003\u0002\u0002',
  '\u0002\u02db\u02dc\u0007=\u0002\u0002\u02dc\u02eb\u0005\u00b6\\\u0002',
  '\u02dd\u02de\u00075\u0002\u0002\u02de\u02eb\u0005\u00b6\\\u0002\u02df',
  '\u02e0\u0007E\u0002\u0002\u02e0\u02eb\u0005\u00b6\\\u0002\u02e1\u02e2',
  '\u0005\u00a4S\u0002\u02e2\u02e3\u0005\u00b6\\\u0002\u02e3\u02eb\u0003',
  '\u0002\u0002\u0002\u02e4\u02e5\u00074\u0002\u0002\u02e5\u02e6\u0007',
  '+\u0002\u0002\u02e6\u02e7\u0005\u0098M\u0002\u02e7\u02e8\u0007,\u0002',
  '\u0002\u02e8\u02e9\u0005\u00b6\\\u0002\u02e9\u02eb\u0003\u0002\u0002',
  '\u0002\u02ea\u02c7\u0003\u0002\u0002\u0002\u02ea\u02ca\u0003\u0002\u0002',
  '\u0002\u02ea\u02cd\u0003\u0002\u0002\u0002\u02ea\u02cf\u0003\u0002\u0002',
  '\u0002\u02ea\u02d1\u0003\u0002\u0002\u0002\u02ea\u02d3\u0003\u0002\u0002',
  '\u0002\u02ea\u02d5\u0003\u0002\u0002\u0002\u02ea\u02db\u0003\u0002\u0002',
  '\u0002\u02ea\u02dd\u0003\u0002\u0002\u0002\u02ea\u02df\u0003\u0002\u0002',
  '\u0002\u02ea\u02e1\u0003\u0002\u0002\u0002\u02ea\u02e4\u0003\u0002\u0002',
  '\u0002\u02eb\u00a3\u0003\u0002\u0002\u0002\u02ec\u02ed\t\u0006\u0002',
  '\u0002\u02ed\u00a5\u0003\u0002\u0002\u0002\u02ee\u02ef\u0005\u00a8U',
  '\u0002\u02ef\u02f0\u0005\u00b6\\\u0002\u02f0\u02f4\u0003\u0002\u0002',
  '\u0002\u02f1\u02f2\u0007T\u0002\u0002\u02f2\u02f4\u0005\u00b6\\\u0002',
  '\u02f3\u02ee\u0003\u0002\u0002\u0002\u02f3\u02f1\u0003\u0002\u0002\u0002',
  '\u02f4\u00a7\u0003\u0002\u0002\u0002\u02f5\u02fb\u0005\u00aeX\u0002',
  '\u02f6\u02fb\u0005\u00aaV\u0002\u02f7\u02fb\u00078\u0002\u0002\u02f8',
  '\u02fb\u00079\u0002\u0002\u02f9\u02fb\u0007>\u0002\u0002\u02fa\u02f5',
  '\u0003\u0002\u0002\u0002\u02fa\u02f6\u0003\u0002\u0002\u0002\u02fa\u02f7',
  '\u0003\u0002\u0002\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fa\u02f9',
  '\u0003\u0002\u0002\u0002\u02fb\u00a9\u0003\u0002\u0002\u0002\u02fc\u02fd',
  '\u0007D\u0002\u0002\u02fd\u0300\u0005\u00acW\u0002\u02fe\u0300\u0005',
  '\u00acW\u0002\u02ff\u02fc\u0003\u0002\u0002\u0002\u02ff\u02fe\u0003',
  '\u0002\u0002\u0002\u0300\u00ab\u0003\u0002\u0002\u0002\u0301\u0302\t',
  '\u0007\u0002\u0002\u0302\u00ad\u0003\u0002\u0002\u0002\u0303\u0304\u0007',
  'B\u0002\u0002\u0304\u0307\u0005\u00b0Y\u0002\u0305\u0307\u0005\u00b0',
  'Y\u0002\u0306\u0303\u0003\u0002\u0002\u0002\u0306\u0305\u0003\u0002',
  '\u0002\u0002\u0307\u00af\u0003\u0002\u0002\u0002\u0308\u030c\u0007A',
  '\u0002\u0002\u0309\u030a\u0007<\u0002\u0002\u030a\u030c\u0005\u00b2',
  'Z\u0002\u030b\u0308\u0003\u0002\u0002\u0002\u030b\u0309\u0003\u0002',
  '\u0002\u0002\u030c\u00b1\u0003\u0002\u0002\u0002\u030d\u0310\u0007<',
  '\u0002\u0002\u030e\u0310\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002',
  '\u0002\u0002\u030f\u030e\u0003\u0002\u0002\u0002\u0310\u00b3\u0003\u0002',
  '\u0002\u0002\u0311\u0312\u0007Q\u0002\u0002\u0312\u0313\u0007+\u0002',
  '\u0002\u0313\u0314\u0005\u00b8]\u0002\u0314\u0315\u0007,\u0002\u0002',
  '\u0315\u00b5\u0003\u0002\u0002\u0002\u0316\u0319\u00071\u0002\u0002',
  '\u0317\u0319\u0003\u0002\u0002\u0002\u0318\u0316\u0003\u0002\u0002\u0002',
  '\u0318\u0317\u0003\u0002\u0002\u0002\u0319\u00b7\u0003\u0002\u0002\u0002',
  '\u031a\u031d\u0005\u0098M\u0002\u031b\u031d\u0007C\u0002\u0002\u031c',
  '\u031a\u0003\u0002\u0002\u0002\u031c\u031b\u0003\u0002\u0002\u0002\u031d',
  '\u00b9\u0003\u0002\u0002\u0002\u031e\u031f\u0007T\u0002\u0002\u031f',
  '\u0320\u0005\u00bc_\u0002\u0320\u00bb\u0003\u0002\u0002\u0002\u0321',
  '\u0322\u0007\u0012\u0002\u0002\u0322\u0323\u0007T\u0002\u0002\u0323',
  '\u0326\u0005\u00bc_\u0002\u0324\u0326\u0003\u0002\u0002\u0002\u0325',
  '\u0321\u0003\u0002\u0002\u0002\u0325\u0324\u0003\u0002\u0002\u0002\u0326',
  '\u00bd\u0003\u0002\u0002\u0002\u0327\u0328\u0007T\u0002\u0002\u0328',
  '\u00bf\u0003\u0002\u0002\u0002\u0329\u032a\u0007T\u0002\u0002\u032a',
  '\u032b\u0007\u0013\u0002\u0002\u032b\u032c\u0005p9\u0002\u032c\u032d',
  '\u0007\u0014\u0002\u0002\u032d\u00c1\u0003\u0002\u0002\u0002\u032e\u032f',
  '\u0007T\u0002\u0002\u032f\u0330\u0007\f\u0002\u0002\u0330\u0331\u0007',
  'T\u0002\u0002\u0331\u00c3\u0003\u0002\u0002\u0002\u0332\u0333\u0007',
  'T\u0002\u0002\u0333\u0334\u0007\f\u0002\u0002\u0334\u0335\u0007\u0013',
  '\u0002\u0002\u0335\u0336\u0005\u00ba^\u0002\u0336\u0337\u0007\u0014',
  '\u0002\u0002\u0337\u00c5\u0003\u0002\u0002\u0002\u0338\u0339\u0007T',
  '\u0002\u0002\u0339\u033a\u0007\f\u0002\u0002\u033a\u033b\u0007T\u0002',
  '\u0002\u033b\u033c\u0007\u0013\u0002\u0002\u033c\u033d\u0005p9\u0002',
  '\u033d\u033e\u0007\u0014\u0002\u0002\u033e\u00c7\u0003\u0002\u0002\u0002',
  ';\u00d0\u00d8\u00de\u00e2\u00f9\u0107\u0113\u0122\u012c\u0138\u013e',
  '\u0143\u0148\u0157\u015c\u017b\u018a\u0195\u019d\u01a3\u01af\u01ba\u01c2',
  '\u01c9\u01d2\u01d8\u01dc\u01e2\u01ed\u01f9\u01ff\u0206\u0214\u0218\u021c',
  '\u0228\u0242\u0249\u025d\u0261\u0276\u02a1\u02a7\u02ad\u02b1\u02be\u02c5',
  '\u02ea\u02f3\u02fa\u02ff\u0306\u030b\u030f\u0318\u031c\u0325'
].join('');

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function(ds, index) {
  return new antlr4.dfa.DFA(ds, index);
});

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [
  null,
  "'callback'",
  "'interface'",
  "'{'",
  "'}'",
  "';'",
  "'class'",
  "'partial'",
  "'dictionary'",
  "'required'",
  "'='",
  "'['",
  "']'",
  "':'",
  "'extends'",
  "'enum'",
  "','",
  "'('",
  "')'",
  "'typedef'",
  "'implements'",
  "'const'",
  "'null'",
  "'true'",
  "'false'",
  "'-Infinity'",
  "'Infinity'",
  "'NaN'",
  "'serializer'",
  "'getter'",
  "'inherit'",
  "'stringifier'",
  "'static'",
  "'readonly'",
  "'attribute'",
  "'setter'",
  "'deleter'",
  "'legacycaller'",
  "'optional'",
  "'...'",
  "'iterable'",
  "'<'",
  "'>'",
  "'maplike'",
  "'setlike'",
  "'-'",
  "'.'",
  "'?'",
  "'ByteString'",
  "'DOMString'",
  "'FrozenArray'",
  "'RegExp'",
  "'USVString'",
  "'any'",
  "'boolean'",
  "'byte'",
  "'double'",
  "'float'",
  "'long'",
  "'object'",
  "'octet'",
  "'or'",
  "'sequence'",
  "'short'",
  "'unsigned'",
  "'void'",
  "'unrestricted'",
  "'DOMException'",
  "'ArrayBuffer'",
  "'DataView'",
  "'Int8Array'",
  "'Int16Array'",
  "'Int32Array'",
  "'Uint8Array'",
  "'Uint16Array'",
  "'Uint32Array'",
  "'Uint8ClampedArray'",
  "'Float32Array'",
  "'Float64Array'",
  "'Promise'"
];

var symbolicNames = [
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  'INTEGER_WEBIDL',
  'FLOAT_WEBIDL',
  'IDENTIFIER_WEBIDL',
  'STRING_WEBIDL',
  'WHITESPACE_WEBIDL',
  'COMMENT_WEBIDL',
  'OTHER_WEBIDL'
];

var ruleNames = [
  'webIDL',
  'definitions',
  'definition',
  'callbackOrInterface',
  'callbackRestOrInterface',
  'interface_',
  'class_',
  'partial',
  'partialDefinition',
  'partialInterface',
  'interfaceMembers',
  'interfaceMember',
  'dictionary',
  'dictionaryMembers',
  'dictionaryMember',
  'required',
  'partialDictionary',
  'default_',
  'defaultValue',
  'inheritance',
  'extension',
  'enum_',
  'enumValueList',
  'enumValueListComma',
  'enumValueListString',
  'callbackRest',
  'typedef',
  'implementsStatement',
  'const_',
  'constValue',
  'booleanLiteral',
  'floatLiteral',
  'serializer',
  'serializerRest',
  'serializationPattern',
  'serializationPatternMap',
  'serializationPatternList',
  'stringifier',
  'stringifierRest',
  'staticMember',
  'staticMemberRest',
  'readonlyMember',
  'readonlyMemberRest',
  'readWriteAttribute',
  'attributeRest',
  'attributeName',
  'attributeNameKeyword',
  'inherit',
  'readOnly',
  'operation',
  'specialOperation',
  'specials',
  'special',
  'operationRest',
  'optionalIdentifier',
  'argumentList',
  'arguments',
  'argument',
  'optionalOrRequiredArgument',
  'argumentName',
  'ellipsis',
  'iterable',
  'optionalType',
  'readWriteMaplike',
  'readWriteSetlike',
  'maplikeRest',
  'setlikeRest',
  'extendedAttributeList',
  'extendedAttributes',
  'extendedAttribute',
  'extendedAttributeRest',
  'extendedAttributeInner',
  'other',
  'argumentNameKeyword',
  'otherOrComma',
  'type',
  'singleType',
  'unionType',
  'unionMemberType',
  'unionMemberTypes',
  'nonAnyType',
  'bufferRelatedType',
  'constType',
  'primitiveType',
  'unrestrictedFloatType',
  'floatType',
  'unsignedIntegerType',
  'integerType',
  'optionalLong',
  'promiseType',
  'null_',
  'returnType',
  'identifierList',
  'identifiers',
  'extendedAttributeNoArgs',
  'extendedAttributeArgList',
  'extendedAttributeIdent',
  'extendedAttributeIdentList',
  'extendedAttributeNamedArgList'
];

function WebIDLParser(input) {
  antlr4.Parser.call(this, input);
  this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
  this.ruleNames = ruleNames;
  this.literalNames = literalNames;
  this.symbolicNames = symbolicNames;
  return this;
}

WebIDLParser.prototype = Object.create(antlr4.Parser.prototype);
WebIDLParser.prototype.constructor = WebIDLParser;

Object.defineProperty(WebIDLParser.prototype, 'atn', {
  get: function() {
    return atn;
  }
});

WebIDLParser.EOF = antlr4.Token.EOF;
WebIDLParser.T__0 = 1;
WebIDLParser.T__1 = 2;
WebIDLParser.T__2 = 3;
WebIDLParser.T__3 = 4;
WebIDLParser.T__4 = 5;
WebIDLParser.T__5 = 6;
WebIDLParser.T__6 = 7;
WebIDLParser.T__7 = 8;
WebIDLParser.T__8 = 9;
WebIDLParser.T__9 = 10;
WebIDLParser.T__10 = 11;
WebIDLParser.T__11 = 12;
WebIDLParser.T__12 = 13;
WebIDLParser.T__13 = 14;
WebIDLParser.T__14 = 15;
WebIDLParser.T__15 = 16;
WebIDLParser.T__16 = 17;
WebIDLParser.T__17 = 18;
WebIDLParser.T__18 = 19;
WebIDLParser.T__19 = 20;
WebIDLParser.T__20 = 21;
WebIDLParser.T__21 = 22;
WebIDLParser.T__22 = 23;
WebIDLParser.T__23 = 24;
WebIDLParser.T__24 = 25;
WebIDLParser.T__25 = 26;
WebIDLParser.T__26 = 27;
WebIDLParser.T__27 = 28;
WebIDLParser.T__28 = 29;
WebIDLParser.T__29 = 30;
WebIDLParser.T__30 = 31;
WebIDLParser.T__31 = 32;
WebIDLParser.T__32 = 33;
WebIDLParser.T__33 = 34;
WebIDLParser.T__34 = 35;
WebIDLParser.T__35 = 36;
WebIDLParser.T__36 = 37;
WebIDLParser.T__37 = 38;
WebIDLParser.T__38 = 39;
WebIDLParser.T__39 = 40;
WebIDLParser.T__40 = 41;
WebIDLParser.T__41 = 42;
WebIDLParser.T__42 = 43;
WebIDLParser.T__43 = 44;
WebIDLParser.T__44 = 45;
WebIDLParser.T__45 = 46;
WebIDLParser.T__46 = 47;
WebIDLParser.T__47 = 48;
WebIDLParser.T__48 = 49;
WebIDLParser.T__49 = 50;
WebIDLParser.T__50 = 51;
WebIDLParser.T__51 = 52;
WebIDLParser.T__52 = 53;
WebIDLParser.T__53 = 54;
WebIDLParser.T__54 = 55;
WebIDLParser.T__55 = 56;
WebIDLParser.T__56 = 57;
WebIDLParser.T__57 = 58;
WebIDLParser.T__58 = 59;
WebIDLParser.T__59 = 60;
WebIDLParser.T__60 = 61;
WebIDLParser.T__61 = 62;
WebIDLParser.T__62 = 63;
WebIDLParser.T__63 = 64;
WebIDLParser.T__64 = 65;
WebIDLParser.T__65 = 66;
WebIDLParser.T__66 = 67;
WebIDLParser.T__67 = 68;
WebIDLParser.T__68 = 69;
WebIDLParser.T__69 = 70;
WebIDLParser.T__70 = 71;
WebIDLParser.T__71 = 72;
WebIDLParser.T__72 = 73;
WebIDLParser.T__73 = 74;
WebIDLParser.T__74 = 75;
WebIDLParser.T__75 = 76;
WebIDLParser.T__76 = 77;
WebIDLParser.T__77 = 78;
WebIDLParser.T__78 = 79;
WebIDLParser.INTEGER_WEBIDL = 80;
WebIDLParser.FLOAT_WEBIDL = 81;
WebIDLParser.IDENTIFIER_WEBIDL = 82;
WebIDLParser.STRING_WEBIDL = 83;
WebIDLParser.WHITESPACE_WEBIDL = 84;
WebIDLParser.COMMENT_WEBIDL = 85;
WebIDLParser.OTHER_WEBIDL = 86;

WebIDLParser.RULE_webIDL = 0;
WebIDLParser.RULE_definitions = 1;
WebIDLParser.RULE_definition = 2;
WebIDLParser.RULE_callbackOrInterface = 3;
WebIDLParser.RULE_callbackRestOrInterface = 4;
WebIDLParser.RULE_interface_ = 5;
WebIDLParser.RULE_class_ = 6;
WebIDLParser.RULE_partial = 7;
WebIDLParser.RULE_partialDefinition = 8;
WebIDLParser.RULE_partialInterface = 9;
WebIDLParser.RULE_interfaceMembers = 10;
WebIDLParser.RULE_interfaceMember = 11;
WebIDLParser.RULE_dictionary = 12;
WebIDLParser.RULE_dictionaryMembers = 13;
WebIDLParser.RULE_dictionaryMember = 14;
WebIDLParser.RULE_required = 15;
WebIDLParser.RULE_partialDictionary = 16;
WebIDLParser.RULE_default_ = 17;
WebIDLParser.RULE_defaultValue = 18;
WebIDLParser.RULE_inheritance = 19;
WebIDLParser.RULE_extension = 20;
WebIDLParser.RULE_enum_ = 21;
WebIDLParser.RULE_enumValueList = 22;
WebIDLParser.RULE_enumValueListComma = 23;
WebIDLParser.RULE_enumValueListString = 24;
WebIDLParser.RULE_callbackRest = 25;
WebIDLParser.RULE_typedef = 26;
WebIDLParser.RULE_implementsStatement = 27;
WebIDLParser.RULE_const_ = 28;
WebIDLParser.RULE_constValue = 29;
WebIDLParser.RULE_booleanLiteral = 30;
WebIDLParser.RULE_floatLiteral = 31;
WebIDLParser.RULE_serializer = 32;
WebIDLParser.RULE_serializerRest = 33;
WebIDLParser.RULE_serializationPattern = 34;
WebIDLParser.RULE_serializationPatternMap = 35;
WebIDLParser.RULE_serializationPatternList = 36;
WebIDLParser.RULE_stringifier = 37;
WebIDLParser.RULE_stringifierRest = 38;
WebIDLParser.RULE_staticMember = 39;
WebIDLParser.RULE_staticMemberRest = 40;
WebIDLParser.RULE_readonlyMember = 41;
WebIDLParser.RULE_readonlyMemberRest = 42;
WebIDLParser.RULE_readWriteAttribute = 43;
WebIDLParser.RULE_attributeRest = 44;
WebIDLParser.RULE_attributeName = 45;
WebIDLParser.RULE_attributeNameKeyword = 46;
WebIDLParser.RULE_inherit = 47;
WebIDLParser.RULE_readOnly = 48;
WebIDLParser.RULE_operation = 49;
WebIDLParser.RULE_specialOperation = 50;
WebIDLParser.RULE_specials = 51;
WebIDLParser.RULE_special = 52;
WebIDLParser.RULE_operationRest = 53;
WebIDLParser.RULE_optionalIdentifier = 54;
WebIDLParser.RULE_argumentList = 55;
WebIDLParser.RULE_arguments = 56;
WebIDLParser.RULE_argument = 57;
WebIDLParser.RULE_optionalOrRequiredArgument = 58;
WebIDLParser.RULE_argumentName = 59;
WebIDLParser.RULE_ellipsis = 60;
WebIDLParser.RULE_iterable = 61;
WebIDLParser.RULE_optionalType = 62;
WebIDLParser.RULE_readWriteMaplike = 63;
WebIDLParser.RULE_readWriteSetlike = 64;
WebIDLParser.RULE_maplikeRest = 65;
WebIDLParser.RULE_setlikeRest = 66;
WebIDLParser.RULE_extendedAttributeList = 67;
WebIDLParser.RULE_extendedAttributes = 68;
WebIDLParser.RULE_extendedAttribute = 69;
WebIDLParser.RULE_extendedAttributeRest = 70;
WebIDLParser.RULE_extendedAttributeInner = 71;
WebIDLParser.RULE_other = 72;
WebIDLParser.RULE_argumentNameKeyword = 73;
WebIDLParser.RULE_otherOrComma = 74;
WebIDLParser.RULE_type = 75;
WebIDLParser.RULE_singleType = 76;
WebIDLParser.RULE_unionType = 77;
WebIDLParser.RULE_unionMemberType = 78;
WebIDLParser.RULE_unionMemberTypes = 79;
WebIDLParser.RULE_nonAnyType = 80;
WebIDLParser.RULE_bufferRelatedType = 81;
WebIDLParser.RULE_constType = 82;
WebIDLParser.RULE_primitiveType = 83;
WebIDLParser.RULE_unrestrictedFloatType = 84;
WebIDLParser.RULE_floatType = 85;
WebIDLParser.RULE_unsignedIntegerType = 86;
WebIDLParser.RULE_integerType = 87;
WebIDLParser.RULE_optionalLong = 88;
WebIDLParser.RULE_promiseType = 89;
WebIDLParser.RULE_null_ = 90;
WebIDLParser.RULE_returnType = 91;
WebIDLParser.RULE_identifierList = 92;
WebIDLParser.RULE_identifiers = 93;
WebIDLParser.RULE_extendedAttributeNoArgs = 94;
WebIDLParser.RULE_extendedAttributeArgList = 95;
WebIDLParser.RULE_extendedAttributeIdent = 96;
WebIDLParser.RULE_extendedAttributeIdentList = 97;
WebIDLParser.RULE_extendedAttributeNamedArgList = 98;

function WebIDLContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_webIDL;
  return this;
}

WebIDLContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WebIDLContext.prototype.constructor = WebIDLContext;

WebIDLContext.prototype.definitions = function() {
  return this.getTypedRuleContext(DefinitionsContext, 0);
};

WebIDLContext.prototype.EOF = function() {
  return this.getToken(WebIDLParser.EOF, 0);
};

WebIDLContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterWebIDL(this);
  }
};

WebIDLContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitWebIDL(this);
  }
};

WebIDLContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitWebIDL(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.WebIDLContext = WebIDLContext;

WebIDLParser.prototype.webIDL = function() {
  var localctx = new WebIDLContext(this, this._ctx, this.state);
  this.enterRule(localctx, 0, WebIDLParser.RULE_webIDL);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 198;
    this.definitions();
    this.state = 199;
    this.match(WebIDLParser.EOF);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DefinitionsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_definitions;
  return this;
}

DefinitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinitionsContext.prototype.constructor = DefinitionsContext;

DefinitionsContext.prototype.extendedAttributeList = function() {
  return this.getTypedRuleContext(ExtendedAttributeListContext, 0);
};

DefinitionsContext.prototype.definition = function() {
  return this.getTypedRuleContext(DefinitionContext, 0);
};

DefinitionsContext.prototype.definitions = function() {
  return this.getTypedRuleContext(DefinitionsContext, 0);
};

DefinitionsContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterDefinitions(this);
  }
};

DefinitionsContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitDefinitions(this);
  }
};

DefinitionsContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitDefinitions(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.DefinitionsContext = DefinitionsContext;

WebIDLParser.prototype.definitions = function() {
  var localctx = new DefinitionsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 2, WebIDLParser.RULE_definitions);
  try {
    this.state = 206;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__5:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__10:
      case WebIDLParser.T__14:
      case WebIDLParser.T__18:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 201;
        this.extendedAttributeList();
        this.state = 202;
        this.definition();
        this.state = 203;
        this.definitions();
        break;
      case WebIDLParser.EOF:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DefinitionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_definition;
  return this;
}

DefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinitionContext.prototype.constructor = DefinitionContext;

DefinitionContext.prototype.callbackOrInterface = function() {
  return this.getTypedRuleContext(CallbackOrInterfaceContext, 0);
};

DefinitionContext.prototype.partial = function() {
  return this.getTypedRuleContext(PartialContext, 0);
};

DefinitionContext.prototype.dictionary = function() {
  return this.getTypedRuleContext(DictionaryContext, 0);
};

DefinitionContext.prototype.enum_ = function() {
  return this.getTypedRuleContext(Enum_Context, 0);
};

DefinitionContext.prototype.typedef = function() {
  return this.getTypedRuleContext(TypedefContext, 0);
};

DefinitionContext.prototype.implementsStatement = function() {
  return this.getTypedRuleContext(ImplementsStatementContext, 0);
};

DefinitionContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterDefinition(this);
  }
};

DefinitionContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitDefinition(this);
  }
};

DefinitionContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitDefinition(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.DefinitionContext = DefinitionContext;

WebIDLParser.prototype.definition = function() {
  var localctx = new DefinitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 4, WebIDLParser.RULE_definition);
  try {
    this.state = 214;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__5:
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        this.callbackOrInterface();
        break;
      case WebIDLParser.T__6:
        this.enterOuterAlt(localctx, 2);
        this.state = 209;
        this.partial();
        break;
      case WebIDLParser.T__7:
        this.enterOuterAlt(localctx, 3);
        this.state = 210;
        this.dictionary();
        break;
      case WebIDLParser.T__14:
        this.enterOuterAlt(localctx, 4);
        this.state = 211;
        this.enum_();
        break;
      case WebIDLParser.T__18:
        this.enterOuterAlt(localctx, 5);
        this.state = 212;
        this.typedef();
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 6);
        this.state = 213;
        this.implementsStatement();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function CallbackOrInterfaceContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_callbackOrInterface;
  return this;
}

CallbackOrInterfaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallbackOrInterfaceContext.prototype.constructor = CallbackOrInterfaceContext;

CallbackOrInterfaceContext.prototype.callbackRestOrInterface = function() {
  return this.getTypedRuleContext(CallbackRestOrInterfaceContext, 0);
};

CallbackOrInterfaceContext.prototype.interface_ = function() {
  return this.getTypedRuleContext(Interface_Context, 0);
};

CallbackOrInterfaceContext.prototype.class_ = function() {
  return this.getTypedRuleContext(Class_Context, 0);
};

CallbackOrInterfaceContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterCallbackOrInterface(this);
  }
};

CallbackOrInterfaceContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitCallbackOrInterface(this);
  }
};

CallbackOrInterfaceContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitCallbackOrInterface(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.CallbackOrInterfaceContext = CallbackOrInterfaceContext;

WebIDLParser.prototype.callbackOrInterface = function() {
  var localctx = new CallbackOrInterfaceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 6, WebIDLParser.RULE_callbackOrInterface);
  try {
    this.state = 220;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__0:
        this.enterOuterAlt(localctx, 1);
        this.state = 216;
        this.match(WebIDLParser.T__0);
        this.state = 217;
        this.callbackRestOrInterface();
        break;
      case WebIDLParser.T__1:
        this.enterOuterAlt(localctx, 2);
        this.state = 218;
        this.interface_();
        break;
      case WebIDLParser.T__5:
        this.enterOuterAlt(localctx, 3);
        this.state = 219;
        this.class_();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function CallbackRestOrInterfaceContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_callbackRestOrInterface;
  return this;
}

CallbackRestOrInterfaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallbackRestOrInterfaceContext.prototype.constructor = CallbackRestOrInterfaceContext;

CallbackRestOrInterfaceContext.prototype.callbackRest = function() {
  return this.getTypedRuleContext(CallbackRestContext, 0);
};

CallbackRestOrInterfaceContext.prototype.interface_ = function() {
  return this.getTypedRuleContext(Interface_Context, 0);
};

CallbackRestOrInterfaceContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterCallbackRestOrInterface(this);
  }
};

CallbackRestOrInterfaceContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitCallbackRestOrInterface(this);
  }
};

CallbackRestOrInterfaceContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitCallbackRestOrInterface(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.CallbackRestOrInterfaceContext = CallbackRestOrInterfaceContext;

WebIDLParser.prototype.callbackRestOrInterface = function() {
  var localctx = new CallbackRestOrInterfaceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 8, WebIDLParser.RULE_callbackRestOrInterface);
  try {
    this.state = 224;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 222;
        this.callbackRest();
        break;
      case WebIDLParser.T__1:
        this.enterOuterAlt(localctx, 2);
        this.state = 223;
        this.interface_();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interface_Context(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_interface_;
  return this;
}

Interface_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_Context.prototype.constructor = Interface_Context;

Interface_Context.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

Interface_Context.prototype.inheritance = function() {
  return this.getTypedRuleContext(InheritanceContext, 0);
};

Interface_Context.prototype.interfaceMembers = function() {
  return this.getTypedRuleContext(InterfaceMembersContext, 0);
};

Interface_Context.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterInterface_(this);
  }
};

Interface_Context.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitInterface_(this);
  }
};

Interface_Context.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitInterface_(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.Interface_Context = Interface_Context;

WebIDLParser.prototype.interface_ = function() {
  var localctx = new Interface_Context(this, this._ctx, this.state);
  this.enterRule(localctx, 10, WebIDLParser.RULE_interface_);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 226;
    this.match(WebIDLParser.T__1);
    this.state = 227;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 228;
    this.inheritance();
    this.state = 229;
    this.match(WebIDLParser.T__2);
    this.state = 230;
    this.interfaceMembers();
    this.state = 231;
    this.match(WebIDLParser.T__3);
    this.state = 232;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Class_Context(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_class_;
  return this;
}

Class_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_Context.prototype.constructor = Class_Context;

Class_Context.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

Class_Context.prototype.extension = function() {
  return this.getTypedRuleContext(ExtensionContext, 0);
};

Class_Context.prototype.interfaceMembers = function() {
  return this.getTypedRuleContext(InterfaceMembersContext, 0);
};

Class_Context.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterClass_(this);
  }
};

Class_Context.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitClass_(this);
  }
};

Class_Context.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitClass_(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.Class_Context = Class_Context;

WebIDLParser.prototype.class_ = function() {
  var localctx = new Class_Context(this, this._ctx, this.state);
  this.enterRule(localctx, 12, WebIDLParser.RULE_class_);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 234;
    this.match(WebIDLParser.T__5);
    this.state = 235;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 236;
    this.extension();
    this.state = 237;
    this.match(WebIDLParser.T__2);
    this.state = 238;
    this.interfaceMembers();
    this.state = 239;
    this.match(WebIDLParser.T__3);
    this.state = 240;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PartialContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_partial;
  return this;
}

PartialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartialContext.prototype.constructor = PartialContext;

PartialContext.prototype.partialDefinition = function() {
  return this.getTypedRuleContext(PartialDefinitionContext, 0);
};

PartialContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterPartial(this);
  }
};

PartialContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitPartial(this);
  }
};

PartialContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitPartial(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.PartialContext = PartialContext;

WebIDLParser.prototype.partial = function() {
  var localctx = new PartialContext(this, this._ctx, this.state);
  this.enterRule(localctx, 14, WebIDLParser.RULE_partial);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 242;
    this.match(WebIDLParser.T__6);
    this.state = 243;
    this.partialDefinition();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PartialDefinitionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_partialDefinition;
  return this;
}

PartialDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartialDefinitionContext.prototype.constructor = PartialDefinitionContext;

PartialDefinitionContext.prototype.partialInterface = function() {
  return this.getTypedRuleContext(PartialInterfaceContext, 0);
};

PartialDefinitionContext.prototype.partialDictionary = function() {
  return this.getTypedRuleContext(PartialDictionaryContext, 0);
};

PartialDefinitionContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterPartialDefinition(this);
  }
};

PartialDefinitionContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitPartialDefinition(this);
  }
};

PartialDefinitionContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitPartialDefinition(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.PartialDefinitionContext = PartialDefinitionContext;

WebIDLParser.prototype.partialDefinition = function() {
  var localctx = new PartialDefinitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 16, WebIDLParser.RULE_partialDefinition);
  try {
    this.state = 247;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__1:
        this.enterOuterAlt(localctx, 1);
        this.state = 245;
        this.partialInterface();
        break;
      case WebIDLParser.T__7:
        this.enterOuterAlt(localctx, 2);
        this.state = 246;
        this.partialDictionary();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PartialInterfaceContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_partialInterface;
  return this;
}

PartialInterfaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartialInterfaceContext.prototype.constructor = PartialInterfaceContext;

PartialInterfaceContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

PartialInterfaceContext.prototype.interfaceMembers = function() {
  return this.getTypedRuleContext(InterfaceMembersContext, 0);
};

PartialInterfaceContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterPartialInterface(this);
  }
};

PartialInterfaceContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitPartialInterface(this);
  }
};

PartialInterfaceContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitPartialInterface(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.PartialInterfaceContext = PartialInterfaceContext;

WebIDLParser.prototype.partialInterface = function() {
  var localctx = new PartialInterfaceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 18, WebIDLParser.RULE_partialInterface);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 249;
    this.match(WebIDLParser.T__1);
    this.state = 250;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 251;
    this.match(WebIDLParser.T__2);
    this.state = 252;
    this.interfaceMembers();
    this.state = 253;
    this.match(WebIDLParser.T__3);
    this.state = 254;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function InterfaceMembersContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_interfaceMembers;
  return this;
}

InterfaceMembersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMembersContext.prototype.constructor = InterfaceMembersContext;

InterfaceMembersContext.prototype.extendedAttributeList = function() {
  return this.getTypedRuleContext(ExtendedAttributeListContext, 0);
};

InterfaceMembersContext.prototype.interfaceMember = function() {
  return this.getTypedRuleContext(InterfaceMemberContext, 0);
};

InterfaceMembersContext.prototype.interfaceMembers = function() {
  return this.getTypedRuleContext(InterfaceMembersContext, 0);
};

InterfaceMembersContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterInterfaceMembers(this);
  }
};

InterfaceMembersContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitInterfaceMembers(this);
  }
};

InterfaceMembersContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitInterfaceMembers(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.InterfaceMembersContext = InterfaceMembersContext;

WebIDLParser.prototype.interfaceMembers = function() {
  var localctx = new InterfaceMembersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 20, WebIDLParser.RULE_interfaceMembers);
  try {
    this.state = 261;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__10:
      case WebIDLParser.T__16:
      case WebIDLParser.T__20:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__32:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__39:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        this.extendedAttributeList();
        this.state = 257;
        this.interfaceMember();
        this.state = 258;
        this.interfaceMembers();
        break;
      case WebIDLParser.T__3:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function InterfaceMemberContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_interfaceMember;
  return this;
}

InterfaceMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMemberContext.prototype.constructor = InterfaceMemberContext;

InterfaceMemberContext.prototype.const_ = function() {
  return this.getTypedRuleContext(Const_Context, 0);
};

InterfaceMemberContext.prototype.operation = function() {
  return this.getTypedRuleContext(OperationContext, 0);
};

InterfaceMemberContext.prototype.serializer = function() {
  return this.getTypedRuleContext(SerializerContext, 0);
};

InterfaceMemberContext.prototype.stringifier = function() {
  return this.getTypedRuleContext(StringifierContext, 0);
};

InterfaceMemberContext.prototype.staticMember = function() {
  return this.getTypedRuleContext(StaticMemberContext, 0);
};

InterfaceMemberContext.prototype.iterable = function() {
  return this.getTypedRuleContext(IterableContext, 0);
};

InterfaceMemberContext.prototype.readonlyMember = function() {
  return this.getTypedRuleContext(ReadonlyMemberContext, 0);
};

InterfaceMemberContext.prototype.readWriteAttribute = function() {
  return this.getTypedRuleContext(ReadWriteAttributeContext, 0);
};

InterfaceMemberContext.prototype.readWriteMaplike = function() {
  return this.getTypedRuleContext(ReadWriteMaplikeContext, 0);
};

InterfaceMemberContext.prototype.readWriteSetlike = function() {
  return this.getTypedRuleContext(ReadWriteSetlikeContext, 0);
};

InterfaceMemberContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterInterfaceMember(this);
  }
};

InterfaceMemberContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitInterfaceMember(this);
  }
};

InterfaceMemberContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitInterfaceMember(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.InterfaceMemberContext = InterfaceMemberContext;

WebIDLParser.prototype.interfaceMember = function() {
  var localctx = new InterfaceMemberContext(this, this._ctx, this.state);
  this.enterRule(localctx, 22, WebIDLParser.RULE_interfaceMember);
  try {
    this.state = 273;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__20:
        this.enterOuterAlt(localctx, 1);
        this.state = 263;
        this.const_();
        break;
      case WebIDLParser.T__16:
      case WebIDLParser.T__28:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 264;
        this.operation();
        break;
      case WebIDLParser.T__27:
        this.enterOuterAlt(localctx, 3);
        this.state = 265;
        this.serializer();
        break;
      case WebIDLParser.T__30:
        this.enterOuterAlt(localctx, 4);
        this.state = 266;
        this.stringifier();
        break;
      case WebIDLParser.T__31:
        this.enterOuterAlt(localctx, 5);
        this.state = 267;
        this.staticMember();
        break;
      case WebIDLParser.T__39:
        this.enterOuterAlt(localctx, 6);
        this.state = 268;
        this.iterable();
        break;
      case WebIDLParser.T__32:
        this.enterOuterAlt(localctx, 7);
        this.state = 269;
        this.readonlyMember();
        break;
      case WebIDLParser.T__29:
      case WebIDLParser.T__33:
        this.enterOuterAlt(localctx, 8);
        this.state = 270;
        this.readWriteAttribute();
        break;
      case WebIDLParser.T__42:
        this.enterOuterAlt(localctx, 9);
        this.state = 271;
        this.readWriteMaplike();
        break;
      case WebIDLParser.T__43:
        this.enterOuterAlt(localctx, 10);
        this.state = 272;
        this.readWriteSetlike();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DictionaryContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_dictionary;
  return this;
}

DictionaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryContext.prototype.constructor = DictionaryContext;

DictionaryContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

DictionaryContext.prototype.inheritance = function() {
  return this.getTypedRuleContext(InheritanceContext, 0);
};

DictionaryContext.prototype.dictionaryMembers = function() {
  return this.getTypedRuleContext(DictionaryMembersContext, 0);
};

DictionaryContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterDictionary(this);
  }
};

DictionaryContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitDictionary(this);
  }
};

DictionaryContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitDictionary(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.DictionaryContext = DictionaryContext;

WebIDLParser.prototype.dictionary = function() {
  var localctx = new DictionaryContext(this, this._ctx, this.state);
  this.enterRule(localctx, 24, WebIDLParser.RULE_dictionary);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 275;
    this.match(WebIDLParser.T__7);
    this.state = 276;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 277;
    this.inheritance();
    this.state = 278;
    this.match(WebIDLParser.T__2);
    this.state = 279;
    this.dictionaryMembers();
    this.state = 280;
    this.match(WebIDLParser.T__3);
    this.state = 281;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DictionaryMembersContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_dictionaryMembers;
  return this;
}

DictionaryMembersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryMembersContext.prototype.constructor = DictionaryMembersContext;

DictionaryMembersContext.prototype.extendedAttributeList = function() {
  return this.getTypedRuleContext(ExtendedAttributeListContext, 0);
};

DictionaryMembersContext.prototype.dictionaryMember = function() {
  return this.getTypedRuleContext(DictionaryMemberContext, 0);
};

DictionaryMembersContext.prototype.dictionaryMembers = function() {
  return this.getTypedRuleContext(DictionaryMembersContext, 0);
};

DictionaryMembersContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterDictionaryMembers(this);
  }
};

DictionaryMembersContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitDictionaryMembers(this);
  }
};

DictionaryMembersContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitDictionaryMembers(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.DictionaryMembersContext = DictionaryMembersContext;

WebIDLParser.prototype.dictionaryMembers = function() {
  var localctx = new DictionaryMembersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 26, WebIDLParser.RULE_dictionaryMembers);
  try {
    this.state = 288;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__8:
      case WebIDLParser.T__10:
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 283;
        this.extendedAttributeList();
        this.state = 284;
        this.dictionaryMember();
        this.state = 285;
        this.dictionaryMembers();
        break;
      case WebIDLParser.T__3:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DictionaryMemberContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_dictionaryMember;
  return this;
}

DictionaryMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryMemberContext.prototype.constructor = DictionaryMemberContext;

DictionaryMemberContext.prototype.required = function() {
  return this.getTypedRuleContext(RequiredContext, 0);
};

DictionaryMemberContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

DictionaryMemberContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

DictionaryMemberContext.prototype.default_ = function() {
  return this.getTypedRuleContext(Default_Context, 0);
};

DictionaryMemberContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterDictionaryMember(this);
  }
};

DictionaryMemberContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitDictionaryMember(this);
  }
};

DictionaryMemberContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitDictionaryMember(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.DictionaryMemberContext = DictionaryMemberContext;

WebIDLParser.prototype.dictionaryMember = function() {
  var localctx = new DictionaryMemberContext(this, this._ctx, this.state);
  this.enterRule(localctx, 28, WebIDLParser.RULE_dictionaryMember);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 290;
    this.required();
    this.state = 291;
    this.type();
    this.state = 292;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 293;
    this.default_();
    this.state = 294;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function RequiredContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_required;
  return this;
}

RequiredContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredContext.prototype.constructor = RequiredContext;

RequiredContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterRequired(this);
  }
};

RequiredContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitRequired(this);
  }
};

RequiredContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitRequired(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.RequiredContext = RequiredContext;

WebIDLParser.prototype.required = function() {
  var localctx = new RequiredContext(this, this._ctx, this.state);
  this.enterRule(localctx, 30, WebIDLParser.RULE_required);
  try {
    this.state = 298;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__8:
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this.match(WebIDLParser.T__8);
        break;
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PartialDictionaryContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_partialDictionary;
  return this;
}

PartialDictionaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartialDictionaryContext.prototype.constructor = PartialDictionaryContext;

PartialDictionaryContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

PartialDictionaryContext.prototype.dictionaryMembers = function() {
  return this.getTypedRuleContext(DictionaryMembersContext, 0);
};

PartialDictionaryContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterPartialDictionary(this);
  }
};

PartialDictionaryContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitPartialDictionary(this);
  }
};

PartialDictionaryContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitPartialDictionary(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.PartialDictionaryContext = PartialDictionaryContext;

WebIDLParser.prototype.partialDictionary = function() {
  var localctx = new PartialDictionaryContext(this, this._ctx, this.state);
  this.enterRule(localctx, 32, WebIDLParser.RULE_partialDictionary);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 300;
    this.match(WebIDLParser.T__7);
    this.state = 301;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 302;
    this.match(WebIDLParser.T__2);
    this.state = 303;
    this.dictionaryMembers();
    this.state = 304;
    this.match(WebIDLParser.T__3);
    this.state = 305;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Default_Context(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_default_;
  return this;
}

Default_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_Context.prototype.constructor = Default_Context;

Default_Context.prototype.defaultValue = function() {
  return this.getTypedRuleContext(DefaultValueContext, 0);
};

Default_Context.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterDefault_(this);
  }
};

Default_Context.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitDefault_(this);
  }
};

Default_Context.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitDefault_(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.Default_Context = Default_Context;

WebIDLParser.prototype.default_ = function() {
  var localctx = new Default_Context(this, this._ctx, this.state);
  this.enterRule(localctx, 34, WebIDLParser.RULE_default_);
  try {
    this.state = 310;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__9:
        this.enterOuterAlt(localctx, 1);
        this.state = 307;
        this.match(WebIDLParser.T__9);
        this.state = 308;
        this.defaultValue();
        break;
      case WebIDLParser.T__4:
      case WebIDLParser.T__15:
      case WebIDLParser.T__17:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function DefaultValueContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_defaultValue;
  return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.constValue = function() {
  return this.getTypedRuleContext(ConstValueContext, 0);
};

DefaultValueContext.prototype.STRING_WEBIDL = function() {
  return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterDefaultValue(this);
  }
};

DefaultValueContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitDefaultValue(this);
  }
};

DefaultValueContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitDefaultValue(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.DefaultValueContext = DefaultValueContext;

WebIDLParser.prototype.defaultValue = function() {
  var localctx = new DefaultValueContext(this, this._ctx, this.state);
  this.enterRule(localctx, 36, WebIDLParser.RULE_defaultValue);
  try {
    this.state = 316;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__21:
      case WebIDLParser.T__22:
      case WebIDLParser.T__23:
      case WebIDLParser.T__24:
      case WebIDLParser.T__25:
      case WebIDLParser.T__26:
      case WebIDLParser.INTEGER_WEBIDL:
      case WebIDLParser.FLOAT_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 312;
        this.constValue();
        break;
      case WebIDLParser.STRING_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 313;
        this.match(WebIDLParser.STRING_WEBIDL);
        break;
      case WebIDLParser.T__10:
        this.enterOuterAlt(localctx, 3);
        this.state = 314;
        this.match(WebIDLParser.T__10);
        this.state = 315;
        this.match(WebIDLParser.T__11);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function InheritanceContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_inheritance;
  return this;
}

InheritanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceContext.prototype.constructor = InheritanceContext;

InheritanceContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

InheritanceContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterInheritance(this);
  }
};

InheritanceContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitInheritance(this);
  }
};

InheritanceContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitInheritance(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.InheritanceContext = InheritanceContext;

WebIDLParser.prototype.inheritance = function() {
  var localctx = new InheritanceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 38, WebIDLParser.RULE_inheritance);
  try {
    this.state = 321;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__12:
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.match(WebIDLParser.T__12);
        this.state = 319;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        break;
      case WebIDLParser.T__2:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtensionContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extension;
  return this;
}

ExtensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionContext.prototype.constructor = ExtensionContext;

ExtensionContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

ExtensionContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtension(this);
  }
};

ExtensionContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtension(this);
  }
};

ExtensionContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtension(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtensionContext = ExtensionContext;

WebIDLParser.prototype.extension = function() {
  var localctx = new ExtensionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 40, WebIDLParser.RULE_extension);
  try {
    this.state = 326;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__13:
        this.enterOuterAlt(localctx, 1);
        this.state = 323;
        this.match(WebIDLParser.T__13);
        this.state = 324;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        break;
      case WebIDLParser.T__2:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Enum_Context(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_enum_;
  return this;
}

Enum_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_Context.prototype.constructor = Enum_Context;

Enum_Context.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

Enum_Context.prototype.enumValueList = function() {
  return this.getTypedRuleContext(EnumValueListContext, 0);
};

Enum_Context.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterEnum_(this);
  }
};

Enum_Context.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitEnum_(this);
  }
};

Enum_Context.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitEnum_(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.Enum_Context = Enum_Context;

WebIDLParser.prototype.enum_ = function() {
  var localctx = new Enum_Context(this, this._ctx, this.state);
  this.enterRule(localctx, 42, WebIDLParser.RULE_enum_);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 328;
    this.match(WebIDLParser.T__14);
    this.state = 329;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 330;
    this.match(WebIDLParser.T__2);
    this.state = 331;
    this.enumValueList();
    this.state = 332;
    this.match(WebIDLParser.T__3);
    this.state = 333;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function EnumValueListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_enumValueList;
  return this;
}

EnumValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueListContext.prototype.constructor = EnumValueListContext;

EnumValueListContext.prototype.STRING_WEBIDL = function() {
  return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
};

EnumValueListContext.prototype.enumValueListComma = function() {
  return this.getTypedRuleContext(EnumValueListCommaContext, 0);
};

EnumValueListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterEnumValueList(this);
  }
};

EnumValueListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitEnumValueList(this);
  }
};

EnumValueListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitEnumValueList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.EnumValueListContext = EnumValueListContext;

WebIDLParser.prototype.enumValueList = function() {
  var localctx = new EnumValueListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 44, WebIDLParser.RULE_enumValueList);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 335;
    this.match(WebIDLParser.STRING_WEBIDL);
    this.state = 336;
    this.enumValueListComma();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function EnumValueListCommaContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_enumValueListComma;
  return this;
}

EnumValueListCommaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueListCommaContext.prototype.constructor = EnumValueListCommaContext;

EnumValueListCommaContext.prototype.enumValueListString = function() {
  return this.getTypedRuleContext(EnumValueListStringContext, 0);
};

EnumValueListCommaContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterEnumValueListComma(this);
  }
};

EnumValueListCommaContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitEnumValueListComma(this);
  }
};

EnumValueListCommaContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitEnumValueListComma(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.EnumValueListCommaContext = EnumValueListCommaContext;

WebIDLParser.prototype.enumValueListComma = function() {
  var localctx = new EnumValueListCommaContext(this, this._ctx, this.state);
  this.enterRule(localctx, 46, WebIDLParser.RULE_enumValueListComma);
  try {
    this.state = 341;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__15:
        this.enterOuterAlt(localctx, 1);
        this.state = 338;
        this.match(WebIDLParser.T__15);
        this.state = 339;
        this.enumValueListString();
        break;
      case WebIDLParser.T__3:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function EnumValueListStringContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_enumValueListString;
  return this;
}

EnumValueListStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueListStringContext.prototype.constructor = EnumValueListStringContext;

EnumValueListStringContext.prototype.STRING_WEBIDL = function() {
  return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
};

EnumValueListStringContext.prototype.enumValueListComma = function() {
  return this.getTypedRuleContext(EnumValueListCommaContext, 0);
};

EnumValueListStringContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterEnumValueListString(this);
  }
};

EnumValueListStringContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitEnumValueListString(this);
  }
};

EnumValueListStringContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitEnumValueListString(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.EnumValueListStringContext = EnumValueListStringContext;

WebIDLParser.prototype.enumValueListString = function() {
  var localctx = new EnumValueListStringContext(this, this._ctx, this.state);
  this.enterRule(localctx, 48, WebIDLParser.RULE_enumValueListString);
  try {
    this.state = 346;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.STRING_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(WebIDLParser.STRING_WEBIDL);
        this.state = 344;
        this.enumValueListComma();
        break;
      case WebIDLParser.T__3:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function CallbackRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_callbackRest;
  return this;
}

CallbackRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallbackRestContext.prototype.constructor = CallbackRestContext;

CallbackRestContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

CallbackRestContext.prototype.returnType = function() {
  return this.getTypedRuleContext(ReturnTypeContext, 0);
};

CallbackRestContext.prototype.argumentList = function() {
  return this.getTypedRuleContext(ArgumentListContext, 0);
};

CallbackRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterCallbackRest(this);
  }
};

CallbackRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitCallbackRest(this);
  }
};

CallbackRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitCallbackRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.CallbackRestContext = CallbackRestContext;

WebIDLParser.prototype.callbackRest = function() {
  var localctx = new CallbackRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 50, WebIDLParser.RULE_callbackRest);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 348;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 349;
    this.match(WebIDLParser.T__9);
    this.state = 350;
    this.returnType();
    this.state = 351;
    this.match(WebIDLParser.T__16);
    this.state = 352;
    this.argumentList();
    this.state = 353;
    this.match(WebIDLParser.T__17);
    this.state = 354;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function TypedefContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_typedef;
  return this;
}

TypedefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefContext.prototype.constructor = TypedefContext;

TypedefContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

TypedefContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

TypedefContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterTypedef(this);
  }
};

TypedefContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitTypedef(this);
  }
};

TypedefContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitTypedef(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.TypedefContext = TypedefContext;

WebIDLParser.prototype.typedef = function() {
  var localctx = new TypedefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 52, WebIDLParser.RULE_typedef);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 356;
    this.match(WebIDLParser.T__18);
    this.state = 357;
    this.type();
    this.state = 358;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 359;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ImplementsStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_implementsStatement;
  return this;
}

ImplementsStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementsStatementContext.prototype.constructor = ImplementsStatementContext;

ImplementsStatementContext.prototype.IDENTIFIER_WEBIDL = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(WebIDLParser.IDENTIFIER_WEBIDL);
  } else {
    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
  }
};

ImplementsStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterImplementsStatement(this);
  }
};

ImplementsStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitImplementsStatement(this);
  }
};

ImplementsStatementContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitImplementsStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ImplementsStatementContext = ImplementsStatementContext;

WebIDLParser.prototype.implementsStatement = function() {
  var localctx = new ImplementsStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 54, WebIDLParser.RULE_implementsStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 361;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 362;
    this.match(WebIDLParser.T__19);
    this.state = 363;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 364;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Const_Context(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_const_;
  return this;
}

Const_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Const_Context.prototype.constructor = Const_Context;

Const_Context.prototype.constType = function() {
  return this.getTypedRuleContext(ConstTypeContext, 0);
};

Const_Context.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

Const_Context.prototype.constValue = function() {
  return this.getTypedRuleContext(ConstValueContext, 0);
};

Const_Context.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterConst_(this);
  }
};

Const_Context.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitConst_(this);
  }
};

Const_Context.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitConst_(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.Const_Context = Const_Context;

WebIDLParser.prototype.const_ = function() {
  var localctx = new Const_Context(this, this._ctx, this.state);
  this.enterRule(localctx, 56, WebIDLParser.RULE_const_);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 366;
    this.match(WebIDLParser.T__20);
    this.state = 367;
    this.constType();
    this.state = 368;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 369;
    this.match(WebIDLParser.T__9);
    this.state = 370;
    this.constValue();
    this.state = 371;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ConstValueContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_constValue;
  return this;
}

ConstValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstValueContext.prototype.constructor = ConstValueContext;

ConstValueContext.prototype.booleanLiteral = function() {
  return this.getTypedRuleContext(BooleanLiteralContext, 0);
};

ConstValueContext.prototype.floatLiteral = function() {
  return this.getTypedRuleContext(FloatLiteralContext, 0);
};

ConstValueContext.prototype.INTEGER_WEBIDL = function() {
  return this.getToken(WebIDLParser.INTEGER_WEBIDL, 0);
};

ConstValueContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterConstValue(this);
  }
};

ConstValueContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitConstValue(this);
  }
};

ConstValueContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitConstValue(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ConstValueContext = ConstValueContext;

WebIDLParser.prototype.constValue = function() {
  var localctx = new ConstValueContext(this, this._ctx, this.state);
  this.enterRule(localctx, 58, WebIDLParser.RULE_constValue);
  try {
    this.state = 377;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__22:
      case WebIDLParser.T__23:
        this.enterOuterAlt(localctx, 1);
        this.state = 373;
        this.booleanLiteral();
        break;
      case WebIDLParser.T__24:
      case WebIDLParser.T__25:
      case WebIDLParser.T__26:
      case WebIDLParser.FLOAT_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 374;
        this.floatLiteral();
        break;
      case WebIDLParser.INTEGER_WEBIDL:
        this.enterOuterAlt(localctx, 3);
        this.state = 375;
        this.match(WebIDLParser.INTEGER_WEBIDL);
        break;
      case WebIDLParser.T__21:
        this.enterOuterAlt(localctx, 4);
        this.state = 376;
        this.match(WebIDLParser.T__21);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_booleanLiteral;
  return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterBooleanLiteral(this);
  }
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitBooleanLiteral(this);
  }
};

BooleanLiteralContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitBooleanLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.BooleanLiteralContext = BooleanLiteralContext;

WebIDLParser.prototype.booleanLiteral = function() {
  var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 60, WebIDLParser.RULE_booleanLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 379;
    _la = this._input.LA(1);
    if(!(_la === WebIDLParser.T__22 || _la === WebIDLParser.T__23)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function FloatLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_floatLiteral;
  return this;
}

FloatLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatLiteralContext.prototype.constructor = FloatLiteralContext;

FloatLiteralContext.prototype.FLOAT_WEBIDL = function() {
  return this.getToken(WebIDLParser.FLOAT_WEBIDL, 0);
};

FloatLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterFloatLiteral(this);
  }
};

FloatLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitFloatLiteral(this);
  }
};

FloatLiteralContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitFloatLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.FloatLiteralContext = FloatLiteralContext;

WebIDLParser.prototype.floatLiteral = function() {
  var localctx = new FloatLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 62, WebIDLParser.RULE_floatLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 381;
    _la = this._input.LA(1);
    if(
      !(
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << WebIDLParser.T__24) | (1 << WebIDLParser.T__25) | (1 << WebIDLParser.T__26))) !==
            0) ||
        _la === WebIDLParser.FLOAT_WEBIDL
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SerializerContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_serializer;
  return this;
}

SerializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SerializerContext.prototype.constructor = SerializerContext;

SerializerContext.prototype.serializerRest = function() {
  return this.getTypedRuleContext(SerializerRestContext, 0);
};

SerializerContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSerializer(this);
  }
};

SerializerContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSerializer(this);
  }
};

SerializerContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSerializer(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SerializerContext = SerializerContext;

WebIDLParser.prototype.serializer = function() {
  var localctx = new SerializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 64, WebIDLParser.RULE_serializer);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 383;
    this.match(WebIDLParser.T__27);
    this.state = 384;
    this.serializerRest();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SerializerRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_serializerRest;
  return this;
}

SerializerRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SerializerRestContext.prototype.constructor = SerializerRestContext;

SerializerRestContext.prototype.operationRest = function() {
  return this.getTypedRuleContext(OperationRestContext, 0);
};

SerializerRestContext.prototype.serializationPattern = function() {
  return this.getTypedRuleContext(SerializationPatternContext, 0);
};

SerializerRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSerializerRest(this);
  }
};

SerializerRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSerializerRest(this);
  }
};

SerializerRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSerializerRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SerializerRestContext = SerializerRestContext;

WebIDLParser.prototype.serializerRest = function() {
  var localctx = new SerializerRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 66, WebIDLParser.RULE_serializerRest);
  try {
    this.state = 392;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__16:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.operationRest();
        break;
      case WebIDLParser.T__9:
        this.enterOuterAlt(localctx, 2);
        this.state = 387;
        this.match(WebIDLParser.T__9);
        this.state = 388;
        this.serializationPattern();
        this.state = 389;
        this.match(WebIDLParser.T__4);
        break;
      case WebIDLParser.T__4:
        this.enterOuterAlt(localctx, 3);
        this.state = 391;
        this.match(WebIDLParser.T__4);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SerializationPatternContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_serializationPattern;
  return this;
}

SerializationPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SerializationPatternContext.prototype.constructor = SerializationPatternContext;

SerializationPatternContext.prototype.serializationPatternMap = function() {
  return this.getTypedRuleContext(SerializationPatternMapContext, 0);
};

SerializationPatternContext.prototype.serializationPatternList = function() {
  return this.getTypedRuleContext(SerializationPatternListContext, 0);
};

SerializationPatternContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

SerializationPatternContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSerializationPattern(this);
  }
};

SerializationPatternContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSerializationPattern(this);
  }
};

SerializationPatternContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSerializationPattern(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SerializationPatternContext = SerializationPatternContext;

WebIDLParser.prototype.serializationPattern = function() {
  var localctx = new SerializationPatternContext(this, this._ctx, this.state);
  this.enterRule(localctx, 68, WebIDLParser.RULE_serializationPattern);
  try {
    this.state = 403;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__2:
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this.match(WebIDLParser.T__2);
        this.state = 395;
        this.serializationPatternMap();
        this.state = 396;
        this.match(WebIDLParser.T__3);
        break;
      case WebIDLParser.T__10:
        this.enterOuterAlt(localctx, 2);
        this.state = 398;
        this.match(WebIDLParser.T__10);
        this.state = 399;
        this.serializationPatternList();
        this.state = 400;
        this.match(WebIDLParser.T__11);
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 3);
        this.state = 402;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SerializationPatternMapContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_serializationPatternMap;
  return this;
}

SerializationPatternMapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SerializationPatternMapContext.prototype.constructor = SerializationPatternMapContext;

SerializationPatternMapContext.prototype.identifiers = function() {
  return this.getTypedRuleContext(IdentifiersContext, 0);
};

SerializationPatternMapContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

SerializationPatternMapContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSerializationPatternMap(this);
  }
};

SerializationPatternMapContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSerializationPatternMap(this);
  }
};

SerializationPatternMapContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSerializationPatternMap(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SerializationPatternMapContext = SerializationPatternMapContext;

WebIDLParser.prototype.serializationPatternMap = function() {
  var localctx = new SerializationPatternMapContext(this, this._ctx, this.state);
  this.enterRule(localctx, 70, WebIDLParser.RULE_serializationPatternMap);
  try {
    this.state = 411;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__28:
        this.enterOuterAlt(localctx, 1);
        this.state = 405;
        this.match(WebIDLParser.T__28);
        break;
      case WebIDLParser.T__29:
        this.enterOuterAlt(localctx, 2);
        this.state = 406;
        this.match(WebIDLParser.T__29);
        this.state = 407;
        this.identifiers();
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 3);
        this.state = 408;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        this.state = 409;
        this.identifiers();
        break;
      case WebIDLParser.T__3:
        this.enterOuterAlt(localctx, 4);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SerializationPatternListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_serializationPatternList;
  return this;
}

SerializationPatternListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SerializationPatternListContext.prototype.constructor = SerializationPatternListContext;

SerializationPatternListContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

SerializationPatternListContext.prototype.identifiers = function() {
  return this.getTypedRuleContext(IdentifiersContext, 0);
};

SerializationPatternListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSerializationPatternList(this);
  }
};

SerializationPatternListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSerializationPatternList(this);
  }
};

SerializationPatternListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSerializationPatternList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SerializationPatternListContext = SerializationPatternListContext;

WebIDLParser.prototype.serializationPatternList = function() {
  var localctx = new SerializationPatternListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 72, WebIDLParser.RULE_serializationPatternList);
  try {
    this.state = 417;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__28:
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this.match(WebIDLParser.T__28);
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 414;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        this.state = 415;
        this.identifiers();
        break;
      case WebIDLParser.T__11:
        this.enterOuterAlt(localctx, 3);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function StringifierContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_stringifier;
  return this;
}

StringifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringifierContext.prototype.constructor = StringifierContext;

StringifierContext.prototype.stringifierRest = function() {
  return this.getTypedRuleContext(StringifierRestContext, 0);
};

StringifierContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterStringifier(this);
  }
};

StringifierContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitStringifier(this);
  }
};

StringifierContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitStringifier(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.StringifierContext = StringifierContext;

WebIDLParser.prototype.stringifier = function() {
  var localctx = new StringifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 74, WebIDLParser.RULE_stringifier);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 419;
    this.match(WebIDLParser.T__30);
    this.state = 420;
    this.stringifierRest();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function StringifierRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_stringifierRest;
  return this;
}

StringifierRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringifierRestContext.prototype.constructor = StringifierRestContext;

StringifierRestContext.prototype.readOnly = function() {
  return this.getTypedRuleContext(ReadOnlyContext, 0);
};

StringifierRestContext.prototype.attributeRest = function() {
  return this.getTypedRuleContext(AttributeRestContext, 0);
};

StringifierRestContext.prototype.returnType = function() {
  return this.getTypedRuleContext(ReturnTypeContext, 0);
};

StringifierRestContext.prototype.operationRest = function() {
  return this.getTypedRuleContext(OperationRestContext, 0);
};

StringifierRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterStringifierRest(this);
  }
};

StringifierRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitStringifierRest(this);
  }
};

StringifierRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitStringifierRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.StringifierRestContext = StringifierRestContext;

WebIDLParser.prototype.stringifierRest = function() {
  var localctx = new StringifierRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 76, WebIDLParser.RULE_stringifierRest);
  try {
    this.state = 429;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__32:
      case WebIDLParser.T__33:
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this.readOnly();
        this.state = 423;
        this.attributeRest();
        break;
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 425;
        this.returnType();
        this.state = 426;
        this.operationRest();
        break;
      case WebIDLParser.T__4:
        this.enterOuterAlt(localctx, 3);
        this.state = 428;
        this.match(WebIDLParser.T__4);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function StaticMemberContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_staticMember;
  return this;
}

StaticMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticMemberContext.prototype.constructor = StaticMemberContext;

StaticMemberContext.prototype.staticMemberRest = function() {
  return this.getTypedRuleContext(StaticMemberRestContext, 0);
};

StaticMemberContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterStaticMember(this);
  }
};

StaticMemberContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitStaticMember(this);
  }
};

StaticMemberContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitStaticMember(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.StaticMemberContext = StaticMemberContext;

WebIDLParser.prototype.staticMember = function() {
  var localctx = new StaticMemberContext(this, this._ctx, this.state);
  this.enterRule(localctx, 78, WebIDLParser.RULE_staticMember);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 431;
    this.match(WebIDLParser.T__31);
    this.state = 432;
    this.staticMemberRest();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function StaticMemberRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_staticMemberRest;
  return this;
}

StaticMemberRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticMemberRestContext.prototype.constructor = StaticMemberRestContext;

StaticMemberRestContext.prototype.readOnly = function() {
  return this.getTypedRuleContext(ReadOnlyContext, 0);
};

StaticMemberRestContext.prototype.attributeRest = function() {
  return this.getTypedRuleContext(AttributeRestContext, 0);
};

StaticMemberRestContext.prototype.returnType = function() {
  return this.getTypedRuleContext(ReturnTypeContext, 0);
};

StaticMemberRestContext.prototype.operationRest = function() {
  return this.getTypedRuleContext(OperationRestContext, 0);
};

StaticMemberRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterStaticMemberRest(this);
  }
};

StaticMemberRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitStaticMemberRest(this);
  }
};

StaticMemberRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitStaticMemberRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.StaticMemberRestContext = StaticMemberRestContext;

WebIDLParser.prototype.staticMemberRest = function() {
  var localctx = new StaticMemberRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 80, WebIDLParser.RULE_staticMemberRest);
  try {
    this.state = 440;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__32:
      case WebIDLParser.T__33:
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        this.readOnly();
        this.state = 435;
        this.attributeRest();
        break;
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 437;
        this.returnType();
        this.state = 438;
        this.operationRest();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReadonlyMemberContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_readonlyMember;
  return this;
}

ReadonlyMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReadonlyMemberContext.prototype.constructor = ReadonlyMemberContext;

ReadonlyMemberContext.prototype.readonlyMemberRest = function() {
  return this.getTypedRuleContext(ReadonlyMemberRestContext, 0);
};

ReadonlyMemberContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterReadonlyMember(this);
  }
};

ReadonlyMemberContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitReadonlyMember(this);
  }
};

ReadonlyMemberContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitReadonlyMember(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ReadonlyMemberContext = ReadonlyMemberContext;

WebIDLParser.prototype.readonlyMember = function() {
  var localctx = new ReadonlyMemberContext(this, this._ctx, this.state);
  this.enterRule(localctx, 82, WebIDLParser.RULE_readonlyMember);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 442;
    this.match(WebIDLParser.T__32);
    this.state = 443;
    this.readonlyMemberRest();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReadonlyMemberRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_readonlyMemberRest;
  return this;
}

ReadonlyMemberRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReadonlyMemberRestContext.prototype.constructor = ReadonlyMemberRestContext;

ReadonlyMemberRestContext.prototype.attributeRest = function() {
  return this.getTypedRuleContext(AttributeRestContext, 0);
};

ReadonlyMemberRestContext.prototype.readWriteMaplike = function() {
  return this.getTypedRuleContext(ReadWriteMaplikeContext, 0);
};

ReadonlyMemberRestContext.prototype.readWriteSetlike = function() {
  return this.getTypedRuleContext(ReadWriteSetlikeContext, 0);
};

ReadonlyMemberRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterReadonlyMemberRest(this);
  }
};

ReadonlyMemberRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitReadonlyMemberRest(this);
  }
};

ReadonlyMemberRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitReadonlyMemberRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ReadonlyMemberRestContext = ReadonlyMemberRestContext;

WebIDLParser.prototype.readonlyMemberRest = function() {
  var localctx = new ReadonlyMemberRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 84, WebIDLParser.RULE_readonlyMemberRest);
  try {
    this.state = 448;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__33:
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.attributeRest();
        break;
      case WebIDLParser.T__42:
        this.enterOuterAlt(localctx, 2);
        this.state = 446;
        this.readWriteMaplike();
        break;
      case WebIDLParser.T__43:
        this.enterOuterAlt(localctx, 3);
        this.state = 447;
        this.readWriteSetlike();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReadWriteAttributeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_readWriteAttribute;
  return this;
}

ReadWriteAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReadWriteAttributeContext.prototype.constructor = ReadWriteAttributeContext;

ReadWriteAttributeContext.prototype.readOnly = function() {
  return this.getTypedRuleContext(ReadOnlyContext, 0);
};

ReadWriteAttributeContext.prototype.attributeRest = function() {
  return this.getTypedRuleContext(AttributeRestContext, 0);
};

ReadWriteAttributeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterReadWriteAttribute(this);
  }
};

ReadWriteAttributeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitReadWriteAttribute(this);
  }
};

ReadWriteAttributeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitReadWriteAttribute(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ReadWriteAttributeContext = ReadWriteAttributeContext;

WebIDLParser.prototype.readWriteAttribute = function() {
  var localctx = new ReadWriteAttributeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 86, WebIDLParser.RULE_readWriteAttribute);
  try {
    this.state = 455;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__29:
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        this.match(WebIDLParser.T__29);
        this.state = 451;
        this.readOnly();
        this.state = 452;
        this.attributeRest();
        break;
      case WebIDLParser.T__33:
        this.enterOuterAlt(localctx, 2);
        this.state = 454;
        this.attributeRest();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AttributeRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_attributeRest;
  return this;
}

AttributeRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeRestContext.prototype.constructor = AttributeRestContext;

AttributeRestContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

AttributeRestContext.prototype.attributeName = function() {
  return this.getTypedRuleContext(AttributeNameContext, 0);
};

AttributeRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterAttributeRest(this);
  }
};

AttributeRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitAttributeRest(this);
  }
};

AttributeRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitAttributeRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.AttributeRestContext = AttributeRestContext;

WebIDLParser.prototype.attributeRest = function() {
  var localctx = new AttributeRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 88, WebIDLParser.RULE_attributeRest);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 457;
    this.match(WebIDLParser.T__33);
    this.state = 458;
    this.type();
    this.state = 459;
    this.attributeName();
    this.state = 460;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AttributeNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_attributeName;
  return this;
}

AttributeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeNameContext.prototype.constructor = AttributeNameContext;

AttributeNameContext.prototype.attributeNameKeyword = function() {
  return this.getTypedRuleContext(AttributeNameKeywordContext, 0);
};

AttributeNameContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

AttributeNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterAttributeName(this);
  }
};

AttributeNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitAttributeName(this);
  }
};

AttributeNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitAttributeName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.AttributeNameContext = AttributeNameContext;

WebIDLParser.prototype.attributeName = function() {
  var localctx = new AttributeNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 90, WebIDLParser.RULE_attributeName);
  try {
    this.state = 464;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__8:
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        this.attributeNameKeyword();
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 463;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AttributeNameKeywordContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_attributeNameKeyword;
  return this;
}

AttributeNameKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeNameKeywordContext.prototype.constructor = AttributeNameKeywordContext;

AttributeNameKeywordContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterAttributeNameKeyword(this);
  }
};

AttributeNameKeywordContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitAttributeNameKeyword(this);
  }
};

AttributeNameKeywordContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitAttributeNameKeyword(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.AttributeNameKeywordContext = AttributeNameKeywordContext;

WebIDLParser.prototype.attributeNameKeyword = function() {
  var localctx = new AttributeNameKeywordContext(this, this._ctx, this.state);
  this.enterRule(localctx, 92, WebIDLParser.RULE_attributeNameKeyword);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 466;
    this.match(WebIDLParser.T__8);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function InheritContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_inherit;
  return this;
}

InheritContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritContext.prototype.constructor = InheritContext;

InheritContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterInherit(this);
  }
};

InheritContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitInherit(this);
  }
};

InheritContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitInherit(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.InheritContext = InheritContext;

WebIDLParser.prototype.inherit = function() {
  var localctx = new InheritContext(this, this._ctx, this.state);
  this.enterRule(localctx, 94, WebIDLParser.RULE_inherit);
  try {
    this.state = 470;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__29:
        this.enterOuterAlt(localctx, 1);
        this.state = 468;
        this.match(WebIDLParser.T__29);
        break;
      case WebIDLParser.EOF:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReadOnlyContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_readOnly;
  return this;
}

ReadOnlyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReadOnlyContext.prototype.constructor = ReadOnlyContext;

ReadOnlyContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterReadOnly(this);
  }
};

ReadOnlyContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitReadOnly(this);
  }
};

ReadOnlyContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitReadOnly(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ReadOnlyContext = ReadOnlyContext;

WebIDLParser.prototype.readOnly = function() {
  var localctx = new ReadOnlyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 96, WebIDLParser.RULE_readOnly);
  try {
    this.state = 474;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__32:
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.match(WebIDLParser.T__32);
        break;
      case WebIDLParser.T__33:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OperationContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_operation;
  return this;
}

OperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperationContext.prototype.constructor = OperationContext;

OperationContext.prototype.returnType = function() {
  return this.getTypedRuleContext(ReturnTypeContext, 0);
};

OperationContext.prototype.operationRest = function() {
  return this.getTypedRuleContext(OperationRestContext, 0);
};

OperationContext.prototype.specialOperation = function() {
  return this.getTypedRuleContext(SpecialOperationContext, 0);
};

OperationContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOperation(this);
  }
};

OperationContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOperation(this);
  }
};

OperationContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOperation(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OperationContext = OperationContext;

WebIDLParser.prototype.operation = function() {
  var localctx = new OperationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 98, WebIDLParser.RULE_operation);
  try {
    this.state = 480;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.returnType();
        this.state = 477;
        this.operationRest();
        break;
      case WebIDLParser.T__28:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
        this.enterOuterAlt(localctx, 2);
        this.state = 479;
        this.specialOperation();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SpecialOperationContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_specialOperation;
  return this;
}

SpecialOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialOperationContext.prototype.constructor = SpecialOperationContext;

SpecialOperationContext.prototype.special = function() {
  return this.getTypedRuleContext(SpecialContext, 0);
};

SpecialOperationContext.prototype.specials = function() {
  return this.getTypedRuleContext(SpecialsContext, 0);
};

SpecialOperationContext.prototype.returnType = function() {
  return this.getTypedRuleContext(ReturnTypeContext, 0);
};

SpecialOperationContext.prototype.operationRest = function() {
  return this.getTypedRuleContext(OperationRestContext, 0);
};

SpecialOperationContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSpecialOperation(this);
  }
};

SpecialOperationContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSpecialOperation(this);
  }
};

SpecialOperationContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSpecialOperation(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SpecialOperationContext = SpecialOperationContext;

WebIDLParser.prototype.specialOperation = function() {
  var localctx = new SpecialOperationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 100, WebIDLParser.RULE_specialOperation);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 482;
    this.special();
    this.state = 483;
    this.specials();
    this.state = 484;
    this.returnType();
    this.state = 485;
    this.operationRest();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SpecialsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_specials;
  return this;
}

SpecialsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialsContext.prototype.constructor = SpecialsContext;

SpecialsContext.prototype.special = function() {
  return this.getTypedRuleContext(SpecialContext, 0);
};

SpecialsContext.prototype.specials = function() {
  return this.getTypedRuleContext(SpecialsContext, 0);
};

SpecialsContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSpecials(this);
  }
};

SpecialsContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSpecials(this);
  }
};

SpecialsContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSpecials(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SpecialsContext = SpecialsContext;

WebIDLParser.prototype.specials = function() {
  var localctx = new SpecialsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 102, WebIDLParser.RULE_specials);
  try {
    this.state = 491;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__28:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.special();
        this.state = 488;
        this.specials();
        break;
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SpecialContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_special;
  return this;
}

SpecialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialContext.prototype.constructor = SpecialContext;

SpecialContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSpecial(this);
  }
};

SpecialContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSpecial(this);
  }
};

SpecialContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSpecial(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SpecialContext = SpecialContext;

WebIDLParser.prototype.special = function() {
  var localctx = new SpecialContext(this, this._ctx, this.state);
  this.enterRule(localctx, 104, WebIDLParser.RULE_special);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 493;
    _la = this._input.LA(1);
    if(
      !(
        ((_la - 29) & ~0x1f) == 0 &&
        ((1 << (_la - 29)) &
          ((1 << (WebIDLParser.T__28 - 29)) |
            (1 << (WebIDLParser.T__34 - 29)) |
            (1 << (WebIDLParser.T__35 - 29)) |
            (1 << (WebIDLParser.T__36 - 29)))) !==
          0
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OperationRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_operationRest;
  return this;
}

OperationRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperationRestContext.prototype.constructor = OperationRestContext;

OperationRestContext.prototype.optionalIdentifier = function() {
  return this.getTypedRuleContext(OptionalIdentifierContext, 0);
};

OperationRestContext.prototype.argumentList = function() {
  return this.getTypedRuleContext(ArgumentListContext, 0);
};

OperationRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOperationRest(this);
  }
};

OperationRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOperationRest(this);
  }
};

OperationRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOperationRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OperationRestContext = OperationRestContext;

WebIDLParser.prototype.operationRest = function() {
  var localctx = new OperationRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 106, WebIDLParser.RULE_operationRest);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 495;
    this.optionalIdentifier();
    this.state = 496;
    this.match(WebIDLParser.T__16);
    this.state = 497;
    this.argumentList();
    this.state = 498;
    this.match(WebIDLParser.T__17);
    this.state = 499;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OptionalIdentifierContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_optionalIdentifier;
  return this;
}

OptionalIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalIdentifierContext.prototype.constructor = OptionalIdentifierContext;

OptionalIdentifierContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

OptionalIdentifierContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOptionalIdentifier(this);
  }
};

OptionalIdentifierContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOptionalIdentifier(this);
  }
};

OptionalIdentifierContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOptionalIdentifier(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OptionalIdentifierContext = OptionalIdentifierContext;

WebIDLParser.prototype.optionalIdentifier = function() {
  var localctx = new OptionalIdentifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 108, WebIDLParser.RULE_optionalIdentifier);
  try {
    this.state = 503;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        break;
      case WebIDLParser.T__16:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_argumentList;
  return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.argument = function() {
  return this.getTypedRuleContext(ArgumentContext, 0);
};

ArgumentListContext.prototype.arguments = function() {
  return this.getTypedRuleContext(ArgumentsContext, 0);
};

ArgumentListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterArgumentList(this);
  }
};

ArgumentListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitArgumentList(this);
  }
};

ArgumentListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitArgumentList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ArgumentListContext = ArgumentListContext;

WebIDLParser.prototype.argumentList = function() {
  var localctx = new ArgumentListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 110, WebIDLParser.RULE_argumentList);
  try {
    this.state = 509;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__10:
      case WebIDLParser.T__16:
      case WebIDLParser.T__37:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.argument();
        this.state = 506;
        this.arguments();
        break;
      case WebIDLParser.T__17:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_arguments;
  return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.argument = function() {
  return this.getTypedRuleContext(ArgumentContext, 0);
};

ArgumentsContext.prototype.arguments = function() {
  return this.getTypedRuleContext(ArgumentsContext, 0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterArguments(this);
  }
};

ArgumentsContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitArguments(this);
  }
};

ArgumentsContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitArguments(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ArgumentsContext = ArgumentsContext;

WebIDLParser.prototype.arguments = function() {
  var localctx = new ArgumentsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 112, WebIDLParser.RULE_arguments);
  try {
    this.state = 516;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__15:
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this.match(WebIDLParser.T__15);
        this.state = 512;
        this.argument();
        this.state = 513;
        this.arguments();
        break;
      case WebIDLParser.T__17:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_argument;
  return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.extendedAttributeList = function() {
  return this.getTypedRuleContext(ExtendedAttributeListContext, 0);
};

ArgumentContext.prototype.optionalOrRequiredArgument = function() {
  return this.getTypedRuleContext(OptionalOrRequiredArgumentContext, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterArgument(this);
  }
};

ArgumentContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitArgument(this);
  }
};

ArgumentContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitArgument(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ArgumentContext = ArgumentContext;

WebIDLParser.prototype.argument = function() {
  var localctx = new ArgumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 114, WebIDLParser.RULE_argument);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 518;
    this.extendedAttributeList();
    this.state = 519;
    this.optionalOrRequiredArgument();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OptionalOrRequiredArgumentContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_optionalOrRequiredArgument;
  return this;
}

OptionalOrRequiredArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalOrRequiredArgumentContext.prototype.constructor = OptionalOrRequiredArgumentContext;

OptionalOrRequiredArgumentContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

OptionalOrRequiredArgumentContext.prototype.argumentName = function() {
  return this.getTypedRuleContext(ArgumentNameContext, 0);
};

OptionalOrRequiredArgumentContext.prototype.default_ = function() {
  return this.getTypedRuleContext(Default_Context, 0);
};

OptionalOrRequiredArgumentContext.prototype.ellipsis = function() {
  return this.getTypedRuleContext(EllipsisContext, 0);
};

OptionalOrRequiredArgumentContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOptionalOrRequiredArgument(this);
  }
};

OptionalOrRequiredArgumentContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOptionalOrRequiredArgument(this);
  }
};

OptionalOrRequiredArgumentContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOptionalOrRequiredArgument(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OptionalOrRequiredArgumentContext = OptionalOrRequiredArgumentContext;

WebIDLParser.prototype.optionalOrRequiredArgument = function() {
  var localctx = new OptionalOrRequiredArgumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 116, WebIDLParser.RULE_optionalOrRequiredArgument);
  try {
    this.state = 530;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__37:
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this.match(WebIDLParser.T__37);
        this.state = 522;
        this.type();
        this.state = 523;
        this.argumentName();
        this.state = 524;
        this.default_();
        break;
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 526;
        this.type();
        this.state = 527;
        this.ellipsis();
        this.state = 528;
        this.argumentName();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_argumentName;
  return this;
}

ArgumentNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentNameContext.prototype.constructor = ArgumentNameContext;

ArgumentNameContext.prototype.argumentNameKeyword = function() {
  return this.getTypedRuleContext(ArgumentNameKeywordContext, 0);
};

ArgumentNameContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

ArgumentNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterArgumentName(this);
  }
};

ArgumentNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitArgumentName(this);
  }
};

ArgumentNameContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitArgumentName(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ArgumentNameContext = ArgumentNameContext;

WebIDLParser.prototype.argumentName = function() {
  var localctx = new ArgumentNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 118, WebIDLParser.RULE_argumentName);
  try {
    this.state = 534;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__14:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__39:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__65:
        this.enterOuterAlt(localctx, 1);
        this.state = 532;
        this.argumentNameKeyword();
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 533;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function EllipsisContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_ellipsis;
  return this;
}

EllipsisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EllipsisContext.prototype.constructor = EllipsisContext;

EllipsisContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterEllipsis(this);
  }
};

EllipsisContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitEllipsis(this);
  }
};

EllipsisContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitEllipsis(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.EllipsisContext = EllipsisContext;

WebIDLParser.prototype.ellipsis = function() {
  var localctx = new EllipsisContext(this, this._ctx, this.state);
  this.enterRule(localctx, 120, WebIDLParser.RULE_ellipsis);
  try {
    this.state = 538;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__38:
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this.match(WebIDLParser.T__38);
        break;
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__14:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__39:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__65:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IterableContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_iterable;
  return this;
}

IterableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterableContext.prototype.constructor = IterableContext;

IterableContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

IterableContext.prototype.optionalType = function() {
  return this.getTypedRuleContext(OptionalTypeContext, 0);
};

IterableContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterIterable(this);
  }
};

IterableContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitIterable(this);
  }
};

IterableContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitIterable(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.IterableContext = IterableContext;

WebIDLParser.prototype.iterable = function() {
  var localctx = new IterableContext(this, this._ctx, this.state);
  this.enterRule(localctx, 122, WebIDLParser.RULE_iterable);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 540;
    this.match(WebIDLParser.T__39);
    this.state = 541;
    this.match(WebIDLParser.T__40);
    this.state = 542;
    this.type();
    this.state = 543;
    this.optionalType();
    this.state = 544;
    this.match(WebIDLParser.T__41);
    this.state = 545;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OptionalTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_optionalType;
  return this;
}

OptionalTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalTypeContext.prototype.constructor = OptionalTypeContext;

OptionalTypeContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

OptionalTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOptionalType(this);
  }
};

OptionalTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOptionalType(this);
  }
};

OptionalTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOptionalType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OptionalTypeContext = OptionalTypeContext;

WebIDLParser.prototype.optionalType = function() {
  var localctx = new OptionalTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 124, WebIDLParser.RULE_optionalType);
  try {
    this.state = 550;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__15:
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.match(WebIDLParser.T__15);
        this.state = 548;
        this.type();
        break;
      case WebIDLParser.T__41:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReadWriteMaplikeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_readWriteMaplike;
  return this;
}

ReadWriteMaplikeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReadWriteMaplikeContext.prototype.constructor = ReadWriteMaplikeContext;

ReadWriteMaplikeContext.prototype.maplikeRest = function() {
  return this.getTypedRuleContext(MaplikeRestContext, 0);
};

ReadWriteMaplikeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterReadWriteMaplike(this);
  }
};

ReadWriteMaplikeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitReadWriteMaplike(this);
  }
};

ReadWriteMaplikeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitReadWriteMaplike(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ReadWriteMaplikeContext = ReadWriteMaplikeContext;

WebIDLParser.prototype.readWriteMaplike = function() {
  var localctx = new ReadWriteMaplikeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 126, WebIDLParser.RULE_readWriteMaplike);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 552;
    this.maplikeRest();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReadWriteSetlikeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_readWriteSetlike;
  return this;
}

ReadWriteSetlikeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReadWriteSetlikeContext.prototype.constructor = ReadWriteSetlikeContext;

ReadWriteSetlikeContext.prototype.setlikeRest = function() {
  return this.getTypedRuleContext(SetlikeRestContext, 0);
};

ReadWriteSetlikeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterReadWriteSetlike(this);
  }
};

ReadWriteSetlikeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitReadWriteSetlike(this);
  }
};

ReadWriteSetlikeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitReadWriteSetlike(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ReadWriteSetlikeContext = ReadWriteSetlikeContext;

WebIDLParser.prototype.readWriteSetlike = function() {
  var localctx = new ReadWriteSetlikeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 128, WebIDLParser.RULE_readWriteSetlike);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 554;
    this.setlikeRest();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function MaplikeRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_maplikeRest;
  return this;
}

MaplikeRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaplikeRestContext.prototype.constructor = MaplikeRestContext;

MaplikeRestContext.prototype.type = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(TypeContext);
  } else {
    return this.getTypedRuleContext(TypeContext, i);
  }
};

MaplikeRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterMaplikeRest(this);
  }
};

MaplikeRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitMaplikeRest(this);
  }
};

MaplikeRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitMaplikeRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.MaplikeRestContext = MaplikeRestContext;

WebIDLParser.prototype.maplikeRest = function() {
  var localctx = new MaplikeRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 130, WebIDLParser.RULE_maplikeRest);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 556;
    this.match(WebIDLParser.T__42);
    this.state = 557;
    this.match(WebIDLParser.T__40);
    this.state = 558;
    this.type();
    this.state = 559;
    this.match(WebIDLParser.T__15);
    this.state = 560;
    this.type();
    this.state = 561;
    this.match(WebIDLParser.T__41);
    this.state = 562;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SetlikeRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_setlikeRest;
  return this;
}

SetlikeRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetlikeRestContext.prototype.constructor = SetlikeRestContext;

SetlikeRestContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

SetlikeRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSetlikeRest(this);
  }
};

SetlikeRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSetlikeRest(this);
  }
};

SetlikeRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSetlikeRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SetlikeRestContext = SetlikeRestContext;

WebIDLParser.prototype.setlikeRest = function() {
  var localctx = new SetlikeRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 132, WebIDLParser.RULE_setlikeRest);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 564;
    this.match(WebIDLParser.T__43);
    this.state = 565;
    this.match(WebIDLParser.T__40);
    this.state = 566;
    this.type();
    this.state = 567;
    this.match(WebIDLParser.T__41);
    this.state = 568;
    this.match(WebIDLParser.T__4);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeList;
  return this;
}

ExtendedAttributeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeListContext.prototype.constructor = ExtendedAttributeListContext;

ExtendedAttributeListContext.prototype.extendedAttribute = function() {
  return this.getTypedRuleContext(ExtendedAttributeContext, 0);
};

ExtendedAttributeListContext.prototype.extendedAttributes = function() {
  return this.getTypedRuleContext(ExtendedAttributesContext, 0);
};

ExtendedAttributeListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeList(this);
  }
};

ExtendedAttributeListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeList(this);
  }
};

ExtendedAttributeListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeListContext = ExtendedAttributeListContext;

WebIDLParser.prototype.extendedAttributeList = function() {
  var localctx = new ExtendedAttributeListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 134, WebIDLParser.RULE_extendedAttributeList);
  try {
    this.state = 576;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__10:
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.match(WebIDLParser.T__10);
        this.state = 571;
        this.extendedAttribute();
        this.state = 572;
        this.extendedAttributes();
        this.state = 573;
        this.match(WebIDLParser.T__11);
        break;
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__5:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__14:
      case WebIDLParser.T__16:
      case WebIDLParser.T__18:
      case WebIDLParser.T__20:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__32:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__37:
      case WebIDLParser.T__39:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributesContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributes;
  return this;
}

ExtendedAttributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributesContext.prototype.constructor = ExtendedAttributesContext;

ExtendedAttributesContext.prototype.extendedAttribute = function() {
  return this.getTypedRuleContext(ExtendedAttributeContext, 0);
};

ExtendedAttributesContext.prototype.extendedAttributes = function() {
  return this.getTypedRuleContext(ExtendedAttributesContext, 0);
};

ExtendedAttributesContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributes(this);
  }
};

ExtendedAttributesContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributes(this);
  }
};

ExtendedAttributesContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributes(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributesContext = ExtendedAttributesContext;

WebIDLParser.prototype.extendedAttributes = function() {
  var localctx = new ExtendedAttributesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 136, WebIDLParser.RULE_extendedAttributes);
  try {
    this.state = 583;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__15:
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.match(WebIDLParser.T__15);
        this.state = 579;
        this.extendedAttribute();
        this.state = 580;
        this.extendedAttributes();
        break;
      case WebIDLParser.T__11:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttribute;
  return this;
}

ExtendedAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeContext.prototype.constructor = ExtendedAttributeContext;

ExtendedAttributeContext.prototype.extendedAttributeInner = function() {
  return this.getTypedRuleContext(ExtendedAttributeInnerContext, 0);
};

ExtendedAttributeContext.prototype.extendedAttributeRest = function() {
  return this.getTypedRuleContext(ExtendedAttributeRestContext, 0);
};

ExtendedAttributeContext.prototype.other = function() {
  return this.getTypedRuleContext(OtherContext, 0);
};

ExtendedAttributeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttribute(this);
  }
};

ExtendedAttributeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttribute(this);
  }
};

ExtendedAttributeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttribute(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeContext = ExtendedAttributeContext;

WebIDLParser.prototype.extendedAttribute = function() {
  var localctx = new ExtendedAttributeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 138, WebIDLParser.RULE_extendedAttribute);
  try {
    this.state = 603;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__16:
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this.match(WebIDLParser.T__16);
        this.state = 586;
        this.extendedAttributeInner();
        this.state = 587;
        this.match(WebIDLParser.T__17);
        this.state = 588;
        this.extendedAttributeRest();
        break;
      case WebIDLParser.T__10:
        this.enterOuterAlt(localctx, 2);
        this.state = 590;
        this.match(WebIDLParser.T__10);
        this.state = 591;
        this.extendedAttributeInner();
        this.state = 592;
        this.match(WebIDLParser.T__11);
        this.state = 593;
        this.extendedAttributeRest();
        break;
      case WebIDLParser.T__2:
        this.enterOuterAlt(localctx, 3);
        this.state = 595;
        this.match(WebIDLParser.T__2);
        this.state = 596;
        this.extendedAttributeInner();
        this.state = 597;
        this.match(WebIDLParser.T__3);
        this.state = 598;
        this.extendedAttributeRest();
        break;
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__4:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__9:
      case WebIDLParser.T__12:
      case WebIDLParser.T__14:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__21:
      case WebIDLParser.T__22:
      case WebIDLParser.T__23:
      case WebIDLParser.T__24:
      case WebIDLParser.T__25:
      case WebIDLParser.T__26:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__37:
      case WebIDLParser.T__38:
      case WebIDLParser.T__39:
      case WebIDLParser.T__40:
      case WebIDLParser.T__41:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__44:
      case WebIDLParser.T__45:
      case WebIDLParser.T__46:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__60:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.INTEGER_WEBIDL:
      case WebIDLParser.FLOAT_WEBIDL:
      case WebIDLParser.IDENTIFIER_WEBIDL:
      case WebIDLParser.STRING_WEBIDL:
      case WebIDLParser.OTHER_WEBIDL:
        this.enterOuterAlt(localctx, 4);
        this.state = 600;
        this.other();
        this.state = 601;
        this.extendedAttributeRest();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeRestContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeRest;
  return this;
}

ExtendedAttributeRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeRestContext.prototype.constructor = ExtendedAttributeRestContext;

ExtendedAttributeRestContext.prototype.extendedAttribute = function() {
  return this.getTypedRuleContext(ExtendedAttributeContext, 0);
};

ExtendedAttributeRestContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeRest(this);
  }
};

ExtendedAttributeRestContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeRest(this);
  }
};

ExtendedAttributeRestContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeRest(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeRestContext = ExtendedAttributeRestContext;

WebIDLParser.prototype.extendedAttributeRest = function() {
  var localctx = new ExtendedAttributeRestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 140, WebIDLParser.RULE_extendedAttributeRest);
  try {
    this.state = 607;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__2:
      case WebIDLParser.T__4:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__9:
      case WebIDLParser.T__10:
      case WebIDLParser.T__12:
      case WebIDLParser.T__14:
      case WebIDLParser.T__16:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__21:
      case WebIDLParser.T__22:
      case WebIDLParser.T__23:
      case WebIDLParser.T__24:
      case WebIDLParser.T__25:
      case WebIDLParser.T__26:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__37:
      case WebIDLParser.T__38:
      case WebIDLParser.T__39:
      case WebIDLParser.T__40:
      case WebIDLParser.T__41:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__44:
      case WebIDLParser.T__45:
      case WebIDLParser.T__46:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__60:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.INTEGER_WEBIDL:
      case WebIDLParser.FLOAT_WEBIDL:
      case WebIDLParser.IDENTIFIER_WEBIDL:
      case WebIDLParser.STRING_WEBIDL:
      case WebIDLParser.OTHER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 605;
        this.extendedAttribute();
        break;
      case WebIDLParser.T__11:
      case WebIDLParser.T__15:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeInnerContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeInner;
  return this;
}

ExtendedAttributeInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeInnerContext.prototype.constructor = ExtendedAttributeInnerContext;

ExtendedAttributeInnerContext.prototype.extendedAttributeInner = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ExtendedAttributeInnerContext);
  } else {
    return this.getTypedRuleContext(ExtendedAttributeInnerContext, i);
  }
};

ExtendedAttributeInnerContext.prototype.otherOrComma = function() {
  return this.getTypedRuleContext(OtherOrCommaContext, 0);
};

ExtendedAttributeInnerContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeInner(this);
  }
};

ExtendedAttributeInnerContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeInner(this);
  }
};

ExtendedAttributeInnerContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeInner(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeInnerContext = ExtendedAttributeInnerContext;

WebIDLParser.prototype.extendedAttributeInner = function() {
  var localctx = new ExtendedAttributeInnerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 142, WebIDLParser.RULE_extendedAttributeInner);
  try {
    this.state = 628;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__16:
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.match(WebIDLParser.T__16);
        this.state = 610;
        this.extendedAttributeInner();
        this.state = 611;
        this.match(WebIDLParser.T__17);
        this.state = 612;
        this.extendedAttributeInner();
        break;
      case WebIDLParser.T__10:
        this.enterOuterAlt(localctx, 2);
        this.state = 614;
        this.match(WebIDLParser.T__10);
        this.state = 615;
        this.extendedAttributeInner();
        this.state = 616;
        this.match(WebIDLParser.T__11);
        this.state = 617;
        this.extendedAttributeInner();
        break;
      case WebIDLParser.T__2:
        this.enterOuterAlt(localctx, 3);
        this.state = 619;
        this.match(WebIDLParser.T__2);
        this.state = 620;
        this.extendedAttributeInner();
        this.state = 621;
        this.match(WebIDLParser.T__3);
        this.state = 622;
        this.extendedAttributeInner();
        break;
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__4:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__9:
      case WebIDLParser.T__12:
      case WebIDLParser.T__14:
      case WebIDLParser.T__15:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__21:
      case WebIDLParser.T__22:
      case WebIDLParser.T__23:
      case WebIDLParser.T__24:
      case WebIDLParser.T__25:
      case WebIDLParser.T__26:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__37:
      case WebIDLParser.T__38:
      case WebIDLParser.T__39:
      case WebIDLParser.T__40:
      case WebIDLParser.T__41:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__44:
      case WebIDLParser.T__45:
      case WebIDLParser.T__46:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__60:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.INTEGER_WEBIDL:
      case WebIDLParser.FLOAT_WEBIDL:
      case WebIDLParser.IDENTIFIER_WEBIDL:
      case WebIDLParser.STRING_WEBIDL:
      case WebIDLParser.OTHER_WEBIDL:
        this.enterOuterAlt(localctx, 4);
        this.state = 624;
        this.otherOrComma();
        this.state = 625;
        this.extendedAttributeInner();
        break;
      case WebIDLParser.T__3:
      case WebIDLParser.T__11:
      case WebIDLParser.T__17:
        this.enterOuterAlt(localctx, 5);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OtherContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_other;
  return this;
}

OtherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OtherContext.prototype.constructor = OtherContext;

OtherContext.prototype.INTEGER_WEBIDL = function() {
  return this.getToken(WebIDLParser.INTEGER_WEBIDL, 0);
};

OtherContext.prototype.FLOAT_WEBIDL = function() {
  return this.getToken(WebIDLParser.FLOAT_WEBIDL, 0);
};

OtherContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

OtherContext.prototype.STRING_WEBIDL = function() {
  return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
};

OtherContext.prototype.OTHER_WEBIDL = function() {
  return this.getToken(WebIDLParser.OTHER_WEBIDL, 0);
};

OtherContext.prototype.argumentNameKeyword = function() {
  return this.getTypedRuleContext(ArgumentNameKeywordContext, 0);
};

OtherContext.prototype.bufferRelatedType = function() {
  return this.getTypedRuleContext(BufferRelatedTypeContext, 0);
};

OtherContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOther(this);
  }
};

OtherContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOther(this);
  }
};

OtherContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOther(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OtherContext = OtherContext;

WebIDLParser.prototype.other = function() {
  var localctx = new OtherContext(this, this._ctx, this.state);
  this.enterRule(localctx, 144, WebIDLParser.RULE_other);
  try {
    this.state = 671;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.INTEGER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.match(WebIDLParser.INTEGER_WEBIDL);
        break;
      case WebIDLParser.FLOAT_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 631;
        this.match(WebIDLParser.FLOAT_WEBIDL);
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 3);
        this.state = 632;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        break;
      case WebIDLParser.STRING_WEBIDL:
        this.enterOuterAlt(localctx, 4);
        this.state = 633;
        this.match(WebIDLParser.STRING_WEBIDL);
        break;
      case WebIDLParser.OTHER_WEBIDL:
        this.enterOuterAlt(localctx, 5);
        this.state = 634;
        this.match(WebIDLParser.OTHER_WEBIDL);
        break;
      case WebIDLParser.T__44:
        this.enterOuterAlt(localctx, 6);
        this.state = 635;
        this.match(WebIDLParser.T__44);
        break;
      case WebIDLParser.T__24:
        this.enterOuterAlt(localctx, 7);
        this.state = 636;
        this.match(WebIDLParser.T__24);
        break;
      case WebIDLParser.T__45:
        this.enterOuterAlt(localctx, 8);
        this.state = 637;
        this.match(WebIDLParser.T__45);
        break;
      case WebIDLParser.T__38:
        this.enterOuterAlt(localctx, 9);
        this.state = 638;
        this.match(WebIDLParser.T__38);
        break;
      case WebIDLParser.T__12:
        this.enterOuterAlt(localctx, 10);
        this.state = 639;
        this.match(WebIDLParser.T__12);
        break;
      case WebIDLParser.T__4:
        this.enterOuterAlt(localctx, 11);
        this.state = 640;
        this.match(WebIDLParser.T__4);
        break;
      case WebIDLParser.T__40:
        this.enterOuterAlt(localctx, 12);
        this.state = 641;
        this.match(WebIDLParser.T__40);
        break;
      case WebIDLParser.T__9:
        this.enterOuterAlt(localctx, 13);
        this.state = 642;
        this.match(WebIDLParser.T__9);
        break;
      case WebIDLParser.T__41:
        this.enterOuterAlt(localctx, 14);
        this.state = 643;
        this.match(WebIDLParser.T__41);
        break;
      case WebIDLParser.T__46:
        this.enterOuterAlt(localctx, 15);
        this.state = 644;
        this.match(WebIDLParser.T__46);
        break;
      case WebIDLParser.T__47:
        this.enterOuterAlt(localctx, 16);
        this.state = 645;
        this.match(WebIDLParser.T__47);
        break;
      case WebIDLParser.T__48:
        this.enterOuterAlt(localctx, 17);
        this.state = 646;
        this.match(WebIDLParser.T__48);
        break;
      case WebIDLParser.T__49:
        this.enterOuterAlt(localctx, 18);
        this.state = 647;
        this.match(WebIDLParser.T__49);
        break;
      case WebIDLParser.T__25:
        this.enterOuterAlt(localctx, 19);
        this.state = 648;
        this.match(WebIDLParser.T__25);
        break;
      case WebIDLParser.T__26:
        this.enterOuterAlt(localctx, 20);
        this.state = 649;
        this.match(WebIDLParser.T__26);
        break;
      case WebIDLParser.T__50:
        this.enterOuterAlt(localctx, 21);
        this.state = 650;
        this.match(WebIDLParser.T__50);
        break;
      case WebIDLParser.T__51:
        this.enterOuterAlt(localctx, 22);
        this.state = 651;
        this.match(WebIDLParser.T__51);
        break;
      case WebIDLParser.T__52:
        this.enterOuterAlt(localctx, 23);
        this.state = 652;
        this.match(WebIDLParser.T__52);
        break;
      case WebIDLParser.T__53:
        this.enterOuterAlt(localctx, 24);
        this.state = 653;
        this.match(WebIDLParser.T__53);
        break;
      case WebIDLParser.T__54:
        this.enterOuterAlt(localctx, 25);
        this.state = 654;
        this.match(WebIDLParser.T__54);
        break;
      case WebIDLParser.T__55:
        this.enterOuterAlt(localctx, 26);
        this.state = 655;
        this.match(WebIDLParser.T__55);
        break;
      case WebIDLParser.T__23:
        this.enterOuterAlt(localctx, 27);
        this.state = 656;
        this.match(WebIDLParser.T__23);
        break;
      case WebIDLParser.T__56:
        this.enterOuterAlt(localctx, 28);
        this.state = 657;
        this.match(WebIDLParser.T__56);
        break;
      case WebIDLParser.T__57:
        this.enterOuterAlt(localctx, 29);
        this.state = 658;
        this.match(WebIDLParser.T__57);
        break;
      case WebIDLParser.T__21:
        this.enterOuterAlt(localctx, 30);
        this.state = 659;
        this.match(WebIDLParser.T__21);
        break;
      case WebIDLParser.T__58:
        this.enterOuterAlt(localctx, 31);
        this.state = 660;
        this.match(WebIDLParser.T__58);
        break;
      case WebIDLParser.T__59:
        this.enterOuterAlt(localctx, 32);
        this.state = 661;
        this.match(WebIDLParser.T__59);
        break;
      case WebIDLParser.T__60:
        this.enterOuterAlt(localctx, 33);
        this.state = 662;
        this.match(WebIDLParser.T__60);
        break;
      case WebIDLParser.T__37:
        this.enterOuterAlt(localctx, 34);
        this.state = 663;
        this.match(WebIDLParser.T__37);
        break;
      case WebIDLParser.T__61:
        this.enterOuterAlt(localctx, 35);
        this.state = 664;
        this.match(WebIDLParser.T__61);
        break;
      case WebIDLParser.T__62:
        this.enterOuterAlt(localctx, 36);
        this.state = 665;
        this.match(WebIDLParser.T__62);
        break;
      case WebIDLParser.T__22:
        this.enterOuterAlt(localctx, 37);
        this.state = 666;
        this.match(WebIDLParser.T__22);
        break;
      case WebIDLParser.T__63:
        this.enterOuterAlt(localctx, 38);
        this.state = 667;
        this.match(WebIDLParser.T__63);
        break;
      case WebIDLParser.T__64:
        this.enterOuterAlt(localctx, 39);
        this.state = 668;
        this.match(WebIDLParser.T__64);
        break;
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__14:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__39:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__65:
        this.enterOuterAlt(localctx, 40);
        this.state = 669;
        this.argumentNameKeyword();
        break;
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
        this.enterOuterAlt(localctx, 41);
        this.state = 670;
        this.bufferRelatedType();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentNameKeywordContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_argumentNameKeyword;
  return this;
}

ArgumentNameKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentNameKeywordContext.prototype.constructor = ArgumentNameKeywordContext;

ArgumentNameKeywordContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterArgumentNameKeyword(this);
  }
};

ArgumentNameKeywordContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitArgumentNameKeyword(this);
  }
};

ArgumentNameKeywordContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitArgumentNameKeyword(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ArgumentNameKeywordContext = ArgumentNameKeywordContext;

WebIDLParser.prototype.argumentNameKeyword = function() {
  var localctx = new ArgumentNameKeywordContext(this, this._ctx, this.state);
  this.enterRule(localctx, 146, WebIDLParser.RULE_argumentNameKeyword);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 673;
    _la = this._input.LA(1);
    if(
      !(
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << WebIDLParser.T__0) |
              (1 << WebIDLParser.T__1) |
              (1 << WebIDLParser.T__6) |
              (1 << WebIDLParser.T__7) |
              (1 << WebIDLParser.T__8) |
              (1 << WebIDLParser.T__14) |
              (1 << WebIDLParser.T__18) |
              (1 << WebIDLParser.T__19) |
              (1 << WebIDLParser.T__20) |
              (1 << WebIDLParser.T__27) |
              (1 << WebIDLParser.T__28) |
              (1 << WebIDLParser.T__29) |
              (1 << WebIDLParser.T__30))) !==
            0) ||
        (((_la - 32) & ~0x1f) == 0 &&
          ((1 << (_la - 32)) &
            ((1 << (WebIDLParser.T__31 - 32)) |
              (1 << (WebIDLParser.T__33 - 32)) |
              (1 << (WebIDLParser.T__34 - 32)) |
              (1 << (WebIDLParser.T__35 - 32)) |
              (1 << (WebIDLParser.T__36 - 32)) |
              (1 << (WebIDLParser.T__39 - 32)) |
              (1 << (WebIDLParser.T__42 - 32)) |
              (1 << (WebIDLParser.T__43 - 32)))) !==
            0) ||
        _la === WebIDLParser.T__65
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OtherOrCommaContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_otherOrComma;
  return this;
}

OtherOrCommaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OtherOrCommaContext.prototype.constructor = OtherOrCommaContext;

OtherOrCommaContext.prototype.other = function() {
  return this.getTypedRuleContext(OtherContext, 0);
};

OtherOrCommaContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOtherOrComma(this);
  }
};

OtherOrCommaContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOtherOrComma(this);
  }
};

OtherOrCommaContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOtherOrComma(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OtherOrCommaContext = OtherOrCommaContext;

WebIDLParser.prototype.otherOrComma = function() {
  var localctx = new OtherOrCommaContext(this, this._ctx, this.state);
  this.enterRule(localctx, 148, WebIDLParser.RULE_otherOrComma);
  try {
    this.state = 677;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__4:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__9:
      case WebIDLParser.T__12:
      case WebIDLParser.T__14:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__21:
      case WebIDLParser.T__22:
      case WebIDLParser.T__23:
      case WebIDLParser.T__24:
      case WebIDLParser.T__25:
      case WebIDLParser.T__26:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__37:
      case WebIDLParser.T__38:
      case WebIDLParser.T__39:
      case WebIDLParser.T__40:
      case WebIDLParser.T__41:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__44:
      case WebIDLParser.T__45:
      case WebIDLParser.T__46:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__60:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__64:
      case WebIDLParser.T__65:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.INTEGER_WEBIDL:
      case WebIDLParser.FLOAT_WEBIDL:
      case WebIDLParser.IDENTIFIER_WEBIDL:
      case WebIDLParser.STRING_WEBIDL:
      case WebIDLParser.OTHER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 675;
        this.other();
        break;
      case WebIDLParser.T__15:
        this.enterOuterAlt(localctx, 2);
        this.state = 676;
        this.match(WebIDLParser.T__15);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function TypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_type;
  return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.singleType = function() {
  return this.getTypedRuleContext(SingleTypeContext, 0);
};

TypeContext.prototype.unionType = function() {
  return this.getTypedRuleContext(UnionTypeContext, 0);
};

TypeContext.prototype.null_ = function() {
  return this.getTypedRuleContext(Null_Context, 0);
};

TypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterType(this);
  }
};

TypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitType(this);
  }
};

TypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.TypeContext = TypeContext;

WebIDLParser.prototype.type = function() {
  var localctx = new TypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 150, WebIDLParser.RULE_type);
  try {
    this.state = 683;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this.singleType();
        break;
      case WebIDLParser.T__16:
        this.enterOuterAlt(localctx, 2);
        this.state = 680;
        this.unionType();
        this.state = 681;
        this.null_();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function SingleTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_singleType;
  return this;
}

SingleTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTypeContext.prototype.constructor = SingleTypeContext;

SingleTypeContext.prototype.nonAnyType = function() {
  return this.getTypedRuleContext(NonAnyTypeContext, 0);
};

SingleTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterSingleType(this);
  }
};

SingleTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitSingleType(this);
  }
};

SingleTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitSingleType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.SingleTypeContext = SingleTypeContext;

WebIDLParser.prototype.singleType = function() {
  var localctx = new SingleTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 152, WebIDLParser.RULE_singleType);
  try {
    this.state = 687;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.nonAnyType();
        break;
      case WebIDLParser.T__52:
        this.enterOuterAlt(localctx, 2);
        this.state = 686;
        this.match(WebIDLParser.T__52);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function UnionTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_unionType;
  return this;
}

UnionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionTypeContext.prototype.constructor = UnionTypeContext;

UnionTypeContext.prototype.unionMemberType = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(UnionMemberTypeContext);
  } else {
    return this.getTypedRuleContext(UnionMemberTypeContext, i);
  }
};

UnionTypeContext.prototype.unionMemberTypes = function() {
  return this.getTypedRuleContext(UnionMemberTypesContext, 0);
};

UnionTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterUnionType(this);
  }
};

UnionTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitUnionType(this);
  }
};

UnionTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitUnionType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.UnionTypeContext = UnionTypeContext;

WebIDLParser.prototype.unionType = function() {
  var localctx = new UnionTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 154, WebIDLParser.RULE_unionType);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 689;
    this.match(WebIDLParser.T__16);
    this.state = 690;
    this.unionMemberType();
    this.state = 691;
    this.match(WebIDLParser.T__60);
    this.state = 692;
    this.unionMemberType();
    this.state = 693;
    this.unionMemberTypes();
    this.state = 694;
    this.match(WebIDLParser.T__17);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function UnionMemberTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_unionMemberType;
  return this;
}

UnionMemberTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionMemberTypeContext.prototype.constructor = UnionMemberTypeContext;

UnionMemberTypeContext.prototype.nonAnyType = function() {
  return this.getTypedRuleContext(NonAnyTypeContext, 0);
};

UnionMemberTypeContext.prototype.unionType = function() {
  return this.getTypedRuleContext(UnionTypeContext, 0);
};

UnionMemberTypeContext.prototype.null_ = function() {
  return this.getTypedRuleContext(Null_Context, 0);
};

UnionMemberTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterUnionMemberType(this);
  }
};

UnionMemberTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitUnionMemberType(this);
  }
};

UnionMemberTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitUnionMemberType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.UnionMemberTypeContext = UnionMemberTypeContext;

WebIDLParser.prototype.unionMemberType = function() {
  var localctx = new UnionMemberTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 156, WebIDLParser.RULE_unionMemberType);
  try {
    this.state = 700;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 696;
        this.nonAnyType();
        break;
      case WebIDLParser.T__16:
        this.enterOuterAlt(localctx, 2);
        this.state = 697;
        this.unionType();
        this.state = 698;
        this.null_();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function UnionMemberTypesContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_unionMemberTypes;
  return this;
}

UnionMemberTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionMemberTypesContext.prototype.constructor = UnionMemberTypesContext;

UnionMemberTypesContext.prototype.unionMemberType = function() {
  return this.getTypedRuleContext(UnionMemberTypeContext, 0);
};

UnionMemberTypesContext.prototype.unionMemberTypes = function() {
  return this.getTypedRuleContext(UnionMemberTypesContext, 0);
};

UnionMemberTypesContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterUnionMemberTypes(this);
  }
};

UnionMemberTypesContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitUnionMemberTypes(this);
  }
};

UnionMemberTypesContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitUnionMemberTypes(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.UnionMemberTypesContext = UnionMemberTypesContext;

WebIDLParser.prototype.unionMemberTypes = function() {
  var localctx = new UnionMemberTypesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 158, WebIDLParser.RULE_unionMemberTypes);
  try {
    this.state = 707;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__60:
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.match(WebIDLParser.T__60);
        this.state = 703;
        this.unionMemberType();
        this.state = 704;
        this.unionMemberTypes();
        break;
      case WebIDLParser.T__17:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function NonAnyTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_nonAnyType;
  return this;
}

NonAnyTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonAnyTypeContext.prototype.constructor = NonAnyTypeContext;

NonAnyTypeContext.prototype.primitiveType = function() {
  return this.getTypedRuleContext(PrimitiveTypeContext, 0);
};

NonAnyTypeContext.prototype.null_ = function() {
  return this.getTypedRuleContext(Null_Context, 0);
};

NonAnyTypeContext.prototype.promiseType = function() {
  return this.getTypedRuleContext(PromiseTypeContext, 0);
};

NonAnyTypeContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

NonAnyTypeContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

NonAnyTypeContext.prototype.bufferRelatedType = function() {
  return this.getTypedRuleContext(BufferRelatedTypeContext, 0);
};

NonAnyTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterNonAnyType(this);
  }
};

NonAnyTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitNonAnyType(this);
  }
};

NonAnyTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitNonAnyType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.NonAnyTypeContext = NonAnyTypeContext;

WebIDLParser.prototype.nonAnyType = function() {
  var localctx = new NonAnyTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 160, WebIDLParser.RULE_nonAnyType);
  try {
    this.state = 744;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__59:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
        this.enterOuterAlt(localctx, 1);
        this.state = 709;
        this.primitiveType();
        this.state = 710;
        this.null_();
        break;
      case WebIDLParser.T__78:
        this.enterOuterAlt(localctx, 2);
        this.state = 712;
        this.promiseType();
        this.state = 713;
        this.null_();
        break;
      case WebIDLParser.T__47:
        this.enterOuterAlt(localctx, 3);
        this.state = 715;
        this.match(WebIDLParser.T__47);
        this.state = 716;
        this.null_();
        break;
      case WebIDLParser.T__48:
        this.enterOuterAlt(localctx, 4);
        this.state = 717;
        this.match(WebIDLParser.T__48);
        this.state = 718;
        this.null_();
        break;
      case WebIDLParser.T__51:
        this.enterOuterAlt(localctx, 5);
        this.state = 719;
        this.match(WebIDLParser.T__51);
        this.state = 720;
        this.null_();
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 6);
        this.state = 721;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        this.state = 722;
        this.null_();
        break;
      case WebIDLParser.T__61:
        this.enterOuterAlt(localctx, 7);
        this.state = 723;
        this.match(WebIDLParser.T__61);
        this.state = 724;
        this.match(WebIDLParser.T__40);
        this.state = 725;
        this.type();
        this.state = 726;
        this.match(WebIDLParser.T__41);
        this.state = 727;
        this.null_();
        break;
      case WebIDLParser.T__58:
        this.enterOuterAlt(localctx, 8);
        this.state = 729;
        this.match(WebIDLParser.T__58);
        this.state = 730;
        this.null_();
        break;
      case WebIDLParser.T__50:
        this.enterOuterAlt(localctx, 9);
        this.state = 731;
        this.match(WebIDLParser.T__50);
        this.state = 732;
        this.null_();
        break;
      case WebIDLParser.T__66:
        this.enterOuterAlt(localctx, 10);
        this.state = 733;
        this.match(WebIDLParser.T__66);
        this.state = 734;
        this.null_();
        break;
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
        this.enterOuterAlt(localctx, 11);
        this.state = 735;
        this.bufferRelatedType();
        this.state = 736;
        this.null_();
        break;
      case WebIDLParser.T__49:
        this.enterOuterAlt(localctx, 12);
        this.state = 738;
        this.match(WebIDLParser.T__49);
        this.state = 739;
        this.match(WebIDLParser.T__40);
        this.state = 740;
        this.type();
        this.state = 741;
        this.match(WebIDLParser.T__41);
        this.state = 742;
        this.null_();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function BufferRelatedTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_bufferRelatedType;
  return this;
}

BufferRelatedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BufferRelatedTypeContext.prototype.constructor = BufferRelatedTypeContext;

BufferRelatedTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterBufferRelatedType(this);
  }
};

BufferRelatedTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitBufferRelatedType(this);
  }
};

BufferRelatedTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitBufferRelatedType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.BufferRelatedTypeContext = BufferRelatedTypeContext;

WebIDLParser.prototype.bufferRelatedType = function() {
  var localctx = new BufferRelatedTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 162, WebIDLParser.RULE_bufferRelatedType);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 746;
    _la = this._input.LA(1);
    if(
      !(
        ((_la - 68) & ~0x1f) == 0 &&
        ((1 << (_la - 68)) &
          ((1 << (WebIDLParser.T__67 - 68)) |
            (1 << (WebIDLParser.T__68 - 68)) |
            (1 << (WebIDLParser.T__69 - 68)) |
            (1 << (WebIDLParser.T__70 - 68)) |
            (1 << (WebIDLParser.T__71 - 68)) |
            (1 << (WebIDLParser.T__72 - 68)) |
            (1 << (WebIDLParser.T__73 - 68)) |
            (1 << (WebIDLParser.T__74 - 68)) |
            (1 << (WebIDLParser.T__75 - 68)) |
            (1 << (WebIDLParser.T__76 - 68)) |
            (1 << (WebIDLParser.T__77 - 68)))) !==
          0
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ConstTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_constType;
  return this;
}

ConstTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstTypeContext.prototype.constructor = ConstTypeContext;

ConstTypeContext.prototype.primitiveType = function() {
  return this.getTypedRuleContext(PrimitiveTypeContext, 0);
};

ConstTypeContext.prototype.null_ = function() {
  return this.getTypedRuleContext(Null_Context, 0);
};

ConstTypeContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

ConstTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterConstType(this);
  }
};

ConstTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitConstType(this);
  }
};

ConstTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitConstType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ConstTypeContext = ConstTypeContext;

WebIDLParser.prototype.constType = function() {
  var localctx = new ConstTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 164, WebIDLParser.RULE_constType);
  try {
    this.state = 753;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__59:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
        this.enterOuterAlt(localctx, 1);
        this.state = 748;
        this.primitiveType();
        this.state = 749;
        this.null_();
        break;
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);
        this.state = 751;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        this.state = 752;
        this.null_();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_primitiveType;
  return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.unsignedIntegerType = function() {
  return this.getTypedRuleContext(UnsignedIntegerTypeContext, 0);
};

PrimitiveTypeContext.prototype.unrestrictedFloatType = function() {
  return this.getTypedRuleContext(UnrestrictedFloatTypeContext, 0);
};

PrimitiveTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterPrimitiveType(this);
  }
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitPrimitiveType(this);
  }
};

PrimitiveTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitPrimitiveType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.PrimitiveTypeContext = PrimitiveTypeContext;

WebIDLParser.prototype.primitiveType = function() {
  var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 166, WebIDLParser.RULE_primitiveType);
  try {
    this.state = 760;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__57:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
        this.enterOuterAlt(localctx, 1);
        this.state = 755;
        this.unsignedIntegerType();
        break;
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__65:
        this.enterOuterAlt(localctx, 2);
        this.state = 756;
        this.unrestrictedFloatType();
        break;
      case WebIDLParser.T__53:
        this.enterOuterAlt(localctx, 3);
        this.state = 757;
        this.match(WebIDLParser.T__53);
        break;
      case WebIDLParser.T__54:
        this.enterOuterAlt(localctx, 4);
        this.state = 758;
        this.match(WebIDLParser.T__54);
        break;
      case WebIDLParser.T__59:
        this.enterOuterAlt(localctx, 5);
        this.state = 759;
        this.match(WebIDLParser.T__59);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function UnrestrictedFloatTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_unrestrictedFloatType;
  return this;
}

UnrestrictedFloatTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnrestrictedFloatTypeContext.prototype.constructor = UnrestrictedFloatTypeContext;

UnrestrictedFloatTypeContext.prototype.floatType = function() {
  return this.getTypedRuleContext(FloatTypeContext, 0);
};

UnrestrictedFloatTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterUnrestrictedFloatType(this);
  }
};

UnrestrictedFloatTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitUnrestrictedFloatType(this);
  }
};

UnrestrictedFloatTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitUnrestrictedFloatType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.UnrestrictedFloatTypeContext = UnrestrictedFloatTypeContext;

WebIDLParser.prototype.unrestrictedFloatType = function() {
  var localctx = new UnrestrictedFloatTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 168, WebIDLParser.RULE_unrestrictedFloatType);
  try {
    this.state = 765;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__65:
        this.enterOuterAlt(localctx, 1);
        this.state = 762;
        this.match(WebIDLParser.T__65);
        this.state = 763;
        this.floatType();
        break;
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
        this.enterOuterAlt(localctx, 2);
        this.state = 764;
        this.floatType();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function FloatTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_floatType;
  return this;
}

FloatTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatTypeContext.prototype.constructor = FloatTypeContext;

FloatTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterFloatType(this);
  }
};

FloatTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitFloatType(this);
  }
};

FloatTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitFloatType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.FloatTypeContext = FloatTypeContext;

WebIDLParser.prototype.floatType = function() {
  var localctx = new FloatTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 170, WebIDLParser.RULE_floatType);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 767;
    _la = this._input.LA(1);
    if(!(_la === WebIDLParser.T__55 || _la === WebIDLParser.T__56)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function UnsignedIntegerTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_unsignedIntegerType;
  return this;
}

UnsignedIntegerTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsignedIntegerTypeContext.prototype.constructor = UnsignedIntegerTypeContext;

UnsignedIntegerTypeContext.prototype.integerType = function() {
  return this.getTypedRuleContext(IntegerTypeContext, 0);
};

UnsignedIntegerTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterUnsignedIntegerType(this);
  }
};

UnsignedIntegerTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitUnsignedIntegerType(this);
  }
};

UnsignedIntegerTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitUnsignedIntegerType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.UnsignedIntegerTypeContext = UnsignedIntegerTypeContext;

WebIDLParser.prototype.unsignedIntegerType = function() {
  var localctx = new UnsignedIntegerTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 172, WebIDLParser.RULE_unsignedIntegerType);
  try {
    this.state = 772;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__63:
        this.enterOuterAlt(localctx, 1);
        this.state = 769;
        this.match(WebIDLParser.T__63);
        this.state = 770;
        this.integerType();
        break;
      case WebIDLParser.T__57:
      case WebIDLParser.T__62:
        this.enterOuterAlt(localctx, 2);
        this.state = 771;
        this.integerType();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IntegerTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_integerType;
  return this;
}

IntegerTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

IntegerTypeContext.prototype.optionalLong = function() {
  return this.getTypedRuleContext(OptionalLongContext, 0);
};

IntegerTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterIntegerType(this);
  }
};

IntegerTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitIntegerType(this);
  }
};

IntegerTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitIntegerType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.IntegerTypeContext = IntegerTypeContext;

WebIDLParser.prototype.integerType = function() {
  var localctx = new IntegerTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 174, WebIDLParser.RULE_integerType);
  try {
    this.state = 777;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__62:
        this.enterOuterAlt(localctx, 1);
        this.state = 774;
        this.match(WebIDLParser.T__62);
        break;
      case WebIDLParser.T__57:
        this.enterOuterAlt(localctx, 2);
        this.state = 775;
        this.match(WebIDLParser.T__57);
        this.state = 776;
        this.optionalLong();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OptionalLongContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_optionalLong;
  return this;
}

OptionalLongContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalLongContext.prototype.constructor = OptionalLongContext;

OptionalLongContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterOptionalLong(this);
  }
};

OptionalLongContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitOptionalLong(this);
  }
};

OptionalLongContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitOptionalLong(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.OptionalLongContext = OptionalLongContext;

WebIDLParser.prototype.optionalLong = function() {
  var localctx = new OptionalLongContext(this, this._ctx, this.state);
  this.enterRule(localctx, 176, WebIDLParser.RULE_optionalLong);
  try {
    this.state = 781;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__57:
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        this.match(WebIDLParser.T__57);
        break;
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__14:
      case WebIDLParser.T__15:
      case WebIDLParser.T__16:
      case WebIDLParser.T__17:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__38:
      case WebIDLParser.T__39:
      case WebIDLParser.T__41:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__46:
      case WebIDLParser.T__60:
      case WebIDLParser.T__65:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function PromiseTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_promiseType;
  return this;
}

PromiseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PromiseTypeContext.prototype.constructor = PromiseTypeContext;

PromiseTypeContext.prototype.returnType = function() {
  return this.getTypedRuleContext(ReturnTypeContext, 0);
};

PromiseTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterPromiseType(this);
  }
};

PromiseTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitPromiseType(this);
  }
};

PromiseTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitPromiseType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.PromiseTypeContext = PromiseTypeContext;

WebIDLParser.prototype.promiseType = function() {
  var localctx = new PromiseTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 178, WebIDLParser.RULE_promiseType);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 783;
    this.match(WebIDLParser.T__78);
    this.state = 784;
    this.match(WebIDLParser.T__40);
    this.state = 785;
    this.returnType();
    this.state = 786;
    this.match(WebIDLParser.T__41);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Null_Context(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_null_;
  return this;
}

Null_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_Context.prototype.constructor = Null_Context;

Null_Context.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterNull_(this);
  }
};

Null_Context.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitNull_(this);
  }
};

Null_Context.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitNull_(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.Null_Context = Null_Context;

WebIDLParser.prototype.null_ = function() {
  var localctx = new Null_Context(this, this._ctx, this.state);
  this.enterRule(localctx, 180, WebIDLParser.RULE_null_);
  try {
    this.state = 790;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__46:
        this.enterOuterAlt(localctx, 1);
        this.state = 788;
        this.match(WebIDLParser.T__46);
        break;
      case WebIDLParser.T__0:
      case WebIDLParser.T__1:
      case WebIDLParser.T__6:
      case WebIDLParser.T__7:
      case WebIDLParser.T__8:
      case WebIDLParser.T__14:
      case WebIDLParser.T__15:
      case WebIDLParser.T__16:
      case WebIDLParser.T__17:
      case WebIDLParser.T__18:
      case WebIDLParser.T__19:
      case WebIDLParser.T__20:
      case WebIDLParser.T__27:
      case WebIDLParser.T__28:
      case WebIDLParser.T__29:
      case WebIDLParser.T__30:
      case WebIDLParser.T__31:
      case WebIDLParser.T__33:
      case WebIDLParser.T__34:
      case WebIDLParser.T__35:
      case WebIDLParser.T__36:
      case WebIDLParser.T__38:
      case WebIDLParser.T__39:
      case WebIDLParser.T__41:
      case WebIDLParser.T__42:
      case WebIDLParser.T__43:
      case WebIDLParser.T__60:
      case WebIDLParser.T__65:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ReturnTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_returnType;
  return this;
}

ReturnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnTypeContext.prototype.constructor = ReturnTypeContext;

ReturnTypeContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

ReturnTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterReturnType(this);
  }
};

ReturnTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitReturnType(this);
  }
};

ReturnTypeContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitReturnType(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ReturnTypeContext = ReturnTypeContext;

WebIDLParser.prototype.returnType = function() {
  var localctx = new ReturnTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 182, WebIDLParser.RULE_returnType);
  try {
    this.state = 794;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__16:
      case WebIDLParser.T__47:
      case WebIDLParser.T__48:
      case WebIDLParser.T__49:
      case WebIDLParser.T__50:
      case WebIDLParser.T__51:
      case WebIDLParser.T__52:
      case WebIDLParser.T__53:
      case WebIDLParser.T__54:
      case WebIDLParser.T__55:
      case WebIDLParser.T__56:
      case WebIDLParser.T__57:
      case WebIDLParser.T__58:
      case WebIDLParser.T__59:
      case WebIDLParser.T__61:
      case WebIDLParser.T__62:
      case WebIDLParser.T__63:
      case WebIDLParser.T__65:
      case WebIDLParser.T__66:
      case WebIDLParser.T__67:
      case WebIDLParser.T__68:
      case WebIDLParser.T__69:
      case WebIDLParser.T__70:
      case WebIDLParser.T__71:
      case WebIDLParser.T__72:
      case WebIDLParser.T__73:
      case WebIDLParser.T__74:
      case WebIDLParser.T__75:
      case WebIDLParser.T__76:
      case WebIDLParser.T__77:
      case WebIDLParser.T__78:
      case WebIDLParser.IDENTIFIER_WEBIDL:
        this.enterOuterAlt(localctx, 1);
        this.state = 792;
        this.type();
        break;
      case WebIDLParser.T__64:
        this.enterOuterAlt(localctx, 2);
        this.state = 793;
        this.match(WebIDLParser.T__64);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_identifierList;
  return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

IdentifierListContext.prototype.identifiers = function() {
  return this.getTypedRuleContext(IdentifiersContext, 0);
};

IdentifierListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterIdentifierList(this);
  }
};

IdentifierListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitIdentifierList(this);
  }
};

IdentifierListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitIdentifierList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.IdentifierListContext = IdentifierListContext;

WebIDLParser.prototype.identifierList = function() {
  var localctx = new IdentifierListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 184, WebIDLParser.RULE_identifierList);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 796;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 797;
    this.identifiers();
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IdentifiersContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_identifiers;
  return this;
}

IdentifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifiersContext.prototype.constructor = IdentifiersContext;

IdentifiersContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

IdentifiersContext.prototype.identifiers = function() {
  return this.getTypedRuleContext(IdentifiersContext, 0);
};

IdentifiersContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterIdentifiers(this);
  }
};

IdentifiersContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitIdentifiers(this);
  }
};

IdentifiersContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitIdentifiers(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.IdentifiersContext = IdentifiersContext;

WebIDLParser.prototype.identifiers = function() {
  var localctx = new IdentifiersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 186, WebIDLParser.RULE_identifiers);
  try {
    this.state = 803;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case WebIDLParser.T__15:
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this.match(WebIDLParser.T__15);
        this.state = 800;
        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
        this.state = 801;
        this.identifiers();
        break;
      case WebIDLParser.T__3:
      case WebIDLParser.T__11:
      case WebIDLParser.T__17:
        this.enterOuterAlt(localctx, 2);

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeNoArgsContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeNoArgs;
  return this;
}

ExtendedAttributeNoArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeNoArgsContext.prototype.constructor = ExtendedAttributeNoArgsContext;

ExtendedAttributeNoArgsContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

ExtendedAttributeNoArgsContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeNoArgs(this);
  }
};

ExtendedAttributeNoArgsContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeNoArgs(this);
  }
};

ExtendedAttributeNoArgsContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeNoArgs(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeNoArgsContext = ExtendedAttributeNoArgsContext;

WebIDLParser.prototype.extendedAttributeNoArgs = function() {
  var localctx = new ExtendedAttributeNoArgsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 188, WebIDLParser.RULE_extendedAttributeNoArgs);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 805;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeArgListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeArgList;
  return this;
}

ExtendedAttributeArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeArgListContext.prototype.constructor = ExtendedAttributeArgListContext;

ExtendedAttributeArgListContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

ExtendedAttributeArgListContext.prototype.argumentList = function() {
  return this.getTypedRuleContext(ArgumentListContext, 0);
};

ExtendedAttributeArgListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeArgList(this);
  }
};

ExtendedAttributeArgListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeArgList(this);
  }
};

ExtendedAttributeArgListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeArgList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeArgListContext = ExtendedAttributeArgListContext;

WebIDLParser.prototype.extendedAttributeArgList = function() {
  var localctx = new ExtendedAttributeArgListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 190, WebIDLParser.RULE_extendedAttributeArgList);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 807;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 808;
    this.match(WebIDLParser.T__16);
    this.state = 809;
    this.argumentList();
    this.state = 810;
    this.match(WebIDLParser.T__17);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeIdentContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeIdent;
  return this;
}

ExtendedAttributeIdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeIdentContext.prototype.constructor = ExtendedAttributeIdentContext;

ExtendedAttributeIdentContext.prototype.IDENTIFIER_WEBIDL = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(WebIDLParser.IDENTIFIER_WEBIDL);
  } else {
    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
  }
};

ExtendedAttributeIdentContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeIdent(this);
  }
};

ExtendedAttributeIdentContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeIdent(this);
  }
};

ExtendedAttributeIdentContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeIdent(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeIdentContext = ExtendedAttributeIdentContext;

WebIDLParser.prototype.extendedAttributeIdent = function() {
  var localctx = new ExtendedAttributeIdentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 192, WebIDLParser.RULE_extendedAttributeIdent);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 812;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 813;
    this.match(WebIDLParser.T__9);
    this.state = 814;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeIdentListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeIdentList;
  return this;
}

ExtendedAttributeIdentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeIdentListContext.prototype.constructor = ExtendedAttributeIdentListContext;

ExtendedAttributeIdentListContext.prototype.IDENTIFIER_WEBIDL = function() {
  return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
};

ExtendedAttributeIdentListContext.prototype.identifierList = function() {
  return this.getTypedRuleContext(IdentifierListContext, 0);
};

ExtendedAttributeIdentListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeIdentList(this);
  }
};

ExtendedAttributeIdentListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeIdentList(this);
  }
};

ExtendedAttributeIdentListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeIdentList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeIdentListContext = ExtendedAttributeIdentListContext;

WebIDLParser.prototype.extendedAttributeIdentList = function() {
  var localctx = new ExtendedAttributeIdentListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 194, WebIDLParser.RULE_extendedAttributeIdentList);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 816;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 817;
    this.match(WebIDLParser.T__9);
    this.state = 818;
    this.match(WebIDLParser.T__16);
    this.state = 819;
    this.identifierList();
    this.state = 820;
    this.match(WebIDLParser.T__17);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExtendedAttributeNamedArgListContext(parser, parent, invokingState) {
  if(parent === undefined) {
    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = WebIDLParser.RULE_extendedAttributeNamedArgList;
  return this;
}

ExtendedAttributeNamedArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedAttributeNamedArgListContext.prototype.constructor = ExtendedAttributeNamedArgListContext;

ExtendedAttributeNamedArgListContext.prototype.IDENTIFIER_WEBIDL = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(WebIDLParser.IDENTIFIER_WEBIDL);
  } else {
    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
  }
};

ExtendedAttributeNamedArgListContext.prototype.argumentList = function() {
  return this.getTypedRuleContext(ArgumentListContext, 0);
};

ExtendedAttributeNamedArgListContext.prototype.enterRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.enterExtendedAttributeNamedArgList(this);
  }
};

ExtendedAttributeNamedArgListContext.prototype.exitRule = function(listener) {
  if(listener instanceof WebIDLListener) {
    listener.exitExtendedAttributeNamedArgList(this);
  }
};

ExtendedAttributeNamedArgListContext.prototype.accept = function(visitor) {
  if(visitor instanceof WebIDLVisitor) {
    return visitor.visitExtendedAttributeNamedArgList(this);
  } else {
    return visitor.visitChildren(this);
  }
};

WebIDLParser.ExtendedAttributeNamedArgListContext = ExtendedAttributeNamedArgListContext;

WebIDLParser.prototype.extendedAttributeNamedArgList = function() {
  var localctx = new ExtendedAttributeNamedArgListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 196, WebIDLParser.RULE_extendedAttributeNamedArgList);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 822;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 823;
    this.match(WebIDLParser.T__9);
    this.state = 824;
    this.match(WebIDLParser.IDENTIFIER_WEBIDL);
    this.state = 825;
    this.match(WebIDLParser.T__16);
    this.state = 826;
    this.argumentList();
    this.state = 827;
    this.match(WebIDLParser.T__17);
  } catch(re) {
    if(re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

exports.WebIDLParser = WebIDLParser;
